package src;

import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.text.DefaultCaret;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortTimeoutException;
import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;

/**
 *
 * @author Martin
 */
public class MainWindow extends javax.swing.JFrame implements Runnable, SerialPortEventListener, KeyEventDispatcher {

    public static enum SENSOR {

        LEFT_FRONT,
        RIGHT_FRONT,
        LEFT_BACK,
        RIGHT_BACK,
        FRONT,
        BACK,
        VERTICAL,
        ULTRA_SOUND
    }

    SerialPort comPort;
    LinkedList<byte[]> messageBuffer;
    final Object lock;
    Controller controller;

    boolean keyUpPressed, keyDownPressed, keyLeftPressed, keyRightPressed, keyZeroPressed, keyControlPressed;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        DefaultCaret caret = (DefaultCaret) messageTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        messageBuffer = new LinkedList<>();
        lock = new Object();

        Thread t = new Thread(this);
        t.start();

        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        upperDrawArea = new UpperPanel();
        lowerDrawArea = new LowerPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        irLeftFrontTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        irRightFrontTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        irVerticalTextField = new javax.swing.JTextField();
        irVerticalAngleTextField = new javax.swing.JTextField();
        irLeftBackTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        irRightBackTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        irBackTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ultraSoundTextField = new javax.swing.JTextField();
        irFrontTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        autoButton = new javax.swing.JToggleButton();
        autoLeftRadioButton = new javax.swing.JRadioButton();
        autoRightRadioButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        comNameTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        changeParametersButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        parameter1TextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        parameter3TextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        parameter2TextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        parameter4TextField = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        searchControllersButton = new javax.swing.JButton();
        controllersComboBox = new javax.swing.JComboBox();
        connectControllerButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        chosenControllerLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arkenstone");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N

        upperDrawArea.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout upperDrawAreaLayout = new javax.swing.GroupLayout(upperDrawArea);
        upperDrawArea.setLayout(upperDrawAreaLayout);
        upperDrawAreaLayout.setHorizontalGroup(
            upperDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        upperDrawAreaLayout.setVerticalGroup(
            upperDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        lowerDrawArea.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout lowerDrawAreaLayout = new javax.swing.GroupLayout(lowerDrawArea);
        lowerDrawArea.setLayout(lowerDrawAreaLayout);
        lowerDrawAreaLayout.setHorizontalGroup(
            lowerDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
        lowerDrawAreaLayout.setVerticalGroup(
            lowerDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        messageTextArea.setEditable(false);
        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        messageTextArea.setText("Arkenstone startat.");
        jScrollPane1.setViewportView(messageTextArea);

        irLeftFrontTextField.setEditable(false);
        irLeftFrontTextField.setText("0");
        irLeftFrontTextField.setFocusable(false);

        jLabel1.setText("IR vänster fram");

        jLabel2.setText("IR höger fram");

        irRightFrontTextField.setEditable(false);
        irRightFrontTextField.setText("0");
        irRightFrontTextField.setFocusable(false);

        jLabel3.setText("IR vertikal fram");

        jLabel6.setText("IR vertikal vinkel");

        irVerticalTextField.setEditable(false);
        irVerticalTextField.setText("0");
        irVerticalTextField.setFocusable(false);

        irVerticalAngleTextField.setEditable(false);
        irVerticalAngleTextField.setText("0");
        irVerticalAngleTextField.setFocusable(false);

        irLeftBackTextField.setEditable(false);
        irLeftBackTextField.setText("0");
        irLeftBackTextField.setFocusable(false);

        jLabel7.setText("IR vänster bak");

        irRightBackTextField.setEditable(false);
        irRightBackTextField.setText("0");
        irRightBackTextField.setFocusable(false);

        jLabel8.setText("IR höger bak");

        irBackTextField.setEditable(false);
        irBackTextField.setText("0");
        irBackTextField.setFocusable(false);

        jLabel9.setText("IR bak");

        jLabel10.setText("Ultraljud");

        ultraSoundTextField.setEditable(false);
        ultraSoundTextField.setText("0");
        ultraSoundTextField.setFocusable(false);

        irFrontTextField.setEditable(false);
        irFrontTextField.setText("0");
        irFrontTextField.setFocusable(false);

        jLabel4.setText("IR fram");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(irLeftFrontTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(irRightFrontTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(irFrontTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irLeftBackTextField)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irRightBackTextField)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irBackTextField)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(irVerticalTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(irVerticalAngleTextField)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ultraSoundTextField)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(irRightFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(irLeftFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irFrontTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irLeftBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irRightBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irBackTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irVerticalAngleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(irVerticalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ultraSoundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sensorvärden", jPanel4);

        autoButton.setText("Autonomt läge (av)");
        autoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(autoLeftRadioButton);
        autoLeftRadioButton.setSelected(true);
        autoLeftRadioButton.setText("Vänsteralgoritm");
        autoLeftRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                autoLeftRadioButtonItemStateChanged(evt);
            }
        });

        buttonGroup1.add(autoRightRadioButton);
        autoRightRadioButton.setText("Högeralgoritm");
        autoRightRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                autoRightRadioButtonItemStateChanged(evt);
            }
        });

        jLabel11.setText("COM port namn:");

        comNameTextField.setText("COM1");

        connectButton.setText("Koppla upp");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Parametrar");

        changeParametersButton.setText("Ladda upp parametrar");
        changeParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeParametersButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Testparameter 1");

        parameter1TextField.setText("5");

        jLabel14.setText("Testparameter 3");

        parameter3TextField.setText("5");

        jLabel15.setText("Testparameter 2");

        parameter2TextField.setText("5");

        jLabel16.setText("Testparameter 4");

        parameter4TextField.setText("5");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Koppla upp till handkontroll");

        searchControllersButton.setText("Leta efter kontroller");
        searchControllersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchControllersButtonActionPerformed(evt);
            }
        });

        connectControllerButton.setText("Använd kontroll");
        connectControllerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectControllerButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Vald kontroll:");

        chosenControllerLabel.setText("Ingen");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator6)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(autoButton)
                                .addGap(18, 18, 18)
                                .addComponent(autoLeftRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(autoRightRadioButton))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(connectControllerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chosenControllerLabel))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changeParametersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(parameter1TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(parameter2TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(parameter3TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(parameter4TextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addGap(0, 267, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(searchControllersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(controllersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoButton)
                    .addComponent(autoLeftRadioButton)
                    .addComponent(autoRightRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchControllersButton)
                    .addComponent(controllersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectControllerButton)
                    .addComponent(jLabel17)
                    .addComponent(chosenControllerLabel))
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parameter1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parameter2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(parameter3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(parameter4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(changeParametersButton)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inställningar", jPanel5);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upperDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lowerDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(upperDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lowerDrawArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoButtonActionPerformed
        if (autoButton.isSelected()) {
            autoButton.setText("Autonomt läge (på)");
            writeMessage("Autonomt läge aktiverat");
        } else {
            autoButton.setText("Autonomt läge (av)");
            writeMessage("Autonomt läge avaktiverat");
        }
    }//GEN-LAST:event_autoButtonActionPerformed

    private void changeParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeParametersButtonActionPerformed
        String mess = parameter1TextField.getText();
        if (sendMessage('M', mess)) {
            writeMessage("Parametrar uppdaterade");
            writeMessage("Wrote: " + mess);
        } else {
            writeMessage("Kunde inte skicka");
        }
    }//GEN-LAST:event_changeParametersButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (connectButton.getText() == "Koppla ifrån") {
            try {
                writeMessage("Kopplar ifrån");
                comPort.closePort();
                writeMessage("Ifrånkopplad");
                connectButton.setText("Koppla upp");
            } catch (SerialPortException ex) {
                System.out.println(ex);
            }
        } else {
            writeMessage("Kopplar upp...");
            connect(comNameTextField.getText());
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void autoLeftRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autoLeftRadioButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            writeMessage("Vänsteralgoritm körs");
        }
    }//GEN-LAST:event_autoLeftRadioButtonItemStateChanged

    private void autoRightRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autoRightRadioButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            writeMessage("Högeralgoritm körs");
        }
    }//GEN-LAST:event_autoRightRadioButtonItemStateChanged

    private void searchControllersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchControllersButtonActionPerformed
        Controller[] controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
        for(Controller c: controllers){
            if(c.getType() == Controller.Type.STICK){
                controllersComboBox.addItem(c);
            }
        }
    }//GEN-LAST:event_searchControllersButtonActionPerformed

    private void connectControllerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectControllerButtonActionPerformed
        Controller c = (Controller) controllersComboBox.getSelectedItem();
        if(c != null){
            controller = c;
            chosenControllerLabel.setText(c.getName());
        }
    }//GEN-LAST:event_connectControllerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton autoButton;
    private javax.swing.JRadioButton autoLeftRadioButton;
    private javax.swing.JRadioButton autoRightRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton changeParametersButton;
    private javax.swing.JLabel chosenControllerLabel;
    private javax.swing.JTextField comNameTextField;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton connectControllerButton;
    private javax.swing.JComboBox controllersComboBox;
    private javax.swing.JTextField irBackTextField;
    private javax.swing.JTextField irFrontTextField;
    private javax.swing.JTextField irLeftBackTextField;
    private javax.swing.JTextField irLeftFrontTextField;
    private javax.swing.JTextField irRightBackTextField;
    private javax.swing.JTextField irRightFrontTextField;
    private javax.swing.JTextField irVerticalAngleTextField;
    private javax.swing.JTextField irVerticalTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel lowerDrawArea;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField parameter1TextField;
    private javax.swing.JTextField parameter2TextField;
    private javax.swing.JTextField parameter3TextField;
    private javax.swing.JTextField parameter4TextField;
    private javax.swing.JButton searchControllersButton;
    private javax.swing.JTextField ultraSoundTextField;
    private javax.swing.JPanel upperDrawArea;
    // End of variables declaration//GEN-END:variables

    /* ------------------------------------------------
     Egna funktioner */
    private void writeMessage(String message) {
        messageTextArea.append("\n" + message);
    }

    private void connect(String portName) {
        // Skapa ny COM-port
        comPort = new SerialPort(portName);
        try {
            //Open serial port
            comPort.openPort();
            //Set params. Also you can set params by this string: serialPort.setParams(9600, 8, 1, 0);
            comPort.setParams(SerialPort.BAUDRATE_115200,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_2,
                    SerialPort.PARITY_NONE);
            comPort.addEventListener(this);
        } catch (SerialPortException ex) {
            writeMessage("Kunde inte koppla upp");
            System.out.println(ex);
            return;
        }

        connectButton.setText("Koppla ifrån");
        writeMessage("Uppkopplingen lyckades");
    }

    public void serialEvent(SerialPortEvent serialPortEvent) {
        try {
            ArrayList<Byte> bytes = new ArrayList();
            byte[] indata = comPort.readBytes(1);

            if (indata[0] == 0x7E) {

                boolean ceo = false;
                byte b;
                byte b2;
                
                while (true) {
                    try {
                        indata = comPort.readBytes(1, 100);
                    } catch (SerialPortTimeoutException ex) {
                        System.out.println("Timeout");
                        return;
                    }

                    b = indata[0];

                    if (b == 0x7D) {
                        ceo = true;
                    } else if (b == 0x7E) {
                        // Säger om meddelandet är korrekt
                        boolean correct = true;

                        // Kontrollera rätt längd på paketet och CRC
                        if (bytes.size() < 4) {
                            correct = false;
                        } else if (bytes.size() != 4 + bytes.get(1)) {
                            correct = false;
                        }
                        /* else {
                         byte[] crcIndata = new byte[length + 2];
                         for(int i = 0; i < length + 2; i++){
                         crcIndata[i] = bytes.get(i);
                         }
                         int crc = crc16(length, crcIndata);
                         byte crc1 = (byte) (crc & 0x00FF);
                         byte crc2 = (byte) ((crc & 0xFF00) >> 8);
                         System.out.println("CRC: " + crc1 + ", " + crc2);
                         if (crc1 != bytes.get(length + 2) || crc2 != bytes.get(length + 3)){
                         correct = false;
                         }
                         }*/

                        /*for (byte byte1 : bytes) {
                         System.out.println(byte1);
                         }*/
                        
                        if (correct) {
                            int length = bytes.get(1);
                            byte[] relevantData = new byte[length + 2];
                            for (int i = 0; i < length + 2; i++) {
                                relevantData[i] = bytes.get(i);
                            }
                            // Synkronisera skrivning och läsning till och från buffern
                            synchronized (lock) {
                                messageBuffer.addLast(relevantData);
                            }
                            return;
                        } else {
                            System.out.println("Felaktigt meddelande");
                            bytes.clear();
                        }
                    } else {
                        if (ceo) {
                            b2 = (byte) (b ^ 0x20);
                            ceo = false;
                            bytes.add(b2);
                        } else {
                            bytes.add(b);
                        }
                    }
                }
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
    }

    private int crc16(int length, byte[] data) {
        int crc = 0xFFFF;
        int poly = 0x8408;

        if (length == 0) {
            return 0;
        }
        for (int i = length - 1; i >= 0; i--) {
            byte b = data[i];
            for (int j = 0; j < 8; j++) {
                if ((crc & 0x0001) != ((b >> j) & 0x0001)) {
                    crc = (crc >> 1) ^ poly;
                } else {
                    crc >>= 1;
                }
            }
        }

        crc ^= 0xFFFF;
        int clone = crc;
        crc = (crc << 8) | ((clone >> 8) & 0x00FF);
        return crc;
    }

    public boolean sendMessage(char tag, String instructions) {
        if (comPort == null || !comPort.isOpened()) {
            writeMessage("Koppla upp till roboten först!");
            return false;
        }

        byte[] data = instructions.getBytes();
        byte length = (byte) data.length;
        int crc = crc16(length, data);
        byte crc1 = (byte) ((crc & 0xFF00) >> 8);
        byte crc2 = (byte) (crc & 0x00FF);

        ArrayList<Byte> message = new ArrayList<>();
        message.add((byte) 0x7E);
        message.add((byte) tag);
        message.add(length);
        for (int i = 0; i < length; i++) {
            byte b = data[i];
            if (b == 0x7E || b == 0x7D) {
                // Escape octet
                message.add((byte) 0x7D);
                message.add((byte) (b ^ 0x20));
            } else {
                message.add(b);
            }
        }
        message.add(crc1);
        message.add(crc2);
        message.add((byte) 0x7E);

        byte[] doneMessage = new byte[message.size()];
        for (int i = 0; i < message.size(); i++) {
            doneMessage[i] = message.get(i);
        }
        try {
            comPort.writeBytes(doneMessage);
        } catch (SerialPortException ex) {
            System.out.println(ex);
            return false;
        }

        return true;
    }

    public void run() {
        while (true) {
            upperDrawArea.repaint();
            lowerDrawArea.repaint();

            if (hasMessage()) {
                decodeMessage();
            }

            try {
                Thread.sleep(50);
            } catch (InterruptedException ex) {
                System.out.println(ex);
            }
        }
    }

    private boolean hasMessage() {
        return messageBuffer.size() > 0;
    }

    private void decodeMessage() {
        byte[] message = messageBuffer.getFirst();
        //Kanske behöver synkroniseras med serialEvent...
        synchronized (lock) {
            messageBuffer.removeFirst();
        }

        char tag = (char) message[0];
        int length = message[1];
        byte data[] = new byte[length];
        for (int i = 0; i < length; i++) {
            data[i] = message[i + 2];
        }

        switch (tag) {
            case 'I':
                settingsUpdate(data);
                break;
            case 'M':
                messageRecieved(data);
                break;
            case 'S':
                sensorUpdate(data);
                break;
        }
    }

    private void settingsUpdate(byte[] data) {

    }

    private void messageRecieved(byte[] data) {
        String m = "";

        for (byte b : data) {
            m += (char) b;
        }

        writeMessage("Message: " + m);
    }

    private void sensorUpdate(byte[] data) {
        for (int sensor = 0; sensor < data.length - 1; sensor++) {
            long length = data[sensor];
            System.out.println("Sensor: " + sensor + ", " + length);
            switch (sensor) {
                case 0:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.LEFT_FRONT);
                    irLeftFrontTextField.setText("" + length);
                    break;
                case 1:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.RIGHT_FRONT);
                    irRightFrontTextField.setText("" + length);
                    break;
                case 2:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.LEFT_BACK);
                    irLeftBackTextField.setText("" + length);
                    break;
                case 3:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.RIGHT_BACK);
                    irRightBackTextField.setText("" + length);
                    break;
                case 4:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.FRONT);
                    irFrontTextField.setText("" + length);
                    break;
                case 5:
                    ((LowerPanel) lowerDrawArea).updatePoints(length, SENSOR.BACK);
                    irBackTextField.setText("" + length);
                    break;
                case 6:
                    ((UpperPanel) upperDrawArea).updatePoints(length, data[data.length - 1], SENSOR.VERTICAL);
                    irVerticalTextField.setText("" + length);
                    break;
                case 7:
                    ((UpperPanel) upperDrawArea).updatePoints(length, 20, SENSOR.ULTRA_SOUND);
                    ultraSoundTextField.setText("" + length);
                    break;
            }
        }
        System.out.println("");
    }

    private void keyUpdate() {
        int walk = 0;
        int strafe = 0;
        int rot = 0;

        if (keyUpPressed) {
            walk++;
        }
        if (keyDownPressed) {
            walk--;
        }
        if (keyRightPressed) {
            strafe++;
        }
        if (keyLeftPressed) {
            strafe--;
        }
        if (keyControlPressed) {
            rot++;
        }
        if (keyZeroPressed) {
            rot--;
        }

        int direction = (int) Math.toDegrees(Math.atan2(walk, strafe));

        int speed = 1;
        if(walk == 0 && strafe == 0){
            speed = 0;
        }
        // Send package with direction, speed and rot.
        //System.out.println(direction + ", " + speed + ", " + rot);
    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent evt) {
        if (evt.getID() == KeyEvent.KEY_PRESSED) {
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_UP:
                    if (!keyUpPressed) {
                        keyUpPressed = true;
                        keyUpdate();
                    }
                    break;
                case KeyEvent.VK_DOWN:
                    if (!keyDownPressed) {
                        keyDownPressed = true;
                        keyUpdate();
                    }
                    break;
                case KeyEvent.VK_LEFT:
                    if (!keyLeftPressed) {
                        keyLeftPressed = true;
                        keyUpdate();
                    }
                    break;
                case KeyEvent.VK_RIGHT:
                    if (!keyRightPressed) {
                        keyRightPressed = true;
                        keyUpdate();
                    }
                    break;
                case KeyEvent.VK_NUMPAD0:
                    if (!keyZeroPressed) {
                        keyZeroPressed = true;
                        keyUpdate();
                    }
                    break;
                case KeyEvent.VK_CONTROL:
                    if (!keyControlPressed) {
                        keyControlPressed = true;
                        keyUpdate();
                    }
                    break;
            }
        } else if (evt.getID() == KeyEvent.KEY_RELEASED) {
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_UP:
                    keyUpPressed = false;
                    keyUpdate();
                    break;
                case KeyEvent.VK_DOWN:
                    keyDownPressed = false;
                    keyUpdate();
                    break;
                case KeyEvent.VK_LEFT:
                    keyLeftPressed = false;
                    keyUpdate();
                    break;
                case KeyEvent.VK_RIGHT:
                    keyRightPressed = false;
                    keyUpdate();
                    break;
                case KeyEvent.VK_NUMPAD0:
                    keyZeroPressed = false;
                    keyUpdate();
                    break;
                case KeyEvent.VK_CONTROL:
                    keyControlPressed = false;
                    keyUpdate();
                    break;
            }
        } else {
            return false;
        }
        return true;
    }
}
