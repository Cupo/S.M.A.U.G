
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000111a  00800100  00000770  00000804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  0080121a  0080121a  0000191e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b33  00000000  00000000  000022b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000730  00000000  00000000  00003de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012b5  00000000  00000000  00004515  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000600  00000000  00000000  000057cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a6  00000000  00000000  00005dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012d7  00000000  00000000  00006372  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  00007649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	01 c3       	rjmp	.+1538   	; 0x654 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e1       	ldi	r17, 0x12	; 18
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e1       	ldi	r18, 0x18	; 24
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b2 e1       	ldi	r27, 0x12	; 18
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d0       	rcall	.+84     	; 0x118 <main>
  c4:	53 c3       	rjmp	.+1702   	; 0x76c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
  c8:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
  ca:	90 81       	ld	r25, Z
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	22 81       	ldd	r18, Z+2	; 0x02
  d2:	82 1b       	sub	r24, r18
};
  d4:	89 23       	and	r24, r25
  d6:	08 95       	ret

000000d8 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
  e2:	f2 df       	rcall	.-28     	; 0xc8 <FifoDataLength>
  e4:	28 81       	ld	r18, Y
  e6:	39 81       	ldd	r19, Y+1	; 0x01
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	82 17       	cp	r24, r18
  f0:	93 07       	cpc	r25, r19
  f2:	69 f0       	breq	.+26     	; 0x10e <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	9d 81       	ldd	r25, Y+5	; 0x05
  f8:	fe 01       	movw	r30, r28
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	28 23       	and	r18, r24
 104:	39 23       	and	r19, r25
 106:	3d 83       	std	Y+5, r19	; 0x05
 108:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <main>:
int current_instruction;
int my_adress;

int main(void)
{
	USART_init();
 118:	aa d1       	rcall	.+852    	; 0x46e <USART_init>
	sei();
 11a:	78 94       	sei
	my_adress = ST_ADRESS;
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 22 12 	sts	0x1222, r25
 124:	80 93 21 12 	sts	0x1221, r24
	init_TWI(my_adress);
 128:	94 d0       	rcall	.+296    	; 0x252 <init_TWI>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x1e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x28>
 140:	00 00       	nop
    while(1)
    {
		_delay_ms(500);
		//send_settings(C_ADRESS, 4);
        PORTA |= (1<<PORTA0);
 142:	10 9a       	sbi	0x02, 0	; 2
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x32>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x3c>
 154:	00 00       	nop
		_delay_ms(1000);
		//send_string(0x40, "I AM DEAD!");
		PORTA &= ~(1<<PORTA0);
 156:	10 98       	cbi	0x02, 0	; 2
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	83 ed       	ldi	r24, 0xD3	; 211
 15c:	90 e3       	ldi	r25, 0x30	; 48
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x46>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x50>
 168:	00 00       	nop
		_delay_ms(1000);
		USART_SendMessage("apa");
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	91 e1       	ldi	r25, 0x11	; 17
 16e:	51 d2       	rcall	.+1186   	; 0x612 <USART_SendMessage>
 170:	df cf       	rjmp	.-66     	; 0x130 <main+0x18>

00000172 <__vector_26>:
		
    }
}

ISR(TWI_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	0b b6       	in	r0, 0x3b	; 59
 17e:	0f 92       	push	r0
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	cli();
 198:	f8 94       	cli
	
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 19a:	80 91 b9 00 	lds	r24, 0x00B9
 19e:	88 7f       	andi	r24, 0xF8	; 248
 1a0:	80 36       	cpi	r24, 0x60	; 96
 1a2:	29 f0       	breq	.+10     	; 0x1ae <__vector_26+0x3c>
 1a4:	80 91 b9 00 	lds	r24, 0x00B9
 1a8:	88 7f       	andi	r24, 0xF8	; 248
 1aa:	88 36       	cpi	r24, 0x68	; 104
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <__vector_26+0x44>
	{
		instruction = true;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 20 12 	sts	0x1220, r24
 1b4:	35 c0       	rjmp	.+106    	; 0x220 <__vector_26+0xae>
	}
	else if(CONTROL == DATA_SLAW)
 1b6:	80 91 b9 00 	lds	r24, 0x00B9
 1ba:	88 7f       	andi	r24, 0xF8	; 248
 1bc:	80 38       	cpi	r24, 0x80	; 128
 1be:	c9 f4       	brne	.+50     	; 0x1f2 <__vector_26+0x80>
	{
		if(instruction)
 1c0:	80 91 20 12 	lds	r24, 0x1220
 1c4:	88 23       	and	r24, r24
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <__vector_26+0x66>
		{
			current_instruction = get_data();
 1c8:	81 d0       	rcall	.+258    	; 0x2cc <get_data>
 1ca:	90 93 1f 12 	sts	0x121F, r25
 1ce:	80 93 1e 12 	sts	0x121E, r24
			instruction = false;
 1d2:	10 92 20 12 	sts	0x1220, r1
 1d6:	24 c0       	rjmp	.+72     	; 0x220 <__vector_26+0xae>
		}
		else
		{
			switch(current_instruction)
 1d8:	80 91 1e 12 	lds	r24, 0x121E
 1dc:	90 91 1f 12 	lds	r25, 0x121F
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	19 f0       	breq	.+6      	; 0x1ea <__vector_26+0x78>
 1e4:	49 97       	sbiw	r24, 0x19	; 25
 1e6:	e1 f4       	brne	.+56     	; 0x220 <__vector_26+0xae>
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__vector_26+0x7c>
			{
				case(I_COMMAND):
				{
					get_command_from_bus();
 1ea:	e6 d0       	rcall	.+460    	; 0x3b8 <get_command_from_bus>
					break;
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <__vector_26+0xae>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 1ee:	ca d0       	rcall	.+404    	; 0x384 <get_char_from_bus>
					break;
 1f0:	17 c0       	rjmp	.+46     	; 0x220 <__vector_26+0xae>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 1f2:	80 91 b9 00 	lds	r24, 0x00B9
 1f6:	88 7f       	andi	r24, 0xF8	; 248
 1f8:	80 39       	cpi	r24, 0x90	; 144
 1fa:	11 f4       	brne	.+4      	; 0x200 <__vector_26+0x8e>
	{
		get_sensor_from_bus();
 1fc:	f6 d0       	rcall	.+492    	; 0x3ea <get_sensor_from_bus>
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <__vector_26+0xae>
	}
	else if (CONTROL == STOP)
 200:	80 91 b9 00 	lds	r24, 0x00B9
 204:	88 7f       	andi	r24, 0xF8	; 248
 206:	80 3a       	cpi	r24, 0xA0	; 160
 208:	59 f4       	brne	.+22     	; 0x220 <__vector_26+0xae>
	{
		switch(current_instruction)
 20a:	80 91 1e 12 	lds	r24, 0x121E
 20e:	90 91 1f 12 	lds	r25, 0x121F
 212:	89 2b       	or	r24, r25
 214:	21 f4       	brne	.+8      	; 0x21e <__vector_26+0xac>
		{
			case(I_COMMAND):
			{
				PORTA ^= (1<<PORTA1);
 216:	92 b1       	in	r25, 0x02	; 2
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	89 27       	eor	r24, r25
 21c:	82 b9       	out	0x02, r24	; 2
			{
				//get_char(1);
				break;
			}
		}
		stop_twi();
 21e:	14 d1       	rcall	.+552    	; 0x448 <stop_twi>
	}
	reset_TWI();
 220:	20 d1       	rcall	.+576    	; 0x462 <reset_TWI>
	sei();
 222:	78 94       	sei
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <set_twi_reciever_enable>:
 24a:	85 e4       	ldi	r24, 0x45	; 69
 24c:	80 93 bc 00 	sts	0x00BC, r24
 250:	08 95       	ret

00000252 <init_TWI>:
 252:	90 93 22 12 	sts	0x1222, r25
 256:	80 93 21 12 	sts	0x1221, r24
 25a:	80 34       	cpi	r24, 0x40	; 64
 25c:	91 05       	cpc	r25, r1
 25e:	81 f0       	breq	.+32     	; 0x280 <init_TWI+0x2e>
 260:	80 38       	cpi	r24, 0x80	; 128
 262:	91 05       	cpc	r25, r1
 264:	19 f0       	breq	.+6      	; 0x26c <init_TWI+0x1a>
 266:	80 97       	sbiw	r24, 0x20	; 32
 268:	d1 f4       	brne	.+52     	; 0x29e <init_TWI+0x4c>
 26a:	12 c0       	rjmp	.+36     	; 0x290 <init_TWI+0x3e>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	88 b9       	out	0x08, r24	; 8
 270:	ec df       	rcall	.-40     	; 0x24a <set_twi_reciever_enable>
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	80 93 b8 00 	sts	0x00B8, r24
 278:	81 e8       	ldi	r24, 0x81	; 129
 27a:	80 93 ba 00 	sts	0x00BA, r24
 27e:	08 95       	ret
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	80 93 b8 00 	sts	0x00B8, r24
 286:	e1 df       	rcall	.-62     	; 0x24a <set_twi_reciever_enable>
 288:	80 e4       	ldi	r24, 0x40	; 64
 28a:	80 93 ba 00 	sts	0x00BA, r24
 28e:	08 95       	ret
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	80 93 b8 00 	sts	0x00B8, r24
 296:	d9 df       	rcall	.-78     	; 0x24a <set_twi_reciever_enable>
 298:	81 e2       	ldi	r24, 0x21	; 33
 29a:	80 93 ba 00 	sts	0x00BA, r24
 29e:	08 95       	ret

000002a0 <clear_int>:
 2a0:	81 ec       	ldi	r24, 0xC1	; 193
 2a2:	80 93 bc 00 	sts	0x00BC, r24
 2a6:	08 95       	ret

000002a8 <start_bus>:
 2a8:	84 ea       	ldi	r24, 0xA4	; 164
 2aa:	80 93 bc 00 	sts	0x00BC, r24
 2ae:	08 95       	ret

000002b0 <stop_bus>:
 2b0:	85 ed       	ldi	r24, 0xD5	; 213
 2b2:	80 93 bc 00 	sts	0x00BC, r24
 2b6:	08 95       	ret

000002b8 <Error>:
 2b8:	80 91 b9 00 	lds	r24, 0x00B9
 2bc:	88 7f       	andi	r24, 0xF8	; 248
 2be:	88 33       	cpi	r24, 0x38	; 56
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <Error+0xc>
 2c2:	f6 cf       	rjmp	.-20     	; 0x2b0 <stop_bus>
 2c4:	ed cf       	rjmp	.-38     	; 0x2a0 <clear_int>

000002c6 <set_data>:
 2c6:	80 93 bb 00 	sts	0x00BB, r24
 2ca:	08 95       	ret

000002cc <get_data>:
 2cc:	80 91 bb 00 	lds	r24, 0x00BB
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 95       	ret

000002d4 <send_bus>:
 2d4:	84 e8       	ldi	r24, 0x84	; 132
 2d6:	80 93 bc 00 	sts	0x00BC, r24
 2da:	08 95       	ret

000002dc <wait_for_bus>:
 2dc:	ec eb       	ldi	r30, 0xBC	; 188
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	88 23       	and	r24, r24
 2e4:	ec f7       	brge	.-6      	; 0x2e0 <wait_for_bus+0x4>
 2e6:	08 95       	ret

000002e8 <send_string>:
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ec 01       	movw	r28, r24
 2f6:	e6 2e       	mov	r14, r22
 2f8:	f7 2e       	mov	r15, r23
 2fa:	d6 df       	rcall	.-84     	; 0x2a8 <start_bus>
 2fc:	ef df       	rcall	.-34     	; 0x2dc <wait_for_bus>
 2fe:	80 91 b9 00 	lds	r24, 0x00B9
 302:	88 7f       	andi	r24, 0xF8	; 248
 304:	88 30       	cpi	r24, 0x08	; 8
 306:	19 f0       	breq	.+6      	; 0x30e <send_string+0x26>
 308:	d7 df       	rcall	.-82     	; 0x2b8 <Error>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	34 c0       	rjmp	.+104    	; 0x376 <send_string+0x8e>
 30e:	ce 01       	movw	r24, r28
 310:	da df       	rcall	.-76     	; 0x2c6 <set_data>
 312:	e0 df       	rcall	.-64     	; 0x2d4 <send_bus>
 314:	e3 df       	rcall	.-58     	; 0x2dc <wait_for_bus>
 316:	80 91 b9 00 	lds	r24, 0x00B9
 31a:	88 7f       	andi	r24, 0xF8	; 248
 31c:	88 31       	cpi	r24, 0x18	; 24
 31e:	19 f0       	breq	.+6      	; 0x326 <send_string+0x3e>
 320:	cb df       	rcall	.-106    	; 0x2b8 <Error>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	28 c0       	rjmp	.+80     	; 0x376 <send_string+0x8e>
 326:	89 e1       	ldi	r24, 0x19	; 25
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	cd df       	rcall	.-102    	; 0x2c6 <set_data>
 32c:	d3 df       	rcall	.-90     	; 0x2d4 <send_bus>
 32e:	d6 df       	rcall	.-84     	; 0x2dc <wait_for_bus>
 330:	80 91 b9 00 	lds	r24, 0x00B9
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	88 32       	cpi	r24, 0x28	; 40
 338:	29 f4       	brne	.+10     	; 0x344 <send_string+0x5c>
 33a:	0e 2d       	mov	r16, r14
 33c:	1f 2d       	mov	r17, r15
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	0b c0       	rjmp	.+22     	; 0x35a <send_string+0x72>
 344:	b9 df       	rcall	.-142    	; 0x2b8 <Error>
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	16 c0       	rjmp	.+44     	; 0x376 <send_string+0x8e>
 34a:	f8 01       	movw	r30, r16
 34c:	81 91       	ld	r24, Z+
 34e:	8f 01       	movw	r16, r30
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	b9 df       	rcall	.-142    	; 0x2c6 <set_data>
 354:	bf df       	rcall	.-130    	; 0x2d4 <send_bus>
 356:	c2 df       	rcall	.-124    	; 0x2dc <wait_for_bus>
 358:	21 96       	adiw	r28, 0x01	; 1
 35a:	ee 2d       	mov	r30, r14
 35c:	ff 2d       	mov	r31, r15
 35e:	df 01       	movw	r26, r30
 360:	0d 90       	ld	r0, X+
 362:	00 20       	and	r0, r0
 364:	e9 f7       	brne	.-6      	; 0x360 <send_string+0x78>
 366:	11 97       	sbiw	r26, 0x01	; 1
 368:	ae 1b       	sub	r26, r30
 36a:	bf 0b       	sbc	r27, r31
 36c:	ca 17       	cp	r28, r26
 36e:	db 07       	cpc	r29, r27
 370:	60 f3       	brcs	.-40     	; 0x34a <send_string+0x62>
 372:	9e df       	rcall	.-196    	; 0x2b0 <stop_bus>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	08 95       	ret

00000384 <get_char_from_bus>:
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	c0 91 3c 13 	lds	r28, 0x133C
 38c:	d0 91 3d 13 	lds	r29, 0x133D
 390:	9d df       	rcall	.-198    	; 0x2cc <get_data>
 392:	c3 5d       	subi	r28, 0xD3	; 211
 394:	dd 4e       	sbci	r29, 0xED	; 237
 396:	88 83       	st	Y, r24
 398:	80 91 3c 13 	lds	r24, 0x133C
 39c:	90 91 3d 13 	lds	r25, 0x133D
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	90 93 3d 13 	sts	0x133D, r25
 3a6:	80 93 3c 13 	sts	0x133C, r24
 3aa:	90 93 24 12 	sts	0x1224, r25
 3ae:	80 93 23 12 	sts	0x1223, r24
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <get_command_from_bus>:
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	c0 91 2c 13 	lds	r28, 0x132C
 3c0:	d0 91 2d 13 	lds	r29, 0x132D
 3c4:	83 df       	rcall	.-250    	; 0x2cc <get_data>
 3c6:	cc 0f       	add	r28, r28
 3c8:	dd 1f       	adc	r29, r29
 3ca:	c9 5d       	subi	r28, 0xD9	; 217
 3cc:	dd 4e       	sbci	r29, 0xED	; 237
 3ce:	99 83       	std	Y+1, r25	; 0x01
 3d0:	88 83       	st	Y, r24
 3d2:	80 91 2c 13 	lds	r24, 0x132C
 3d6:	90 91 2d 13 	lds	r25, 0x132D
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	90 93 2d 13 	sts	0x132D, r25
 3e0:	80 93 2c 13 	sts	0x132C, r24
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <get_sensor_from_bus>:
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	c0 91 42 13 	lds	r28, 0x1342
 3f2:	d0 91 43 13 	lds	r29, 0x1343
 3f6:	c7 30       	cpi	r28, 0x07	; 7
 3f8:	d1 05       	cpc	r29, r1
 3fa:	99 f4       	brne	.+38     	; 0x422 <get_sensor_from_bus+0x38>
 3fc:	ee e2       	ldi	r30, 0x2E	; 46
 3fe:	f3 e1       	ldi	r31, 0x13	; 19
 400:	a4 e4       	ldi	r26, 0x44	; 68
 402:	b3 e1       	ldi	r27, 0x13	; 19
 404:	2c e3       	ldi	r18, 0x3C	; 60
 406:	33 e1       	ldi	r19, 0x13	; 19
 408:	81 91       	ld	r24, Z+
 40a:	91 91       	ld	r25, Z+
 40c:	8d 93       	st	X+, r24
 40e:	9d 93       	st	X+, r25
 410:	e2 17       	cp	r30, r18
 412:	f3 07       	cpc	r31, r19
 414:	c9 f7       	brne	.-14     	; 0x408 <get_sensor_from_bus+0x1e>
 416:	5a df       	rcall	.-332    	; 0x2cc <get_data>
 418:	90 93 3f 13 	sts	0x133F, r25
 41c:	80 93 3e 13 	sts	0x133E, r24
 420:	10 c0       	rjmp	.+32     	; 0x442 <get_sensor_from_bus+0x58>
 422:	54 df       	rcall	.-344    	; 0x2cc <get_data>
 424:	cc 0f       	add	r28, r28
 426:	dd 1f       	adc	r29, r29
 428:	c2 5d       	subi	r28, 0xD2	; 210
 42a:	dc 4e       	sbci	r29, 0xEC	; 236
 42c:	99 83       	std	Y+1, r25	; 0x01
 42e:	88 83       	st	Y, r24
 430:	80 91 42 13 	lds	r24, 0x1342
 434:	90 91 43 13 	lds	r25, 0x1343
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	90 93 43 13 	sts	0x1343, r25
 43e:	80 93 42 13 	sts	0x1342, r24
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <stop_twi>:
 448:	10 92 2d 13 	sts	0x132D, r1
 44c:	10 92 2c 13 	sts	0x132C, r1
 450:	10 92 43 13 	sts	0x1343, r1
 454:	10 92 42 13 	sts	0x1342, r1
 458:	10 92 3d 13 	sts	0x133D, r1
 45c:	10 92 3c 13 	sts	0x133C, r1
 460:	08 95       	ret

00000462 <reset_TWI>:
 462:	ec eb       	ldi	r30, 0xBC	; 188
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	80 6c       	ori	r24, 0xC0	; 192
 46a:	80 83       	st	Z, r24
 46c:	08 95       	ret

0000046e <USART_init>:
{
	for(int i = 0; i < gRxBuffer[1]; i++)
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
 46e:	10 92 c5 00 	sts	0x00C5, r1
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	80 93 c4 00 	sts	0x00C4, r24
 478:	88 e9       	ldi	r24, 0x98	; 152
 47a:	80 93 c1 00 	sts	0x00C1, r24
 47e:	86 e0       	ldi	r24, 0x06	; 6
 480:	80 93 c2 00 	sts	0x00C2, r24
 484:	08 95       	ret

00000486 <USART_CheckTxReady>:
 486:	80 91 c0 00 	lds	r24, 0x00C0
 48a:	80 72       	andi	r24, 0x20	; 32
 48c:	08 95       	ret

0000048e <USART_WriteByte>:
 48e:	cf 93       	push	r28
 490:	c8 2f       	mov	r28, r24
 492:	f9 df       	rcall	.-14     	; 0x486 <USART_CheckTxReady>
 494:	88 23       	and	r24, r24
 496:	e9 f3       	breq	.-6      	; 0x492 <USART_WriteByte+0x4>
 498:	c0 93 c6 00 	sts	0x00C6, r28
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <USART_crc16>:
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	66 23       	and	r22, r22
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <USART_crc16+0x16>
 4b4:	3e c0       	rjmp	.+124    	; 0x532 <USART_crc16+0x92>
 4b6:	06 2f       	mov	r16, r22
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	4f ef       	ldi	r20, 0xFF	; 255
 4bc:	5f ef       	ldi	r21, 0xFF	; 255
 4be:	ee ef       	ldi	r30, 0xFE	; 254
 4c0:	ff ef       	ldi	r31, 0xFF	; 255
 4c2:	c6 2e       	mov	r12, r22
 4c4:	d1 2c       	mov	r13, r1
 4c6:	e8 2e       	mov	r14, r24
 4c8:	f1 2c       	mov	r15, r1
 4ca:	c8 e0       	ldi	r28, 0x08	; 8
 4cc:	d0 e0       	ldi	r29, 0x00	; 0
 4ce:	ee 3f       	cpi	r30, 0xFE	; 254
 4d0:	6f ef       	ldi	r22, 0xFF	; 255
 4d2:	f6 07       	cpc	r31, r22
 4d4:	19 f4       	brne	.+6      	; 0x4dc <USART_crc16+0x3c>
 4d6:	8e 2d       	mov	r24, r14
 4d8:	9f 2d       	mov	r25, r15
 4da:	30 c0       	rjmp	.+96     	; 0x53c <USART_crc16+0x9c>
 4dc:	ef 3f       	cpi	r30, 0xFF	; 255
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	f8 07       	cpc	r31, r24
 4e2:	19 f4       	brne	.+6      	; 0x4ea <USART_crc16+0x4a>
 4e4:	8c 2d       	mov	r24, r12
 4e6:	9d 2d       	mov	r25, r13
 4e8:	29 c0       	rjmp	.+82     	; 0x53c <USART_crc16+0x9c>
 4ea:	df 01       	movw	r26, r30
 4ec:	a9 5a       	subi	r26, 0xA9	; 169
 4ee:	ba 4e       	sbci	r27, 0xEA	; 234
 4f0:	8c 91       	ld	r24, X
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	23 c0       	rjmp	.+70     	; 0x53c <USART_crc16+0x9c>
 4f6:	ba 01       	movw	r22, r20
 4f8:	68 27       	eor	r22, r24
 4fa:	79 27       	eor	r23, r25
 4fc:	60 ff       	sbrs	r22, 0
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <USART_crc16+0x6e>
 500:	56 95       	lsr	r21
 502:	47 95       	ror	r20
 504:	68 e0       	ldi	r22, 0x08	; 8
 506:	46 27       	eor	r20, r22
 508:	64 e8       	ldi	r22, 0x84	; 132
 50a:	56 27       	eor	r21, r22
 50c:	02 c0       	rjmp	.+4      	; 0x512 <USART_crc16+0x72>
 50e:	56 95       	lsr	r21
 510:	47 95       	ror	r20
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	21 50       	subi	r18, 0x01	; 1
 518:	31 09       	sbc	r19, r1
 51a:	69 f7       	brne	.-38     	; 0x4f6 <USART_crc16+0x56>
 51c:	31 96       	adiw	r30, 0x01	; 1
 51e:	e0 17       	cp	r30, r16
 520:	f1 07       	cpc	r31, r17
 522:	a9 f6       	brne	.-86     	; 0x4ce <USART_crc16+0x2e>
 524:	9a 01       	movw	r18, r20
 526:	20 95       	com	r18
 528:	30 95       	com	r19
 52a:	32 27       	eor	r19, r18
 52c:	23 27       	eor	r18, r19
 52e:	32 27       	eor	r19, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <USART_crc16+0x96>
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	82 2f       	mov	r24, r18
 538:	93 2f       	mov	r25, r19
 53a:	02 c0       	rjmp	.+4      	; 0x540 <USART_crc16+0xa0>
 53c:	9e 01       	movw	r18, r28
 53e:	db cf       	rjmp	.-74     	; 0x4f6 <USART_crc16+0x56>
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <USART_SendPacket>:
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	9e e7       	ldi	r25, 0x7E	; 126
 55c:	90 93 56 16 	sts	0x1656, r25
 560:	80 93 57 16 	sts	0x1657, r24
 564:	60 93 58 16 	sts	0x1658, r22
 568:	26 2f       	mov	r18, r22
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	12 16       	cp	r1, r18
 56e:	13 06       	cpc	r1, r19
 570:	4c f5       	brge	.+82     	; 0x5c4 <USART_SendPacket+0x72>
 572:	e7 e5       	ldi	r30, 0x57	; 87
 574:	f5 e1       	ldi	r31, 0x15	; 21
 576:	03 e0       	ldi	r16, 0x03	; 3
 578:	10 e0       	ldi	r17, 0x00	; 0
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	7d e7       	ldi	r23, 0x7D	; 125
 580:	50 e2       	ldi	r21, 0x20	; 32
 582:	90 81       	ld	r25, Z
 584:	49 2f       	mov	r20, r25
 586:	4d 57       	subi	r20, 0x7D	; 125
 588:	42 30       	cpi	r20, 0x02	; 2
 58a:	80 f4       	brcc	.+32     	; 0x5ac <USART_SendPacket+0x5a>
 58c:	d8 01       	movw	r26, r16
 58e:	aa 5a       	subi	r26, 0xAA	; 170
 590:	b9 4e       	sbci	r27, 0xE9	; 233
 592:	ac 0f       	add	r26, r28
 594:	bd 1f       	adc	r27, r29
 596:	7c 93       	st	X, r23
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	d8 01       	movw	r26, r16
 59e:	aa 5a       	subi	r26, 0xAA	; 170
 5a0:	b9 4e       	sbci	r27, 0xE9	; 233
 5a2:	ac 0f       	add	r26, r28
 5a4:	bd 1f       	adc	r27, r29
 5a6:	95 27       	eor	r25, r21
 5a8:	9c 93       	st	X, r25
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <USART_SendPacket+0x66>
 5ac:	d8 01       	movw	r26, r16
 5ae:	aa 5a       	subi	r26, 0xAA	; 170
 5b0:	b9 4e       	sbci	r27, 0xE9	; 233
 5b2:	ac 0f       	add	r26, r28
 5b4:	bd 1f       	adc	r27, r29
 5b6:	9c 93       	st	X, r25
 5b8:	21 96       	adiw	r28, 0x01	; 1
 5ba:	31 96       	adiw	r30, 0x01	; 1
 5bc:	c2 17       	cp	r28, r18
 5be:	d3 07       	cpc	r29, r19
 5c0:	01 f7       	brne	.-64     	; 0x582 <USART_SendPacket+0x30>
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <USART_SendPacket+0x7a>
 5c4:	03 e0       	ldi	r16, 0x03	; 3
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	c0 e0       	ldi	r28, 0x00	; 0
 5ca:	d0 e0       	ldi	r29, 0x00	; 0
 5cc:	69 df       	rcall	.-302    	; 0x4a0 <USART_crc16>
 5ce:	f8 01       	movw	r30, r16
 5d0:	ea 5a       	subi	r30, 0xAA	; 170
 5d2:	f9 4e       	sbci	r31, 0xE9	; 233
 5d4:	ec 0f       	add	r30, r28
 5d6:	fd 1f       	adc	r31, r29
 5d8:	90 83       	st	Z, r25
 5da:	81 83       	std	Z+1, r24	; 0x01
 5dc:	22 96       	adiw	r28, 0x02	; 2
 5de:	0c 0f       	add	r16, r28
 5e0:	1d 1f       	adc	r17, r29
 5e2:	f8 01       	movw	r30, r16
 5e4:	ea 5a       	subi	r30, 0xAA	; 170
 5e6:	f9 4e       	sbci	r31, 0xE9	; 233
 5e8:	8e e7       	ldi	r24, 0x7E	; 126
 5ea:	80 83       	st	Z, r24
 5ec:	c8 01       	movw	r24, r16
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	18 16       	cp	r1, r24
 5f2:	19 06       	cpc	r1, r25
 5f4:	4c f4       	brge	.+18     	; 0x608 <USART_SendPacket+0xb6>
 5f6:	c6 e5       	ldi	r28, 0x56	; 86
 5f8:	d6 e1       	ldi	r29, 0x16	; 22
 5fa:	09 5a       	subi	r16, 0xA9	; 169
 5fc:	19 4e       	sbci	r17, 0xE9	; 233
 5fe:	89 91       	ld	r24, Y+
 600:	46 df       	rcall	.-372    	; 0x48e <USART_WriteByte>
 602:	c0 17       	cp	r28, r16
 604:	d1 07       	cpc	r29, r17
 606:	d9 f7       	brne	.-10     	; 0x5fe <USART_SendPacket+0xac>
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	08 95       	ret

00000612 <USART_SendMessage>:
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	c8 2f       	mov	r28, r24
 618:	d9 2f       	mov	r29, r25
 61a:	47 e5       	ldi	r20, 0x57	; 87
 61c:	55 e1       	ldi	r21, 0x15	; 21
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	06 c0       	rjmp	.+12     	; 0x630 <USART_SendMessage+0x1e>
 624:	69 91       	ld	r22, Y+
 626:	fa 01       	movw	r30, r20
 628:	61 93       	st	Z+, r22
 62a:	af 01       	movw	r20, r30
 62c:	2f 5f       	subi	r18, 0xFF	; 255
 62e:	3f 4f       	sbci	r19, 0xFF	; 255
 630:	e8 2f       	mov	r30, r24
 632:	f9 2f       	mov	r31, r25
 634:	df 01       	movw	r26, r30
 636:	0d 90       	ld	r0, X+
 638:	00 20       	and	r0, r0
 63a:	e9 f7       	brne	.-6      	; 0x636 <USART_SendMessage+0x24>
 63c:	11 97       	sbiw	r26, 0x01	; 1
 63e:	bd 01       	movw	r22, r26
 640:	6e 1b       	sub	r22, r30
 642:	7f 0b       	sbc	r23, r31
 644:	26 17       	cp	r18, r22
 646:	37 07       	cpc	r19, r23
 648:	68 f3       	brcs	.-38     	; 0x624 <USART_SendMessage+0x12>
 64a:	8d e4       	ldi	r24, 0x4D	; 77
 64c:	82 df       	rcall	.-252    	; 0x552 <USART_SendPacket>
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <__vector_20>:
}


ISR (USART0_RX_vect)
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	0b b6       	in	r0, 0x3b	; 59
 660:	0f 92       	push	r0
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	2f 93       	push	r18
 66c:	3f 93       	push	r19
 66e:	4f 93       	push	r20
 670:	5f 93       	push	r21
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
 686:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
 68a:	2e 37       	cpi	r18, 0x7E	; 126
 68c:	09 f0       	breq	.+2      	; 0x690 <__vector_20+0x3c>
 68e:	3f c0       	rjmp	.+126    	; 0x70e <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
 690:	80 91 1c 12 	lds	r24, 0x121C
 694:	90 91 1d 12 	lds	r25, 0x121D
 698:	84 30       	cpi	r24, 0x04	; 4
 69a:	91 05       	cpc	r25, r1
 69c:	40 f4       	brcc	.+16     	; 0x6ae <__vector_20+0x5a>
 69e:	20 91 53 13 	lds	r18, 0x1353
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	2c 5f       	subi	r18, 0xFC	; 252
 6a6:	3f 4f       	sbci	r19, 0xFF	; 255
 6a8:	82 17       	cp	r24, r18
 6aa:	93 07       	cpc	r25, r19
 6ac:	59 f5       	brne	.+86     	; 0x704 <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
 6ae:	80 91 1a 12 	lds	r24, 0x121A
 6b2:	90 91 1b 12 	lds	r25, 0x121B
 6b6:	89 2b       	or	r24, r25
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
 6ba:	10 92 1b 12 	sts	0x121B, r1
 6be:	10 92 1a 12 	sts	0x121A, r1
 6c2:	02 e5       	ldi	r16, 0x52	; 82
 6c4:	13 e1       	ldi	r17, 0x13	; 19
			}
			
			//USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 6c6:	c0 e0       	ldi	r28, 0x00	; 0
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	0f 2e       	mov	r0, r31
 6cc:	f3 e5       	ldi	r31, 0x53	; 83
 6ce:	ef 2e       	mov	r14, r31
 6d0:	f3 e1       	ldi	r31, 0x13	; 19
 6d2:	ff 2e       	mov	r15, r31
 6d4:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
 6d6:	f8 01       	movw	r30, r16
 6d8:	61 91       	ld	r22, Z+
 6da:	8f 01       	movw	r16, r30
 6dc:	80 91 00 01 	lds	r24, 0x0100
 6e0:	90 91 01 01 	lds	r25, 0x0101
 6e4:	f9 dc       	rcall	.-1550   	; 0xd8 <FifoWrite>
 6e6:	88 23       	and	r24, r24
 6e8:	29 f0       	breq	.+10     	; 0x6f4 <__vector_20+0xa0>
				{
					send_string(S_ADRESS,"U_FIFO-full");
 6ea:	6d e0       	ldi	r22, 0x0D	; 13
 6ec:	72 e1       	ldi	r23, 0x12	; 18
 6ee:	80 e4       	ldi	r24, 0x40	; 64
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	fa dd       	rcall	.-1036   	; 0x2e8 <send_string>
			}
			
			//USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 6f4:	21 96       	adiw	r28, 0x01	; 1
 6f6:	f7 01       	movw	r30, r14
 6f8:	80 81       	ld	r24, Z
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 96       	adiw	r24, 0x02	; 2
 6fe:	c8 17       	cp	r28, r24
 700:	d9 07       	cpc	r29, r25
 702:	4c f3       	brlt	.-46     	; 0x6d6 <__vector_20+0x82>
					send_string(S_ADRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
 704:	10 92 1d 12 	sts	0x121D, r1
 708:	10 92 1c 12 	sts	0x121C, r1
 70c:	16 c0       	rjmp	.+44     	; 0x73a <__vector_20+0xe6>
		
	}else if(data == 0x7d)
 70e:	2d 37       	cpi	r18, 0x7D	; 125
 710:	39 f4       	brne	.+14     	; 0x720 <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	90 93 1b 12 	sts	0x121B, r25
 71a:	80 93 1a 12 	sts	0x121A, r24
 71e:	0d c0       	rjmp	.+26     	; 0x73a <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
 720:	80 91 1c 12 	lds	r24, 0x121C
 724:	90 91 1d 12 	lds	r25, 0x121D
 728:	fc 01       	movw	r30, r24
 72a:	ee 5a       	subi	r30, 0xAE	; 174
 72c:	fc 4e       	sbci	r31, 0xEC	; 236
 72e:	20 83       	st	Z, r18
		++gRxBufferIndex;
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	90 93 1d 12 	sts	0x121D, r25
 736:	80 93 1c 12 	sts	0x121C, r24
	}
	
	
}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	ff 90       	pop	r15
 75c:	ef 90       	pop	r14
 75e:	0f 90       	pop	r0
 760:	0b be       	out	0x3b, r0	; 59
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
