
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  00800100  00800100  000003ac  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fd8  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000382  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bec  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003bf  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008db  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00003bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	4b c0       	rjmp	.+150    	; 0x100 <__vector_26>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 33       	cpi	r26, 0x34	; 52
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	34 c1       	rjmp	.+616    	; 0x314 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
int current_instruction;
int my_adress;

int main(void)
{
	sei();
  ae:	78 94       	sei
	my_adress = ST_ADRESS;
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 04 01 	sts	0x0104, r25
  b8:	80 93 03 01 	sts	0x0103, r24
	init_TWI(my_adress);
  bc:	8b d0       	rcall	.+278    	; 0x1d4 <init_TWI>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
  be:	81 b1       	in	r24, 0x01	; 1
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	98 e1       	ldi	r25, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x26>
  d4:	00 00       	nop
    while(1)
    {
		_delay_ms(500);
		//send_settings(C_ADRESS, 4);
        PORTA |= (1<<PORTA0);
  d6:	10 9a       	sbi	0x02, 0	; 2
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	83 ed       	ldi	r24, 0xD3	; 211
  dc:	90 e3       	ldi	r25, 0x30	; 48
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x30>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x3a>
  e8:	00 00       	nop
		_delay_ms(1000);
		//send_string(0x40, "I AM DEAD!");
		PORTA &= ~(1<<PORTA0);
  ea:	10 98       	cbi	0x02, 0	; 2
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x44>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x4e>
  fc:	00 00       	nop
  fe:	e2 cf       	rjmp	.-60     	; 0xc4 <main+0x16>

00000100 <__vector_26>:
		_delay_ms(1000);
    }
}

ISR(TWI_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0b b6       	in	r0, 0x3b	; 59
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	cli();
 126:	f8 94       	cli
	PORTA ^= (1<<PORTA1);
 128:	92 b1       	in	r25, 0x02	; 2
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	89 27       	eor	r24, r25
 12e:	82 b9       	out	0x02, r24	; 2
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 130:	80 91 b9 00 	lds	r24, 0x00B9
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	80 36       	cpi	r24, 0x60	; 96
 138:	29 f0       	breq	.+10     	; 0x144 <__vector_26+0x44>
 13a:	80 91 b9 00 	lds	r24, 0x00B9
 13e:	88 7f       	andi	r24, 0xF8	; 248
 140:	88 36       	cpi	r24, 0x68	; 104
 142:	21 f4       	brne	.+8      	; 0x14c <__vector_26+0x4c>
	{
		instruction = true;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 02 01 	sts	0x0102, r24
 14a:	2b c0       	rjmp	.+86     	; 0x1a2 <__vector_26+0xa2>
	}
	else if(CONTROL == DATA_SLAW)
 14c:	80 91 b9 00 	lds	r24, 0x00B9
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	80 38       	cpi	r24, 0x80	; 128
 154:	c9 f4       	brne	.+50     	; 0x188 <__vector_26+0x88>
	{
		if(instruction)
 156:	80 91 02 01 	lds	r24, 0x0102
 15a:	88 23       	and	r24, r24
 15c:	41 f0       	breq	.+16     	; 0x16e <__vector_26+0x6e>
		{
			current_instruction = get_data();
 15e:	61 d0       	rcall	.+194    	; 0x222 <get_data>
 160:	90 93 01 01 	sts	0x0101, r25
 164:	80 93 00 01 	sts	0x0100, r24
			instruction = false;
 168:	10 92 02 01 	sts	0x0102, r1
 16c:	1a c0       	rjmp	.+52     	; 0x1a2 <__vector_26+0xa2>
		}
		else
		{
			switch(current_instruction)
 16e:	80 91 00 01 	lds	r24, 0x0100
 172:	90 91 01 01 	lds	r25, 0x0101
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	19 f0       	breq	.+6      	; 0x180 <__vector_26+0x80>
 17a:	49 97       	sbiw	r24, 0x19	; 25
 17c:	91 f4       	brne	.+36     	; 0x1a2 <__vector_26+0xa2>
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__vector_26+0x84>
			{
				case(I_COMMAND):
				{
					get_command_from_bus();
 180:	6e d0       	rcall	.+220    	; 0x25e <get_command_from_bus>
					break;
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <__vector_26+0xa2>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 184:	52 d0       	rcall	.+164    	; 0x22a <get_char_from_bus>
					break;
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <__vector_26+0xa2>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 188:	80 91 b9 00 	lds	r24, 0x00B9
 18c:	88 7f       	andi	r24, 0xF8	; 248
 18e:	80 39       	cpi	r24, 0x90	; 144
 190:	11 f4       	brne	.+4      	; 0x196 <__vector_26+0x96>
	{
		get_sensor_from_bus();
 192:	7e d0       	rcall	.+252    	; 0x290 <get_sensor_from_bus>
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <__vector_26+0xa2>
	}
	else if (CONTROL == STOP)
 196:	80 91 b9 00 	lds	r24, 0x00B9
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	80 3a       	cpi	r24, 0xA0	; 160
 19e:	09 f4       	brne	.+2      	; 0x1a2 <__vector_26+0xa2>
			{
				//get_char(1);
				break;
			}
		}
		stop_twi();
 1a0:	a6 d0       	rcall	.+332    	; 0x2ee <stop_twi>
	}
	reset_TWI();
 1a2:	b2 d0       	rcall	.+356    	; 0x308 <reset_TWI>
	sei();
 1a4:	78 94       	sei
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0b be       	out	0x3b, r0	; 59
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <set_twi_reciever_enable>:
 1cc:	85 e4       	ldi	r24, 0x45	; 69
 1ce:	80 93 bc 00 	sts	0x00BC, r24
 1d2:	08 95       	ret

000001d4 <init_TWI>:
 1d4:	90 93 04 01 	sts	0x0104, r25
 1d8:	80 93 03 01 	sts	0x0103, r24
 1dc:	80 34       	cpi	r24, 0x40	; 64
 1de:	91 05       	cpc	r25, r1
 1e0:	81 f0       	breq	.+32     	; 0x202 <init_TWI+0x2e>
 1e2:	80 38       	cpi	r24, 0x80	; 128
 1e4:	91 05       	cpc	r25, r1
 1e6:	19 f0       	breq	.+6      	; 0x1ee <init_TWI+0x1a>
 1e8:	80 97       	sbiw	r24, 0x20	; 32
 1ea:	d1 f4       	brne	.+52     	; 0x220 <init_TWI+0x4c>
 1ec:	12 c0       	rjmp	.+36     	; 0x212 <init_TWI+0x3e>
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	88 b9       	out	0x08, r24	; 8
 1f2:	ec df       	rcall	.-40     	; 0x1cc <set_twi_reciever_enable>
 1f4:	8f e3       	ldi	r24, 0x3F	; 63
 1f6:	80 93 b8 00 	sts	0x00B8, r24
 1fa:	81 e8       	ldi	r24, 0x81	; 129
 1fc:	80 93 ba 00 	sts	0x00BA, r24
 200:	08 95       	ret
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	80 93 b8 00 	sts	0x00B8, r24
 208:	e1 df       	rcall	.-62     	; 0x1cc <set_twi_reciever_enable>
 20a:	80 e4       	ldi	r24, 0x40	; 64
 20c:	80 93 ba 00 	sts	0x00BA, r24
 210:	08 95       	ret
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	80 93 b8 00 	sts	0x00B8, r24
 218:	d9 df       	rcall	.-78     	; 0x1cc <set_twi_reciever_enable>
 21a:	81 e2       	ldi	r24, 0x21	; 33
 21c:	80 93 ba 00 	sts	0x00BA, r24
 220:	08 95       	ret

00000222 <get_data>:
 222:	80 91 bb 00 	lds	r24, 0x00BB
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret

0000022a <get_char_from_bus>:
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	c0 91 1e 02 	lds	r28, 0x021E
 232:	d0 91 1f 02 	lds	r29, 0x021F
 236:	f5 df       	rcall	.-22     	; 0x222 <get_data>
 238:	c1 5f       	subi	r28, 0xF1	; 241
 23a:	de 4f       	sbci	r29, 0xFE	; 254
 23c:	88 83       	st	Y, r24
 23e:	80 91 1e 02 	lds	r24, 0x021E
 242:	90 91 1f 02 	lds	r25, 0x021F
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 1f 02 	sts	0x021F, r25
 24c:	80 93 1e 02 	sts	0x021E, r24
 250:	90 93 06 01 	sts	0x0106, r25
 254:	80 93 05 01 	sts	0x0105, r24
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <get_command_from_bus>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	c0 91 0e 02 	lds	r28, 0x020E
 266:	d0 91 0f 02 	lds	r29, 0x020F
 26a:	db df       	rcall	.-74     	; 0x222 <get_data>
 26c:	cc 0f       	add	r28, r28
 26e:	dd 1f       	adc	r29, r29
 270:	c7 5f       	subi	r28, 0xF7	; 247
 272:	de 4f       	sbci	r29, 0xFE	; 254
 274:	99 83       	std	Y+1, r25	; 0x01
 276:	88 83       	st	Y, r24
 278:	80 91 0e 02 	lds	r24, 0x020E
 27c:	90 91 0f 02 	lds	r25, 0x020F
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 0f 02 	sts	0x020F, r25
 286:	80 93 0e 02 	sts	0x020E, r24
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <get_sensor_from_bus>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	c0 91 24 02 	lds	r28, 0x0224
 298:	d0 91 25 02 	lds	r29, 0x0225
 29c:	c7 30       	cpi	r28, 0x07	; 7
 29e:	d1 05       	cpc	r29, r1
 2a0:	99 f4       	brne	.+38     	; 0x2c8 <get_sensor_from_bus+0x38>
 2a2:	e0 e1       	ldi	r30, 0x10	; 16
 2a4:	f2 e0       	ldi	r31, 0x02	; 2
 2a6:	a6 e2       	ldi	r26, 0x26	; 38
 2a8:	b2 e0       	ldi	r27, 0x02	; 2
 2aa:	2e e1       	ldi	r18, 0x1E	; 30
 2ac:	32 e0       	ldi	r19, 0x02	; 2
 2ae:	81 91       	ld	r24, Z+
 2b0:	91 91       	ld	r25, Z+
 2b2:	8d 93       	st	X+, r24
 2b4:	9d 93       	st	X+, r25
 2b6:	e2 17       	cp	r30, r18
 2b8:	f3 07       	cpc	r31, r19
 2ba:	c9 f7       	brne	.-14     	; 0x2ae <get_sensor_from_bus+0x1e>
 2bc:	b2 df       	rcall	.-156    	; 0x222 <get_data>
 2be:	90 93 21 02 	sts	0x0221, r25
 2c2:	80 93 20 02 	sts	0x0220, r24
 2c6:	10 c0       	rjmp	.+32     	; 0x2e8 <get_sensor_from_bus+0x58>
 2c8:	ac df       	rcall	.-168    	; 0x222 <get_data>
 2ca:	cc 0f       	add	r28, r28
 2cc:	dd 1f       	adc	r29, r29
 2ce:	c0 5f       	subi	r28, 0xF0	; 240
 2d0:	dd 4f       	sbci	r29, 0xFD	; 253
 2d2:	99 83       	std	Y+1, r25	; 0x01
 2d4:	88 83       	st	Y, r24
 2d6:	80 91 24 02 	lds	r24, 0x0224
 2da:	90 91 25 02 	lds	r25, 0x0225
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 25 02 	sts	0x0225, r25
 2e4:	80 93 24 02 	sts	0x0224, r24
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <stop_twi>:
 2ee:	10 92 0f 02 	sts	0x020F, r1
 2f2:	10 92 0e 02 	sts	0x020E, r1
 2f6:	10 92 25 02 	sts	0x0225, r1
 2fa:	10 92 24 02 	sts	0x0224, r1
 2fe:	10 92 1f 02 	sts	0x021F, r1
 302:	10 92 1e 02 	sts	0x021E, r1
 306:	08 95       	ret

00000308 <reset_TWI>:
 308:	ec eb       	ldi	r30, 0xBC	; 188
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 6c       	ori	r24, 0xC0	; 192
 310:	80 83       	st	Z, r24
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
