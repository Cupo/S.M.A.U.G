
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000418  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  0080010c  0080010c  000004b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001029  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ad  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bf6  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008db  00000000  00000000  00003439  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	5d c0       	rjmp	.+186    	; 0x124 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	a7 c1       	rjmp	.+846    	; 0x414 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int current_instruction;
int my_adress;

int main(void)
{
	sei();
  c8:	78 94       	sei
	my_adress = ST_ADRESS;
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 10 01 	sts	0x0110, r25
  d2:	80 93 0f 01 	sts	0x010F, r24
	init_TWI(my_adress);
  d6:	90 d0       	rcall	.+288    	; 0x1f8 <init_TWI>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
  d8:	81 b1       	in	r24, 0x01	; 1
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x26>
  ee:	00 00       	nop
    while(1)
    {
		_delay_ms(500);
		//send_settings(C_ADRESS, 4);
        PORTA |= (1<<PORTA0);
  f0:	10 9a       	sbi	0x02, 0	; 2
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x30>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x3a>
 102:	00 00       	nop
		_delay_ms(1000);
		send_string(0x40, "I AM DEAD!");
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	c0 d0       	rcall	.+384    	; 0x28e <send_string>
		PORTA &= ~(1<<PORTA0);
 10e:	10 98       	cbi	0x02, 0	; 2
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x4e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x58>
 120:	00 00       	nop
 122:	dd cf       	rjmp	.-70     	; 0xde <main+0x16>

00000124 <__vector_26>:
		_delay_ms(1000);
    }
}

ISR(TWI_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	cli();
 14a:	f8 94       	cli
	PORTA ^= (1<<PORTA1);
 14c:	92 b1       	in	r25, 0x02	; 2
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	89 27       	eor	r24, r25
 152:	82 b9       	out	0x02, r24	; 2
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 154:	80 91 b9 00 	lds	r24, 0x00B9
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	80 36       	cpi	r24, 0x60	; 96
 15c:	29 f0       	breq	.+10     	; 0x168 <__vector_26+0x44>
 15e:	80 91 b9 00 	lds	r24, 0x00B9
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	88 36       	cpi	r24, 0x68	; 104
 166:	21 f4       	brne	.+8      	; 0x170 <__vector_26+0x4c>
	{
		instruction = true;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 0e 01 	sts	0x010E, r24
 16e:	2b c0       	rjmp	.+86     	; 0x1c6 <__vector_26+0xa2>
	}
	else if(CONTROL == DATA_SLAW)
 170:	80 91 b9 00 	lds	r24, 0x00B9
 174:	88 7f       	andi	r24, 0xF8	; 248
 176:	80 38       	cpi	r24, 0x80	; 128
 178:	c9 f4       	brne	.+50     	; 0x1ac <__vector_26+0x88>
	{
		if(instruction)
 17a:	80 91 0e 01 	lds	r24, 0x010E
 17e:	88 23       	and	r24, r24
 180:	41 f0       	breq	.+16     	; 0x192 <__vector_26+0x6e>
		{
			current_instruction = get_data();
 182:	77 d0       	rcall	.+238    	; 0x272 <get_data>
 184:	90 93 0d 01 	sts	0x010D, r25
 188:	80 93 0c 01 	sts	0x010C, r24
			instruction = false;
 18c:	10 92 0e 01 	sts	0x010E, r1
 190:	1a c0       	rjmp	.+52     	; 0x1c6 <__vector_26+0xa2>
		}
		else
		{
			switch(current_instruction)
 192:	80 91 0c 01 	lds	r24, 0x010C
 196:	90 91 0d 01 	lds	r25, 0x010D
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	19 f0       	breq	.+6      	; 0x1a4 <__vector_26+0x80>
 19e:	49 97       	sbiw	r24, 0x19	; 25
 1a0:	91 f4       	brne	.+36     	; 0x1c6 <__vector_26+0xa2>
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__vector_26+0x84>
			{
				case(I_COMMAND):
				{
					get_command_from_bus();
 1a4:	dc d0       	rcall	.+440    	; 0x35e <get_command_from_bus>
					break;
 1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <__vector_26+0xa2>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 1a8:	c0 d0       	rcall	.+384    	; 0x32a <get_char_from_bus>
					break;
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <__vector_26+0xa2>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 1ac:	80 91 b9 00 	lds	r24, 0x00B9
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	80 39       	cpi	r24, 0x90	; 144
 1b4:	11 f4       	brne	.+4      	; 0x1ba <__vector_26+0x96>
	{
		get_sensor_from_bus();
 1b6:	ec d0       	rcall	.+472    	; 0x390 <get_sensor_from_bus>
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__vector_26+0xa2>
	}
	else if (CONTROL == STOP)
 1ba:	80 91 b9 00 	lds	r24, 0x00B9
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	80 3a       	cpi	r24, 0xA0	; 160
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <__vector_26+0xa2>
			{
				//get_char(1);
				break;
			}
		}
		stop_twi();
 1c4:	14 d1       	rcall	.+552    	; 0x3ee <stop_twi>
	}
	reset_TWI();
 1c6:	20 d1       	rcall	.+576    	; 0x408 <reset_TWI>
	sei();
 1c8:	78 94       	sei
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <set_twi_reciever_enable>:
}

int get_sweep()
{
	return sweep;
}
 1f0:	85 e4       	ldi	r24, 0x45	; 69
 1f2:	80 93 bc 00 	sts	0x00BC, r24
 1f6:	08 95       	ret

000001f8 <init_TWI>:
 1f8:	90 93 10 01 	sts	0x0110, r25
 1fc:	80 93 0f 01 	sts	0x010F, r24
 200:	80 34       	cpi	r24, 0x40	; 64
 202:	91 05       	cpc	r25, r1
 204:	81 f0       	breq	.+32     	; 0x226 <init_TWI+0x2e>
 206:	80 38       	cpi	r24, 0x80	; 128
 208:	91 05       	cpc	r25, r1
 20a:	19 f0       	breq	.+6      	; 0x212 <init_TWI+0x1a>
 20c:	80 97       	sbiw	r24, 0x20	; 32
 20e:	d1 f4       	brne	.+52     	; 0x244 <init_TWI+0x4c>
 210:	12 c0       	rjmp	.+36     	; 0x236 <init_TWI+0x3e>
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	88 b9       	out	0x08, r24	; 8
 216:	ec df       	rcall	.-40     	; 0x1f0 <set_twi_reciever_enable>
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	80 93 b8 00 	sts	0x00B8, r24
 21e:	81 e8       	ldi	r24, 0x81	; 129
 220:	80 93 ba 00 	sts	0x00BA, r24
 224:	08 95       	ret
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	80 93 b8 00 	sts	0x00B8, r24
 22c:	e1 df       	rcall	.-62     	; 0x1f0 <set_twi_reciever_enable>
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	80 93 ba 00 	sts	0x00BA, r24
 234:	08 95       	ret
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	80 93 b8 00 	sts	0x00B8, r24
 23c:	d9 df       	rcall	.-78     	; 0x1f0 <set_twi_reciever_enable>
 23e:	81 e2       	ldi	r24, 0x21	; 33
 240:	80 93 ba 00 	sts	0x00BA, r24
 244:	08 95       	ret

00000246 <clear_int>:
 246:	81 ec       	ldi	r24, 0xC1	; 193
 248:	80 93 bc 00 	sts	0x00BC, r24
 24c:	08 95       	ret

0000024e <start_bus>:
 24e:	84 ea       	ldi	r24, 0xA4	; 164
 250:	80 93 bc 00 	sts	0x00BC, r24
 254:	08 95       	ret

00000256 <stop_bus>:
 256:	85 ed       	ldi	r24, 0xD5	; 213
 258:	80 93 bc 00 	sts	0x00BC, r24
 25c:	08 95       	ret

0000025e <Error>:
 25e:	80 91 b9 00 	lds	r24, 0x00B9
 262:	88 7f       	andi	r24, 0xF8	; 248
 264:	88 33       	cpi	r24, 0x38	; 56
 266:	09 f0       	breq	.+2      	; 0x26a <Error+0xc>
 268:	f6 cf       	rjmp	.-20     	; 0x256 <stop_bus>
 26a:	ed cf       	rjmp	.-38     	; 0x246 <clear_int>

0000026c <set_data>:
 26c:	80 93 bb 00 	sts	0x00BB, r24
 270:	08 95       	ret

00000272 <get_data>:
 272:	80 91 bb 00 	lds	r24, 0x00BB
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	08 95       	ret

0000027a <send_bus>:
 27a:	84 e8       	ldi	r24, 0x84	; 132
 27c:	80 93 bc 00 	sts	0x00BC, r24
 280:	08 95       	ret

00000282 <wait_for_bus>:
 282:	ec eb       	ldi	r30, 0xBC	; 188
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 23       	and	r24, r24
 28a:	ec f7       	brge	.-6      	; 0x286 <wait_for_bus+0x4>
 28c:	08 95       	ret

0000028e <send_string>:
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
 29c:	e6 2e       	mov	r14, r22
 29e:	f7 2e       	mov	r15, r23
 2a0:	d6 df       	rcall	.-84     	; 0x24e <start_bus>
 2a2:	ef df       	rcall	.-34     	; 0x282 <wait_for_bus>
 2a4:	80 91 b9 00 	lds	r24, 0x00B9
 2a8:	88 7f       	andi	r24, 0xF8	; 248
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <send_string+0x26>
 2ae:	d7 df       	rcall	.-82     	; 0x25e <Error>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	34 c0       	rjmp	.+104    	; 0x31c <send_string+0x8e>
 2b4:	ce 01       	movw	r24, r28
 2b6:	da df       	rcall	.-76     	; 0x26c <set_data>
 2b8:	e0 df       	rcall	.-64     	; 0x27a <send_bus>
 2ba:	e3 df       	rcall	.-58     	; 0x282 <wait_for_bus>
 2bc:	80 91 b9 00 	lds	r24, 0x00B9
 2c0:	88 7f       	andi	r24, 0xF8	; 248
 2c2:	88 31       	cpi	r24, 0x18	; 24
 2c4:	19 f0       	breq	.+6      	; 0x2cc <send_string+0x3e>
 2c6:	cb df       	rcall	.-106    	; 0x25e <Error>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	28 c0       	rjmp	.+80     	; 0x31c <send_string+0x8e>
 2cc:	89 e1       	ldi	r24, 0x19	; 25
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	cd df       	rcall	.-102    	; 0x26c <set_data>
 2d2:	d3 df       	rcall	.-90     	; 0x27a <send_bus>
 2d4:	d6 df       	rcall	.-84     	; 0x282 <wait_for_bus>
 2d6:	80 91 b9 00 	lds	r24, 0x00B9
 2da:	88 7f       	andi	r24, 0xF8	; 248
 2dc:	88 32       	cpi	r24, 0x28	; 40
 2de:	29 f4       	brne	.+10     	; 0x2ea <send_string+0x5c>
 2e0:	0e 2d       	mov	r16, r14
 2e2:	1f 2d       	mov	r17, r15
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	0b c0       	rjmp	.+22     	; 0x300 <send_string+0x72>
 2ea:	b9 df       	rcall	.-142    	; 0x25e <Error>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	16 c0       	rjmp	.+44     	; 0x31c <send_string+0x8e>
 2f0:	f8 01       	movw	r30, r16
 2f2:	81 91       	ld	r24, Z+
 2f4:	8f 01       	movw	r16, r30
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	b9 df       	rcall	.-142    	; 0x26c <set_data>
 2fa:	bf df       	rcall	.-130    	; 0x27a <send_bus>
 2fc:	c2 df       	rcall	.-124    	; 0x282 <wait_for_bus>
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	ee 2d       	mov	r30, r14
 302:	ff 2d       	mov	r31, r15
 304:	df 01       	movw	r26, r30
 306:	0d 90       	ld	r0, X+
 308:	00 20       	and	r0, r0
 30a:	e9 f7       	brne	.-6      	; 0x306 <send_string+0x78>
 30c:	11 97       	sbiw	r26, 0x01	; 1
 30e:	ae 1b       	sub	r26, r30
 310:	bf 0b       	sbc	r27, r31
 312:	ca 17       	cp	r28, r26
 314:	db 07       	cpc	r29, r27
 316:	60 f3       	brcs	.-40     	; 0x2f0 <send_string+0x62>
 318:	9e df       	rcall	.-196    	; 0x256 <stop_bus>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	08 95       	ret

0000032a <get_char_from_bus>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	c0 91 2a 02 	lds	r28, 0x022A
 332:	d0 91 2b 02 	lds	r29, 0x022B
 336:	9d df       	rcall	.-198    	; 0x272 <get_data>
 338:	c5 5e       	subi	r28, 0xE5	; 229
 33a:	de 4f       	sbci	r29, 0xFE	; 254
 33c:	88 83       	st	Y, r24
 33e:	80 91 2a 02 	lds	r24, 0x022A
 342:	90 91 2b 02 	lds	r25, 0x022B
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 2b 02 	sts	0x022B, r25
 34c:	80 93 2a 02 	sts	0x022A, r24
 350:	90 93 12 01 	sts	0x0112, r25
 354:	80 93 11 01 	sts	0x0111, r24
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <get_command_from_bus>:
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	c0 91 1a 02 	lds	r28, 0x021A
 366:	d0 91 1b 02 	lds	r29, 0x021B
 36a:	83 df       	rcall	.-250    	; 0x272 <get_data>
 36c:	cc 0f       	add	r28, r28
 36e:	dd 1f       	adc	r29, r29
 370:	cb 5e       	subi	r28, 0xEB	; 235
 372:	de 4f       	sbci	r29, 0xFE	; 254
 374:	99 83       	std	Y+1, r25	; 0x01
 376:	88 83       	st	Y, r24
 378:	80 91 1a 02 	lds	r24, 0x021A
 37c:	90 91 1b 02 	lds	r25, 0x021B
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	90 93 1b 02 	sts	0x021B, r25
 386:	80 93 1a 02 	sts	0x021A, r24
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <get_sensor_from_bus>:
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	c0 91 30 02 	lds	r28, 0x0230
 398:	d0 91 31 02 	lds	r29, 0x0231
 39c:	c7 30       	cpi	r28, 0x07	; 7
 39e:	d1 05       	cpc	r29, r1
 3a0:	99 f4       	brne	.+38     	; 0x3c8 <get_sensor_from_bus+0x38>
 3a2:	ec e1       	ldi	r30, 0x1C	; 28
 3a4:	f2 e0       	ldi	r31, 0x02	; 2
 3a6:	a2 e3       	ldi	r26, 0x32	; 50
 3a8:	b2 e0       	ldi	r27, 0x02	; 2
 3aa:	2a e2       	ldi	r18, 0x2A	; 42
 3ac:	32 e0       	ldi	r19, 0x02	; 2
 3ae:	81 91       	ld	r24, Z+
 3b0:	91 91       	ld	r25, Z+
 3b2:	8d 93       	st	X+, r24
 3b4:	9d 93       	st	X+, r25
 3b6:	e2 17       	cp	r30, r18
 3b8:	f3 07       	cpc	r31, r19
 3ba:	c9 f7       	brne	.-14     	; 0x3ae <get_sensor_from_bus+0x1e>
 3bc:	5a df       	rcall	.-332    	; 0x272 <get_data>
 3be:	90 93 2d 02 	sts	0x022D, r25
 3c2:	80 93 2c 02 	sts	0x022C, r24
 3c6:	10 c0       	rjmp	.+32     	; 0x3e8 <get_sensor_from_bus+0x58>
 3c8:	54 df       	rcall	.-344    	; 0x272 <get_data>
 3ca:	cc 0f       	add	r28, r28
 3cc:	dd 1f       	adc	r29, r29
 3ce:	c4 5e       	subi	r28, 0xE4	; 228
 3d0:	dd 4f       	sbci	r29, 0xFD	; 253
 3d2:	99 83       	std	Y+1, r25	; 0x01
 3d4:	88 83       	st	Y, r24
 3d6:	80 91 30 02 	lds	r24, 0x0230
 3da:	90 91 31 02 	lds	r25, 0x0231
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	90 93 31 02 	sts	0x0231, r25
 3e4:	80 93 30 02 	sts	0x0230, r24
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <stop_twi>:

void stop_twi()
{
	current_command = 0;
 3ee:	10 92 1b 02 	sts	0x021B, r1
 3f2:	10 92 1a 02 	sts	0x021A, r1
	sensor = 0;
 3f6:	10 92 31 02 	sts	0x0231, r1
 3fa:	10 92 30 02 	sts	0x0230, r1
	message_counter = 0;
 3fe:	10 92 2b 02 	sts	0x022B, r1
 402:	10 92 2a 02 	sts	0x022A, r1
 406:	08 95       	ret

00000408 <reset_TWI>:
}

void reset_TWI()
{
	TWCR |= (1<<TWINT) | (1<<TWEA);
 408:	ec eb       	ldi	r30, 0xBC	; 188
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	80 6c       	ori	r24, 0xC0	; 192
 410:	80 83       	st	Z, r24
 412:	08 95       	ret

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
