
Navigationsenheten.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001116  00800100  0000078c  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  00801216  00801216  00001936  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b1f  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000713  00000000  00000000  00003de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012bb  00000000  00000000  000044fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000600  00000000  00000000  000057b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b0  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012e3  00000000  00000000  00006368  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  0000764b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	0e c3       	rjmp	.+1564   	; 0x66e <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e1       	ldi	r17, 0x12	; 18
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e1       	ldi	r18, 0x18	; 24
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b2 e1       	ldi	r27, 0x12	; 18
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 35       	cpi	r26, 0x57	; 87
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d0       	rcall	.+84     	; 0x118 <main>
  c4:	61 c3       	rjmp	.+1730   	; 0x788 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
  c8:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
  ca:	90 81       	ld	r25, Z
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	22 81       	ldd	r18, Z+2	; 0x02
  d2:	82 1b       	sub	r24, r18
};
  d4:	89 23       	and	r24, r25
  d6:	08 95       	ret

000000d8 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
  e2:	f2 df       	rcall	.-28     	; 0xc8 <FifoDataLength>
  e4:	28 81       	ld	r18, Y
  e6:	39 81       	ldd	r19, Y+1	; 0x01
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	82 17       	cp	r24, r18
  f0:	93 07       	cpc	r25, r19
  f2:	69 f0       	breq	.+26     	; 0x10e <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	9d 81       	ldd	r25, Y+5	; 0x05
  f8:	fe 01       	movw	r30, r28
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	28 23       	and	r18, r24
 104:	39 23       	and	r19, r25
 106:	3d 83       	std	Y+5, r19	; 0x05
 108:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <main>:
int current_instruction;
int my_adress;

int main(void)
{
	USART_init();
 118:	b0 d1       	rcall	.+864    	; 0x47a <USART_init>
	sei();
 11a:	78 94       	sei
	my_adress = ST_ADRESS;
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 1e 12 	sts	0x121E, r25
 124:	80 93 1d 12 	sts	0x121D, r24
	init_TWI(my_adress);
 128:	92 d0       	rcall	.+292    	; 0x24e <init_TWI>
	DDRA |= (1<<PORTA0 | 1<<PORTA1);
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x1e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x28>
 140:	00 00       	nop
    while(1)
    {
		_delay_ms(500);
		//send_settings(C_ADRESS, 4);
        PORTA |= (1<<PORTA0);
 142:	10 9a       	sbi	0x02, 0	; 2
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x32>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x3c>
 154:	00 00       	nop
		_delay_ms(1000);
		//send_string(0x40, "I AM DEAD!");
		PORTA &= ~(1<<PORTA0);
 156:	10 98       	cbi	0x02, 0	; 2
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	83 ed       	ldi	r24, 0xD3	; 211
 15c:	90 e3       	ldi	r25, 0x30	; 48
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x46>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x50>
 168:	00 00       	nop
		_delay_ms(1000);
		USART_SendCommand();
 16a:	59 d2       	rcall	.+1202   	; 0x61e <USART_SendCommand>
 16c:	e1 cf       	rjmp	.-62     	; 0x130 <main+0x18>

0000016e <__vector_26>:
		
    }
}

ISR(TWI_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	0b b6       	in	r0, 0x3b	; 59
 17a:	0f 92       	push	r0
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	cli();
 194:	f8 94       	cli
	
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 196:	80 91 b9 00 	lds	r24, 0x00B9
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	80 36       	cpi	r24, 0x60	; 96
 19e:	29 f0       	breq	.+10     	; 0x1aa <__vector_26+0x3c>
 1a0:	80 91 b9 00 	lds	r24, 0x00B9
 1a4:	88 7f       	andi	r24, 0xF8	; 248
 1a6:	88 36       	cpi	r24, 0x68	; 104
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <__vector_26+0x44>
	{
		instruction = true;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 1c 12 	sts	0x121C, r24
 1b0:	35 c0       	rjmp	.+106    	; 0x21c <__vector_26+0xae>
	}
	else if(CONTROL == DATA_SLAW)
 1b2:	80 91 b9 00 	lds	r24, 0x00B9
 1b6:	88 7f       	andi	r24, 0xF8	; 248
 1b8:	80 38       	cpi	r24, 0x80	; 128
 1ba:	c9 f4       	brne	.+50     	; 0x1ee <__vector_26+0x80>
	{
		if(instruction)
 1bc:	80 91 1c 12 	lds	r24, 0x121C
 1c0:	88 23       	and	r24, r24
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <__vector_26+0x66>
		{
			current_instruction = get_data();
 1c4:	81 d0       	rcall	.+258    	; 0x2c8 <get_data>
 1c6:	90 93 1b 12 	sts	0x121B, r25
 1ca:	80 93 1a 12 	sts	0x121A, r24
			instruction = false;
 1ce:	10 92 1c 12 	sts	0x121C, r1
 1d2:	24 c0       	rjmp	.+72     	; 0x21c <__vector_26+0xae>
		}
		else
		{
			switch(current_instruction)
 1d4:	80 91 1a 12 	lds	r24, 0x121A
 1d8:	90 91 1b 12 	lds	r25, 0x121B
 1dc:	00 97       	sbiw	r24, 0x00	; 0
 1de:	19 f0       	breq	.+6      	; 0x1e6 <__vector_26+0x78>
 1e0:	49 97       	sbiw	r24, 0x19	; 25
 1e2:	e1 f4       	brne	.+56     	; 0x21c <__vector_26+0xae>
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__vector_26+0x7c>
			{
				case(I_COMMAND):
				{
					get_command_from_bus();
 1e6:	e6 d0       	rcall	.+460    	; 0x3b4 <get_command_from_bus>
					break;
 1e8:	19 c0       	rjmp	.+50     	; 0x21c <__vector_26+0xae>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 1ea:	ca d0       	rcall	.+404    	; 0x380 <get_char_from_bus>
					break;
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <__vector_26+0xae>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 1ee:	80 91 b9 00 	lds	r24, 0x00B9
 1f2:	88 7f       	andi	r24, 0xF8	; 248
 1f4:	80 39       	cpi	r24, 0x90	; 144
 1f6:	11 f4       	brne	.+4      	; 0x1fc <__vector_26+0x8e>
	{
		get_sensor_from_bus();
 1f8:	fe d0       	rcall	.+508    	; 0x3f6 <get_sensor_from_bus>
 1fa:	10 c0       	rjmp	.+32     	; 0x21c <__vector_26+0xae>
	}
	else if (CONTROL == STOP)
 1fc:	80 91 b9 00 	lds	r24, 0x00B9
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	80 3a       	cpi	r24, 0xA0	; 160
 204:	59 f4       	brne	.+22     	; 0x21c <__vector_26+0xae>
	{
		switch(current_instruction)
 206:	80 91 1a 12 	lds	r24, 0x121A
 20a:	90 91 1b 12 	lds	r25, 0x121B
 20e:	89 2b       	or	r24, r25
 210:	21 f4       	brne	.+8      	; 0x21a <__vector_26+0xac>
		{
			case(I_COMMAND):
			{
				PORTA ^= (1<<PORTA1);
 212:	92 b1       	in	r25, 0x02	; 2
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	89 27       	eor	r24, r25
 218:	82 b9       	out	0x02, r24	; 2
			{
				//get_char(1);
				break;
			}
		}
		stop_twi();
 21a:	1c d1       	rcall	.+568    	; 0x454 <stop_twi>
	}
	reset_TWI();
 21c:	28 d1       	rcall	.+592    	; 0x46e <reset_TWI>
	sei();
 21e:	78 94       	sei
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0b be       	out	0x3b, r0	; 59
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <set_twi_reciever_enable>:
 246:	85 e4       	ldi	r24, 0x45	; 69
 248:	80 93 bc 00 	sts	0x00BC, r24
 24c:	08 95       	ret

0000024e <init_TWI>:
 24e:	90 93 1e 12 	sts	0x121E, r25
 252:	80 93 1d 12 	sts	0x121D, r24
 256:	80 34       	cpi	r24, 0x40	; 64
 258:	91 05       	cpc	r25, r1
 25a:	81 f0       	breq	.+32     	; 0x27c <init_TWI+0x2e>
 25c:	80 38       	cpi	r24, 0x80	; 128
 25e:	91 05       	cpc	r25, r1
 260:	19 f0       	breq	.+6      	; 0x268 <init_TWI+0x1a>
 262:	80 97       	sbiw	r24, 0x20	; 32
 264:	d1 f4       	brne	.+52     	; 0x29a <init_TWI+0x4c>
 266:	12 c0       	rjmp	.+36     	; 0x28c <init_TWI+0x3e>
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	88 b9       	out	0x08, r24	; 8
 26c:	ec df       	rcall	.-40     	; 0x246 <set_twi_reciever_enable>
 26e:	8f e3       	ldi	r24, 0x3F	; 63
 270:	80 93 b8 00 	sts	0x00B8, r24
 274:	81 e8       	ldi	r24, 0x81	; 129
 276:	80 93 ba 00 	sts	0x00BA, r24
 27a:	08 95       	ret
 27c:	8f e3       	ldi	r24, 0x3F	; 63
 27e:	80 93 b8 00 	sts	0x00B8, r24
 282:	e1 df       	rcall	.-62     	; 0x246 <set_twi_reciever_enable>
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	80 93 ba 00 	sts	0x00BA, r24
 28a:	08 95       	ret
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	80 93 b8 00 	sts	0x00B8, r24
 292:	d9 df       	rcall	.-78     	; 0x246 <set_twi_reciever_enable>
 294:	81 e2       	ldi	r24, 0x21	; 33
 296:	80 93 ba 00 	sts	0x00BA, r24
 29a:	08 95       	ret

0000029c <clear_int>:
 29c:	81 ec       	ldi	r24, 0xC1	; 193
 29e:	80 93 bc 00 	sts	0x00BC, r24
 2a2:	08 95       	ret

000002a4 <start_bus>:
 2a4:	84 ea       	ldi	r24, 0xA4	; 164
 2a6:	80 93 bc 00 	sts	0x00BC, r24
 2aa:	08 95       	ret

000002ac <stop_bus>:
 2ac:	85 ed       	ldi	r24, 0xD5	; 213
 2ae:	80 93 bc 00 	sts	0x00BC, r24
 2b2:	08 95       	ret

000002b4 <Error>:
 2b4:	80 91 b9 00 	lds	r24, 0x00B9
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	88 33       	cpi	r24, 0x38	; 56
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <Error+0xc>
 2be:	f6 cf       	rjmp	.-20     	; 0x2ac <stop_bus>
 2c0:	ed cf       	rjmp	.-38     	; 0x29c <clear_int>

000002c2 <set_data>:
 2c2:	80 93 bb 00 	sts	0x00BB, r24
 2c6:	08 95       	ret

000002c8 <get_data>:
 2c8:	80 91 bb 00 	lds	r24, 0x00BB
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 95       	ret

000002d0 <send_bus>:
 2d0:	84 e8       	ldi	r24, 0x84	; 132
 2d2:	80 93 bc 00 	sts	0x00BC, r24
 2d6:	08 95       	ret

000002d8 <wait_for_bus>:
 2d8:	ec eb       	ldi	r30, 0xBC	; 188
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <wait_for_bus+0x4>
 2e2:	08 95       	ret

000002e4 <send_string>:
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
 2f2:	e6 2e       	mov	r14, r22
 2f4:	f7 2e       	mov	r15, r23
 2f6:	d6 df       	rcall	.-84     	; 0x2a4 <start_bus>
 2f8:	ef df       	rcall	.-34     	; 0x2d8 <wait_for_bus>
 2fa:	80 91 b9 00 	lds	r24, 0x00B9
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	88 30       	cpi	r24, 0x08	; 8
 302:	19 f0       	breq	.+6      	; 0x30a <send_string+0x26>
 304:	d7 df       	rcall	.-82     	; 0x2b4 <Error>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	34 c0       	rjmp	.+104    	; 0x372 <send_string+0x8e>
 30a:	ce 01       	movw	r24, r28
 30c:	da df       	rcall	.-76     	; 0x2c2 <set_data>
 30e:	e0 df       	rcall	.-64     	; 0x2d0 <send_bus>
 310:	e3 df       	rcall	.-58     	; 0x2d8 <wait_for_bus>
 312:	80 91 b9 00 	lds	r24, 0x00B9
 316:	88 7f       	andi	r24, 0xF8	; 248
 318:	88 31       	cpi	r24, 0x18	; 24
 31a:	19 f0       	breq	.+6      	; 0x322 <send_string+0x3e>
 31c:	cb df       	rcall	.-106    	; 0x2b4 <Error>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	28 c0       	rjmp	.+80     	; 0x372 <send_string+0x8e>
 322:	89 e1       	ldi	r24, 0x19	; 25
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	cd df       	rcall	.-102    	; 0x2c2 <set_data>
 328:	d3 df       	rcall	.-90     	; 0x2d0 <send_bus>
 32a:	d6 df       	rcall	.-84     	; 0x2d8 <wait_for_bus>
 32c:	80 91 b9 00 	lds	r24, 0x00B9
 330:	88 7f       	andi	r24, 0xF8	; 248
 332:	88 32       	cpi	r24, 0x28	; 40
 334:	29 f4       	brne	.+10     	; 0x340 <send_string+0x5c>
 336:	0e 2d       	mov	r16, r14
 338:	1f 2d       	mov	r17, r15
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	0b c0       	rjmp	.+22     	; 0x356 <send_string+0x72>
 340:	b9 df       	rcall	.-142    	; 0x2b4 <Error>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	16 c0       	rjmp	.+44     	; 0x372 <send_string+0x8e>
 346:	f8 01       	movw	r30, r16
 348:	81 91       	ld	r24, Z+
 34a:	8f 01       	movw	r16, r30
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	b9 df       	rcall	.-142    	; 0x2c2 <set_data>
 350:	bf df       	rcall	.-130    	; 0x2d0 <send_bus>
 352:	c2 df       	rcall	.-124    	; 0x2d8 <wait_for_bus>
 354:	21 96       	adiw	r28, 0x01	; 1
 356:	ee 2d       	mov	r30, r14
 358:	ff 2d       	mov	r31, r15
 35a:	df 01       	movw	r26, r30
 35c:	0d 90       	ld	r0, X+
 35e:	00 20       	and	r0, r0
 360:	e9 f7       	brne	.-6      	; 0x35c <send_string+0x78>
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	ae 1b       	sub	r26, r30
 366:	bf 0b       	sbc	r27, r31
 368:	ca 17       	cp	r28, r26
 36a:	db 07       	cpc	r29, r27
 36c:	60 f3       	brcs	.-40     	; 0x346 <send_string+0x62>
 36e:	9e df       	rcall	.-196    	; 0x2ac <stop_bus>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <get_char_from_bus>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	c0 91 38 13 	lds	r28, 0x1338
 388:	d0 91 39 13 	lds	r29, 0x1339
 38c:	9d df       	rcall	.-198    	; 0x2c8 <get_data>
 38e:	c7 5d       	subi	r28, 0xD7	; 215
 390:	dd 4e       	sbci	r29, 0xED	; 237
 392:	88 83       	st	Y, r24
 394:	80 91 38 13 	lds	r24, 0x1338
 398:	90 91 39 13 	lds	r25, 0x1339
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 39 13 	sts	0x1339, r25
 3a2:	80 93 38 13 	sts	0x1338, r24
 3a6:	90 93 20 12 	sts	0x1220, r25
 3aa:	80 93 1f 12 	sts	0x121F, r24
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <get_command_from_bus>:
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	c0 91 28 13 	lds	r28, 0x1328
 3bc:	d0 91 29 13 	lds	r29, 0x1329
 3c0:	83 df       	rcall	.-250    	; 0x2c8 <get_data>
 3c2:	cc 0f       	add	r28, r28
 3c4:	dd 1f       	adc	r29, r29
 3c6:	cd 5d       	subi	r28, 0xDD	; 221
 3c8:	dd 4e       	sbci	r29, 0xED	; 237
 3ca:	99 83       	std	Y+1, r25	; 0x01
 3cc:	88 83       	st	Y, r24
 3ce:	80 91 28 13 	lds	r24, 0x1328
 3d2:	90 91 29 13 	lds	r25, 0x1329
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	90 93 29 13 	sts	0x1329, r25
 3dc:	80 93 28 13 	sts	0x1328, r24
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <get_command>:
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	fc 01       	movw	r30, r24
 3ec:	ed 5d       	subi	r30, 0xDD	; 221
 3ee:	fd 4e       	sbci	r31, 0xED	; 237
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	08 95       	ret

000003f6 <get_sensor_from_bus>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	c0 91 3e 13 	lds	r28, 0x133E
 3fe:	d0 91 3f 13 	lds	r29, 0x133F
 402:	c7 30       	cpi	r28, 0x07	; 7
 404:	d1 05       	cpc	r29, r1
 406:	99 f4       	brne	.+38     	; 0x42e <get_sensor_from_bus+0x38>
 408:	ea e2       	ldi	r30, 0x2A	; 42
 40a:	f3 e1       	ldi	r31, 0x13	; 19
 40c:	a0 e4       	ldi	r26, 0x40	; 64
 40e:	b3 e1       	ldi	r27, 0x13	; 19
 410:	28 e3       	ldi	r18, 0x38	; 56
 412:	33 e1       	ldi	r19, 0x13	; 19
 414:	81 91       	ld	r24, Z+
 416:	91 91       	ld	r25, Z+
 418:	8d 93       	st	X+, r24
 41a:	9d 93       	st	X+, r25
 41c:	e2 17       	cp	r30, r18
 41e:	f3 07       	cpc	r31, r19
 420:	c9 f7       	brne	.-14     	; 0x414 <get_sensor_from_bus+0x1e>
 422:	52 df       	rcall	.-348    	; 0x2c8 <get_data>
 424:	90 93 3b 13 	sts	0x133B, r25
 428:	80 93 3a 13 	sts	0x133A, r24
 42c:	10 c0       	rjmp	.+32     	; 0x44e <get_sensor_from_bus+0x58>
 42e:	4c df       	rcall	.-360    	; 0x2c8 <get_data>
 430:	cc 0f       	add	r28, r28
 432:	dd 1f       	adc	r29, r29
 434:	c6 5d       	subi	r28, 0xD6	; 214
 436:	dc 4e       	sbci	r29, 0xEC	; 236
 438:	99 83       	std	Y+1, r25	; 0x01
 43a:	88 83       	st	Y, r24
 43c:	80 91 3e 13 	lds	r24, 0x133E
 440:	90 91 3f 13 	lds	r25, 0x133F
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	90 93 3f 13 	sts	0x133F, r25
 44a:	80 93 3e 13 	sts	0x133E, r24
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <stop_twi>:
 454:	10 92 29 13 	sts	0x1329, r1
 458:	10 92 28 13 	sts	0x1328, r1
 45c:	10 92 3f 13 	sts	0x133F, r1
 460:	10 92 3e 13 	sts	0x133E, r1
 464:	10 92 39 13 	sts	0x1339, r1
 468:	10 92 38 13 	sts	0x1338, r1
 46c:	08 95       	ret

0000046e <reset_TWI>:
 46e:	ec eb       	ldi	r30, 0xBC	; 188
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	80 6c       	ori	r24, 0xC0	; 192
 476:	80 83       	st	Z, r24
 478:	08 95       	ret

0000047a <USART_init>:

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	while(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
 47a:	10 92 c5 00 	sts	0x00C5, r1
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	80 93 c4 00 	sts	0x00C4, r24
 484:	88 e9       	ldi	r24, 0x98	; 152
 486:	80 93 c1 00 	sts	0x00C1, r24
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	80 93 c2 00 	sts	0x00C2, r24
 490:	08 95       	ret

00000492 <USART_CheckTxReady>:
 492:	80 91 c0 00 	lds	r24, 0x00C0
 496:	80 72       	andi	r24, 0x20	; 32
 498:	08 95       	ret

0000049a <USART_WriteByte>:
 49a:	cf 93       	push	r28
 49c:	c8 2f       	mov	r28, r24
 49e:	f9 df       	rcall	.-14     	; 0x492 <USART_CheckTxReady>
 4a0:	88 23       	and	r24, r24
 4a2:	e9 f3       	breq	.-6      	; 0x49e <USART_WriteByte+0x4>
 4a4:	c0 93 c6 00 	sts	0x00C6, r28
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <USART_crc16>:
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	66 23       	and	r22, r22
 4be:	09 f4       	brne	.+2      	; 0x4c2 <USART_crc16+0x16>
 4c0:	3e c0       	rjmp	.+124    	; 0x53e <USART_crc16+0x92>
 4c2:	06 2f       	mov	r16, r22
 4c4:	10 e0       	ldi	r17, 0x00	; 0
 4c6:	4f ef       	ldi	r20, 0xFF	; 255
 4c8:	5f ef       	ldi	r21, 0xFF	; 255
 4ca:	ee ef       	ldi	r30, 0xFE	; 254
 4cc:	ff ef       	ldi	r31, 0xFF	; 255
 4ce:	c6 2e       	mov	r12, r22
 4d0:	d1 2c       	mov	r13, r1
 4d2:	e8 2e       	mov	r14, r24
 4d4:	f1 2c       	mov	r15, r1
 4d6:	c8 e0       	ldi	r28, 0x08	; 8
 4d8:	d0 e0       	ldi	r29, 0x00	; 0
 4da:	ee 3f       	cpi	r30, 0xFE	; 254
 4dc:	6f ef       	ldi	r22, 0xFF	; 255
 4de:	f6 07       	cpc	r31, r22
 4e0:	19 f4       	brne	.+6      	; 0x4e8 <USART_crc16+0x3c>
 4e2:	8e 2d       	mov	r24, r14
 4e4:	9f 2d       	mov	r25, r15
 4e6:	30 c0       	rjmp	.+96     	; 0x548 <USART_crc16+0x9c>
 4e8:	ef 3f       	cpi	r30, 0xFF	; 255
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	f8 07       	cpc	r31, r24
 4ee:	19 f4       	brne	.+6      	; 0x4f6 <USART_crc16+0x4a>
 4f0:	8c 2d       	mov	r24, r12
 4f2:	9d 2d       	mov	r25, r13
 4f4:	29 c0       	rjmp	.+82     	; 0x548 <USART_crc16+0x9c>
 4f6:	df 01       	movw	r26, r30
 4f8:	ad 5a       	subi	r26, 0xAD	; 173
 4fa:	ba 4e       	sbci	r27, 0xEA	; 234
 4fc:	8c 91       	ld	r24, X
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	23 c0       	rjmp	.+70     	; 0x548 <USART_crc16+0x9c>
 502:	ba 01       	movw	r22, r20
 504:	68 27       	eor	r22, r24
 506:	79 27       	eor	r23, r25
 508:	60 ff       	sbrs	r22, 0
 50a:	07 c0       	rjmp	.+14     	; 0x51a <USART_crc16+0x6e>
 50c:	56 95       	lsr	r21
 50e:	47 95       	ror	r20
 510:	68 e0       	ldi	r22, 0x08	; 8
 512:	46 27       	eor	r20, r22
 514:	64 e8       	ldi	r22, 0x84	; 132
 516:	56 27       	eor	r21, r22
 518:	02 c0       	rjmp	.+4      	; 0x51e <USART_crc16+0x72>
 51a:	56 95       	lsr	r21
 51c:	47 95       	ror	r20
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	21 50       	subi	r18, 0x01	; 1
 524:	31 09       	sbc	r19, r1
 526:	69 f7       	brne	.-38     	; 0x502 <USART_crc16+0x56>
 528:	31 96       	adiw	r30, 0x01	; 1
 52a:	e0 17       	cp	r30, r16
 52c:	f1 07       	cpc	r31, r17
 52e:	a9 f6       	brne	.-86     	; 0x4da <USART_crc16+0x2e>
 530:	9a 01       	movw	r18, r20
 532:	20 95       	com	r18
 534:	30 95       	com	r19
 536:	32 27       	eor	r19, r18
 538:	23 27       	eor	r18, r19
 53a:	32 27       	eor	r19, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <USART_crc16+0x96>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	82 2f       	mov	r24, r18
 544:	93 2f       	mov	r25, r19
 546:	02 c0       	rjmp	.+4      	; 0x54c <USART_crc16+0xa0>
 548:	9e 01       	movw	r18, r28
 54a:	db cf       	rjmp	.-74     	; 0x502 <USART_crc16+0x56>
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	df 90       	pop	r13
 55a:	cf 90       	pop	r12
 55c:	08 95       	ret

0000055e <USART_SendPacket>:
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	9e e7       	ldi	r25, 0x7E	; 126
 568:	90 93 52 16 	sts	0x1652, r25
 56c:	80 93 53 16 	sts	0x1653, r24
 570:	60 93 54 16 	sts	0x1654, r22
 574:	26 2f       	mov	r18, r22
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	4c f5       	brge	.+82     	; 0x5d0 <USART_SendPacket+0x72>
 57e:	e3 e5       	ldi	r30, 0x53	; 83
 580:	f5 e1       	ldi	r31, 0x15	; 21
 582:	03 e0       	ldi	r16, 0x03	; 3
 584:	10 e0       	ldi	r17, 0x00	; 0
 586:	c0 e0       	ldi	r28, 0x00	; 0
 588:	d0 e0       	ldi	r29, 0x00	; 0
 58a:	7d e7       	ldi	r23, 0x7D	; 125
 58c:	50 e2       	ldi	r21, 0x20	; 32
 58e:	90 81       	ld	r25, Z
 590:	49 2f       	mov	r20, r25
 592:	4d 57       	subi	r20, 0x7D	; 125
 594:	42 30       	cpi	r20, 0x02	; 2
 596:	80 f4       	brcc	.+32     	; 0x5b8 <USART_SendPacket+0x5a>
 598:	d8 01       	movw	r26, r16
 59a:	ae 5a       	subi	r26, 0xAE	; 174
 59c:	b9 4e       	sbci	r27, 0xE9	; 233
 59e:	ac 0f       	add	r26, r28
 5a0:	bd 1f       	adc	r27, r29
 5a2:	7c 93       	st	X, r23
 5a4:	0f 5f       	subi	r16, 0xFF	; 255
 5a6:	1f 4f       	sbci	r17, 0xFF	; 255
 5a8:	d8 01       	movw	r26, r16
 5aa:	ae 5a       	subi	r26, 0xAE	; 174
 5ac:	b9 4e       	sbci	r27, 0xE9	; 233
 5ae:	ac 0f       	add	r26, r28
 5b0:	bd 1f       	adc	r27, r29
 5b2:	95 27       	eor	r25, r21
 5b4:	9c 93       	st	X, r25
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <USART_SendPacket+0x66>
 5b8:	d8 01       	movw	r26, r16
 5ba:	ae 5a       	subi	r26, 0xAE	; 174
 5bc:	b9 4e       	sbci	r27, 0xE9	; 233
 5be:	ac 0f       	add	r26, r28
 5c0:	bd 1f       	adc	r27, r29
 5c2:	9c 93       	st	X, r25
 5c4:	21 96       	adiw	r28, 0x01	; 1
 5c6:	31 96       	adiw	r30, 0x01	; 1
 5c8:	c2 17       	cp	r28, r18
 5ca:	d3 07       	cpc	r29, r19
 5cc:	01 f7       	brne	.-64     	; 0x58e <USART_SendPacket+0x30>
 5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <USART_SendPacket+0x7a>
 5d0:	03 e0       	ldi	r16, 0x03	; 3
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	c0 e0       	ldi	r28, 0x00	; 0
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
 5d8:	69 df       	rcall	.-302    	; 0x4ac <USART_crc16>
 5da:	f8 01       	movw	r30, r16
 5dc:	ee 5a       	subi	r30, 0xAE	; 174
 5de:	f9 4e       	sbci	r31, 0xE9	; 233
 5e0:	ec 0f       	add	r30, r28
 5e2:	fd 1f       	adc	r31, r29
 5e4:	90 83       	st	Z, r25
 5e6:	81 83       	std	Z+1, r24	; 0x01
 5e8:	22 96       	adiw	r28, 0x02	; 2
 5ea:	0c 0f       	add	r16, r28
 5ec:	1d 1f       	adc	r17, r29
 5ee:	f8 01       	movw	r30, r16
 5f0:	ee 5a       	subi	r30, 0xAE	; 174
 5f2:	f9 4e       	sbci	r31, 0xE9	; 233
 5f4:	8e e7       	ldi	r24, 0x7E	; 126
 5f6:	80 83       	st	Z, r24
 5f8:	c8 01       	movw	r24, r16
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	18 16       	cp	r1, r24
 5fe:	19 06       	cpc	r1, r25
 600:	4c f4       	brge	.+18     	; 0x614 <USART_SendPacket+0xb6>
 602:	c2 e5       	ldi	r28, 0x52	; 82
 604:	d6 e1       	ldi	r29, 0x16	; 22
 606:	0d 5a       	subi	r16, 0xAD	; 173
 608:	19 4e       	sbci	r17, 0xE9	; 233
 60a:	89 91       	ld	r24, Y+
 60c:	46 df       	rcall	.-372    	; 0x49a <USART_WriteByte>
 60e:	c0 17       	cp	r28, r16
 610:	d1 07       	cpc	r29, r17
 612:	d9 f7       	brne	.-10     	; 0x60a <USART_SendPacket+0xac>
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <USART_SendCommand>:
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	e1 de       	rcall	.-574    	; 0x3e6 <get_command>
 624:	80 93 53 15 	sts	0x1553, r24
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	dc de       	rcall	.-584    	; 0x3e6 <get_command>
 62e:	80 93 54 15 	sts	0x1554, r24
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	d7 de       	rcall	.-594    	; 0x3e6 <get_command>
 638:	80 93 55 15 	sts	0x1555, r24
 63c:	63 e0       	ldi	r22, 0x03	; 3
 63e:	83 e4       	ldi	r24, 0x43	; 67
 640:	8e cf       	rjmp	.-228    	; 0x55e <USART_SendPacket>

00000642 <USART_Bounce>:



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 642:	60 91 4f 13 	lds	r22, 0x134F
 646:	26 2f       	mov	r18, r22
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	64 f4       	brge	.+24     	; 0x668 <USART_Bounce+0x26>
 650:	a0 e5       	ldi	r26, 0x50	; 80
 652:	b3 e1       	ldi	r27, 0x13	; 19
 654:	e3 e5       	ldi	r30, 0x53	; 83
 656:	f5 e1       	ldi	r31, 0x15	; 21
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
	{
		gTxPayload[i] = gRxBuffer[i+2];
 65c:	4d 91       	ld	r20, X+
 65e:	41 93       	st	Z+, r20



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	82 17       	cp	r24, r18
 664:	93 07       	cpc	r25, r19
 666:	d4 f3       	brlt	.-12     	; 0x65c <USART_Bounce+0x1a>
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
 668:	80 91 4e 13 	lds	r24, 0x134E
 66c:	78 cf       	rjmp	.-272    	; 0x55e <USART_SendPacket>

0000066e <__vector_20>:
}


ISR (USART0_RX_vect)
{
 66e:	1f 92       	push	r1
 670:	0f 92       	push	r0
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	0f 92       	push	r0
 676:	11 24       	eor	r1, r1
 678:	0b b6       	in	r0, 0x3b	; 59
 67a:	0f 92       	push	r0
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	2f 93       	push	r18
 686:	3f 93       	push	r19
 688:	4f 93       	push	r20
 68a:	5f 93       	push	r21
 68c:	6f 93       	push	r22
 68e:	7f 93       	push	r23
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	af 93       	push	r26
 696:	bf 93       	push	r27
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
 6a0:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
 6a4:	2e 37       	cpi	r18, 0x7E	; 126
 6a6:	09 f0       	breq	.+2      	; 0x6aa <__vector_20+0x3c>
 6a8:	40 c0       	rjmp	.+128    	; 0x72a <__vector_20+0xbc>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
 6aa:	80 91 18 12 	lds	r24, 0x1218
 6ae:	90 91 19 12 	lds	r25, 0x1219
 6b2:	84 30       	cpi	r24, 0x04	; 4
 6b4:	91 05       	cpc	r25, r1
 6b6:	40 f4       	brcc	.+16     	; 0x6c8 <__vector_20+0x5a>
 6b8:	20 91 4f 13 	lds	r18, 0x134F
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	2c 5f       	subi	r18, 0xFC	; 252
 6c0:	3f 4f       	sbci	r19, 0xFF	; 255
 6c2:	82 17       	cp	r24, r18
 6c4:	93 07       	cpc	r25, r19
 6c6:	61 f5       	brne	.+88     	; 0x720 <__vector_20+0xb2>
		{
			if(gInvertNextFlag)
 6c8:	80 91 16 12 	lds	r24, 0x1216
 6cc:	90 91 17 12 	lds	r25, 0x1217
 6d0:	89 2b       	or	r24, r25
 6d2:	21 f0       	breq	.+8      	; 0x6dc <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
 6d4:	10 92 17 12 	sts	0x1217, r1
 6d8:	10 92 16 12 	sts	0x1216, r1
			}
			
			USART_Bounce();
 6dc:	b2 df       	rcall	.-156    	; 0x642 <USART_Bounce>
 6de:	0e e4       	ldi	r16, 0x4E	; 78
 6e0:	13 e1       	ldi	r17, 0x13	; 19
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 6e2:	c0 e0       	ldi	r28, 0x00	; 0
 6e4:	d0 e0       	ldi	r29, 0x00	; 0
 6e6:	0f 2e       	mov	r0, r31
 6e8:	ff e4       	ldi	r31, 0x4F	; 79
 6ea:	ef 2e       	mov	r14, r31
 6ec:	f3 e1       	ldi	r31, 0x13	; 19
 6ee:	ff 2e       	mov	r15, r31
 6f0:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
 6f2:	f8 01       	movw	r30, r16
 6f4:	61 91       	ld	r22, Z+
 6f6:	8f 01       	movw	r16, r30
 6f8:	80 91 00 01 	lds	r24, 0x0100
 6fc:	90 91 01 01 	lds	r25, 0x0101
 700:	eb dc       	rcall	.-1578   	; 0xd8 <FifoWrite>
 702:	88 23       	and	r24, r24
 704:	29 f0       	breq	.+10     	; 0x710 <__vector_20+0xa2>
				{
					send_string(S_ADRESS,"U_FIFO-full");
 706:	69 e0       	ldi	r22, 0x09	; 9
 708:	72 e1       	ldi	r23, 0x12	; 18
 70a:	80 e4       	ldi	r24, 0x40	; 64
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	ea dd       	rcall	.-1068   	; 0x2e4 <send_string>
			}
			
			USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 710:	21 96       	adiw	r28, 0x01	; 1
 712:	f7 01       	movw	r30, r14
 714:	80 81       	ld	r24, Z
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 96       	adiw	r24, 0x02	; 2
 71a:	c8 17       	cp	r28, r24
 71c:	d9 07       	cpc	r29, r25
 71e:	4c f3       	brlt	.-46     	; 0x6f2 <__vector_20+0x84>
					send_string(S_ADRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
 720:	10 92 19 12 	sts	0x1219, r1
 724:	10 92 18 12 	sts	0x1218, r1
 728:	16 c0       	rjmp	.+44     	; 0x756 <__vector_20+0xe8>
		
	}else if(data == 0x7d)
 72a:	2d 37       	cpi	r18, 0x7D	; 125
 72c:	39 f4       	brne	.+14     	; 0x73c <__vector_20+0xce>
	{
		gInvertNextFlag = 1;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	90 93 17 12 	sts	0x1217, r25
 736:	80 93 16 12 	sts	0x1216, r24
 73a:	0d c0       	rjmp	.+26     	; 0x756 <__vector_20+0xe8>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
 73c:	80 91 18 12 	lds	r24, 0x1218
 740:	90 91 19 12 	lds	r25, 0x1219
 744:	fc 01       	movw	r30, r24
 746:	e2 5b       	subi	r30, 0xB2	; 178
 748:	fc 4e       	sbci	r31, 0xEC	; 236
 74a:	20 83       	st	Z, r18
		++gRxBufferIndex;
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	90 93 19 12 	sts	0x1219, r25
 752:	80 93 18 12 	sts	0x1218, r24
	}
	
	
}
 756:	ff 91       	pop	r31
 758:	ef 91       	pop	r30
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	bf 91       	pop	r27
 760:	af 91       	pop	r26
 762:	9f 91       	pop	r25
 764:	8f 91       	pop	r24
 766:	7f 91       	pop	r23
 768:	6f 91       	pop	r22
 76a:	5f 91       	pop	r21
 76c:	4f 91       	pop	r20
 76e:	3f 91       	pop	r19
 770:	2f 91       	pop	r18
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	0f 90       	pop	r0
 77c:	0b be       	out	0x3b, r0	; 59
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
