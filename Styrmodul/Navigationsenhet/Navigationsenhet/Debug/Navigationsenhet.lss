
Navigationsenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800100  00800100  0000035e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ed0  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000031c  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b02  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000348  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003a0  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000072b  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	2d c0       	rjmp	.+90     	; 0xc4 <__vector_26>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 34       	cpi	r26, 0x44	; 68
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	0d c1       	rjmp	.+538    	; 0x2c6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
int current_instruction;
int my_adress;

int main(void)
{
	my_adress = ST_ADRESS;
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 0c 01 	sts	0x010C, r25
  b6:	80 93 0b 01 	sts	0x010B, r24
	init_TWI(my_adress);
  ba:	72 d0       	rcall	.+228    	; 0x1a0 <init_TWI>
	
	DDRA |= (1<<PORTA0) | (1<<PORTA1);
  bc:	81 b1       	in	r24, 0x01	; 1
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	81 b9       	out	0x01, r24	; 1
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x14>

000000c4 <__vector_26>:
}

*/

ISR(TWI_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	0b b6       	in	r0, 0x3b	; 59
  d0:	0f 92       	push	r0
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
  ea:	80 91 b9 00 	lds	r24, 0x00B9
  ee:	88 7f       	andi	r24, 0xF8	; 248
  f0:	80 36       	cpi	r24, 0x60	; 96
  f2:	29 f0       	breq	.+10     	; 0xfe <__vector_26+0x3a>
  f4:	80 91 b9 00 	lds	r24, 0x00B9
  f8:	88 7f       	andi	r24, 0xF8	; 248
  fa:	88 36       	cpi	r24, 0x68	; 104
  fc:	21 f4       	brne	.+8      	; 0x106 <__vector_26+0x42>
	{
		instruction = true;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 0a 01 	sts	0x010A, r24
 104:	35 c0       	rjmp	.+106    	; 0x170 <__vector_26+0xac>
	}
	else if(CONTROL == DATA_SLAW)
 106:	80 91 b9 00 	lds	r24, 0x00B9
 10a:	88 7f       	andi	r24, 0xF8	; 248
 10c:	80 38       	cpi	r24, 0x80	; 128
 10e:	c9 f4       	brne	.+50     	; 0x142 <__vector_26+0x7e>
	{
		if(instruction)
 110:	80 91 0a 01 	lds	r24, 0x010A
 114:	88 23       	and	r24, r24
 116:	41 f0       	breq	.+16     	; 0x128 <__vector_26+0x64>
		{
			current_instruction = get_data();
 118:	6a d0       	rcall	.+212    	; 0x1ee <get_data>
 11a:	90 93 05 01 	sts	0x0105, r25
 11e:	80 93 04 01 	sts	0x0104, r24
			instruction = false;
 122:	10 92 0a 01 	sts	0x010A, r1
 126:	24 c0       	rjmp	.+72     	; 0x170 <__vector_26+0xac>
		}
		else
		{
			switch(current_instruction)
 128:	80 91 04 01 	lds	r24, 0x0104
 12c:	90 91 05 01 	lds	r25, 0x0105
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	19 f0       	breq	.+6      	; 0x13a <__vector_26+0x76>
 134:	49 97       	sbiw	r24, 0x19	; 25
 136:	e1 f4       	brne	.+56     	; 0x170 <__vector_26+0xac>
 138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_26+0x7a>
			{
				case(I_COMMAND):
				{
					get_command_from_bus();
 13a:	77 d0       	rcall	.+238    	; 0x22a <get_command_from_bus>
					break;
 13c:	19 c0       	rjmp	.+50     	; 0x170 <__vector_26+0xac>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 13e:	5b d0       	rcall	.+182    	; 0x1f6 <get_char_from_bus>
					break;
 140:	17 c0       	rjmp	.+46     	; 0x170 <__vector_26+0xac>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 142:	80 91 b9 00 	lds	r24, 0x00B9
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	80 39       	cpi	r24, 0x90	; 144
 14a:	11 f4       	brne	.+4      	; 0x150 <__vector_26+0x8c>
	{
		get_sensor_from_bus();
 14c:	87 d0       	rcall	.+270    	; 0x25c <get_sensor_from_bus>
 14e:	10 c0       	rjmp	.+32     	; 0x170 <__vector_26+0xac>
	}
	else if (CONTROL == STOP)
 150:	80 91 b9 00 	lds	r24, 0x00B9
 154:	88 7f       	andi	r24, 0xF8	; 248
 156:	80 3a       	cpi	r24, 0xA0	; 160
 158:	59 f4       	brne	.+22     	; 0x170 <__vector_26+0xac>
	{
		switch(current_instruction)
 15a:	80 91 04 01 	lds	r24, 0x0104
 15e:	90 91 05 01 	lds	r25, 0x0105
 162:	49 97       	sbiw	r24, 0x19	; 25
 164:	29 f4       	brne	.+10     	; 0x170 <__vector_26+0xac>
				//get_command(1);
				break;
			}
			case(I_STRING):
			{
				PINA ^= (1<<PORTA0);
 166:	90 b1       	in	r25, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	89 27       	eor	r24, r25
 16c:	80 b9       	out	0x00, r24	; 0
				PINA |= (1<<PORTA1);
 16e:	01 9a       	sbi	0x00, 1	; 0
				//get_char(1);
				break;
			}
		}
	}
	reset_TWI();
 170:	a4 d0       	rcall	.+328    	; 0x2ba <reset_TWI>
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0b be       	out	0x3b, r0	; 59
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <set_twi_reciever_enable>:

void stop_twi()
{
	current_command = 0;
	sensor = 0;
	message_counter = 0;
 198:	85 e4       	ldi	r24, 0x45	; 69
 19a:	80 93 bc 00 	sts	0x00BC, r24
 19e:	08 95       	ret

000001a0 <init_TWI>:
 1a0:	90 93 0c 01 	sts	0x010C, r25
 1a4:	80 93 0b 01 	sts	0x010B, r24
 1a8:	80 34       	cpi	r24, 0x40	; 64
 1aa:	91 05       	cpc	r25, r1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <init_TWI+0x2e>
 1ae:	80 38       	cpi	r24, 0x80	; 128
 1b0:	91 05       	cpc	r25, r1
 1b2:	19 f0       	breq	.+6      	; 0x1ba <init_TWI+0x1a>
 1b4:	80 97       	sbiw	r24, 0x20	; 32
 1b6:	d1 f4       	brne	.+52     	; 0x1ec <init_TWI+0x4c>
 1b8:	12 c0       	rjmp	.+36     	; 0x1de <init_TWI+0x3e>
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	88 b9       	out	0x08, r24	; 8
 1be:	ec df       	rcall	.-40     	; 0x198 <set_twi_reciever_enable>
 1c0:	8b e1       	ldi	r24, 0x1B	; 27
 1c2:	80 93 b8 00 	sts	0x00B8, r24
 1c6:	81 e8       	ldi	r24, 0x81	; 129
 1c8:	80 93 ba 00 	sts	0x00BA, r24
 1cc:	08 95       	ret
 1ce:	87 e1       	ldi	r24, 0x17	; 23
 1d0:	80 93 b8 00 	sts	0x00B8, r24
 1d4:	e1 df       	rcall	.-62     	; 0x198 <set_twi_reciever_enable>
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	80 93 ba 00 	sts	0x00BA, r24
 1dc:	08 95       	ret
 1de:	87 e1       	ldi	r24, 0x17	; 23
 1e0:	80 93 b8 00 	sts	0x00B8, r24
 1e4:	d9 df       	rcall	.-78     	; 0x198 <set_twi_reciever_enable>
 1e6:	81 e2       	ldi	r24, 0x21	; 33
 1e8:	80 93 ba 00 	sts	0x00BA, r24
 1ec:	08 95       	ret

000001ee <get_data>:
 1ee:	80 91 bb 00 	lds	r24, 0x00BB
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <get_char_from_bus>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c0 91 2e 02 	lds	r28, 0x022E
 1fe:	d0 91 2f 02 	lds	r29, 0x022F
 202:	f5 df       	rcall	.-22     	; 0x1ee <get_data>
 204:	c1 5e       	subi	r28, 0xE1	; 225
 206:	de 4f       	sbci	r29, 0xFE	; 254
 208:	88 83       	st	Y, r24
 20a:	80 91 2e 02 	lds	r24, 0x022E
 20e:	90 91 2f 02 	lds	r25, 0x022F
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 2f 02 	sts	0x022F, r25
 218:	80 93 2e 02 	sts	0x022E, r24
 21c:	90 93 16 01 	sts	0x0116, r25
 220:	80 93 15 01 	sts	0x0115, r24
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <get_command_from_bus>:
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	c0 91 1e 02 	lds	r28, 0x021E
 232:	d0 91 1f 02 	lds	r29, 0x021F
 236:	db df       	rcall	.-74     	; 0x1ee <get_data>
 238:	cc 0f       	add	r28, r28
 23a:	dd 1f       	adc	r29, r29
 23c:	c7 5e       	subi	r28, 0xE7	; 231
 23e:	de 4f       	sbci	r29, 0xFE	; 254
 240:	99 83       	std	Y+1, r25	; 0x01
 242:	88 83       	st	Y, r24
 244:	80 91 1e 02 	lds	r24, 0x021E
 248:	90 91 1f 02 	lds	r25, 0x021F
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	90 93 1f 02 	sts	0x021F, r25
 252:	80 93 1e 02 	sts	0x021E, r24
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <get_sensor_from_bus>:
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	c0 91 34 02 	lds	r28, 0x0234
 264:	d0 91 35 02 	lds	r29, 0x0235
 268:	c7 30       	cpi	r28, 0x07	; 7
 26a:	d1 05       	cpc	r29, r1
 26c:	99 f4       	brne	.+38     	; 0x294 <get_sensor_from_bus+0x38>
 26e:	e0 e2       	ldi	r30, 0x20	; 32
 270:	f2 e0       	ldi	r31, 0x02	; 2
 272:	a6 e3       	ldi	r26, 0x36	; 54
 274:	b2 e0       	ldi	r27, 0x02	; 2
 276:	2e e2       	ldi	r18, 0x2E	; 46
 278:	32 e0       	ldi	r19, 0x02	; 2
 27a:	81 91       	ld	r24, Z+
 27c:	91 91       	ld	r25, Z+
 27e:	8d 93       	st	X+, r24
 280:	9d 93       	st	X+, r25
 282:	e2 17       	cp	r30, r18
 284:	f3 07       	cpc	r31, r19
 286:	c9 f7       	brne	.-14     	; 0x27a <get_sensor_from_bus+0x1e>
 288:	b2 df       	rcall	.-156    	; 0x1ee <get_data>
 28a:	90 93 31 02 	sts	0x0231, r25
 28e:	80 93 30 02 	sts	0x0230, r24
 292:	10 c0       	rjmp	.+32     	; 0x2b4 <get_sensor_from_bus+0x58>
 294:	ac df       	rcall	.-168    	; 0x1ee <get_data>
 296:	cc 0f       	add	r28, r28
 298:	dd 1f       	adc	r29, r29
 29a:	c0 5e       	subi	r28, 0xE0	; 224
 29c:	dd 4f       	sbci	r29, 0xFD	; 253
 29e:	99 83       	std	Y+1, r25	; 0x01
 2a0:	88 83       	st	Y, r24
 2a2:	80 91 34 02 	lds	r24, 0x0234
 2a6:	90 91 35 02 	lds	r25, 0x0235
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 35 02 	sts	0x0235, r25
 2b0:	80 93 34 02 	sts	0x0234, r24
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <reset_TWI>:
}

void reset_TWI()
{
	TWCR |= (1<<TWINT) | (1<<TWEA);
 2ba:	ec eb       	ldi	r30, 0xBC	; 188
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 6c       	ori	r24, 0xC0	; 192
 2c2:	80 83       	st	Z, r24
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
