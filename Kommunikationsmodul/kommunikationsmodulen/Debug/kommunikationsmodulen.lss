
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001042  00800100  00000af0  00000b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  00801142  00801142  00001bc6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000232b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  0000235a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001981  00000000  00000000  0000257a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007d0  00000000  00000000  00003efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001272  00000000  00000000  000046cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000063c  00000000  00000000  00005940  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000059b  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001389  00000000  00000000  00006517  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e0  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	38 c2       	rjmp	.+1136   	; 0x4c2 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	b1 c2       	rjmp	.+1378   	; 0x5cc <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e1       	ldi	r17, 0x11	; 17
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e1       	ldi	r18, 0x17	; 23
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b1 e1       	ldi	r27, 0x11	; 17
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 38       	cpi	r26, 0x81	; 129
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cf d1       	rcall	.+926    	; 0x462 <main>
  c4:	13 c5       	rjmp	.+2598   	; 0xaec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
  c8:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
  ca:	90 81       	ld	r25, Z
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	22 81       	ldd	r18, Z+2	; 0x02
  d2:	82 1b       	sub	r24, r18
};
  d4:	89 23       	and	r24, r25
  d6:	08 95       	ret

000000d8 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
  e2:	f2 df       	rcall	.-28     	; 0xc8 <FifoDataLength>
  e4:	28 81       	ld	r18, Y
  e6:	39 81       	ldd	r19, Y+1	; 0x01
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	82 17       	cp	r24, r18
  f0:	93 07       	cpc	r25, r19
  f2:	69 f0       	breq	.+26     	; 0x10e <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	9d 81       	ldd	r25, Y+5	; 0x05
  f8:	fe 01       	movw	r30, r28
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	28 23       	and	r18, r24
 104:	39 23       	and	r19, r25
 106:	3d 83       	std	Y+5, r19	; 0x05
 108:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
 124:	d1 df       	rcall	.-94     	; 0xc8 <FifoDataLength>
 126:	88 23       	and	r24, r24
 128:	a1 f0       	breq	.+40     	; 0x152 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
 12a:	ea 81       	ldd	r30, Y+2	; 0x02
 12c:	fb 81       	ldd	r31, Y+3	; 0x03
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	f8 01       	movw	r30, r16
 136:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
 138:	28 81       	ld	r18, Y
 13a:	39 81       	ldd	r19, Y+1	; 0x01
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	31 09       	sbc	r19, r1
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	9b 81       	ldd	r25, Y+3	; 0x03
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	82 23       	and	r24, r18
 148:	93 23       	and	r25, r19
 14a:	9b 83       	std	Y+3, r25	; 0x03
 14c:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	01 c0       	rjmp	.+2      	; 0x154 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <init>:
	{
		gTxPayload[i] = msg[i];
	}
	
	USART_SendPacket('S', strlen(msg));
}
 15e:	81 b1       	in	r24, 0x01	; 1
 160:	83 60       	ori	r24, 0x03	; 3
 162:	81 b9       	out	0x01, r24	; 1
 164:	10 92 53 16 	sts	0x1653, r1
 168:	10 92 52 16 	sts	0x1652, r1
 16c:	08 95       	ret

0000016e <USART_init>:
 16e:	10 92 c5 00 	sts	0x00C5, r1
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	80 93 c4 00 	sts	0x00C4, r24
 178:	88 e9       	ldi	r24, 0x98	; 152
 17a:	80 93 c1 00 	sts	0x00C1, r24
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	80 93 c2 00 	sts	0x00C2, r24
 184:	08 95       	ret

00000186 <USART_CheckTxReady>:
 186:	80 91 c0 00 	lds	r24, 0x00C0
 18a:	80 72       	andi	r24, 0x20	; 32
 18c:	08 95       	ret

0000018e <USART_WriteByte>:
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
 192:	f9 df       	rcall	.-14     	; 0x186 <USART_CheckTxReady>
 194:	88 23       	and	r24, r24
 196:	e9 f3       	breq	.-6      	; 0x192 <USART_WriteByte+0x4>
 198:	c0 93 c6 00 	sts	0x00C6, r28
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <USART_crc16>:
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	66 23       	and	r22, r22
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <USART_crc16+0x16>
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <USART_crc16+0x92>
 1b6:	06 2f       	mov	r16, r22
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	4f ef       	ldi	r20, 0xFF	; 255
 1bc:	5f ef       	ldi	r21, 0xFF	; 255
 1be:	ee ef       	ldi	r30, 0xFE	; 254
 1c0:	ff ef       	ldi	r31, 0xFF	; 255
 1c2:	c6 2e       	mov	r12, r22
 1c4:	d1 2c       	mov	r13, r1
 1c6:	e8 2e       	mov	r14, r24
 1c8:	f1 2c       	mov	r15, r1
 1ca:	c8 e0       	ldi	r28, 0x08	; 8
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	ee 3f       	cpi	r30, 0xFE	; 254
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	f6 07       	cpc	r31, r22
 1d4:	19 f4       	brne	.+6      	; 0x1dc <USART_crc16+0x3c>
 1d6:	8e 2d       	mov	r24, r14
 1d8:	9f 2d       	mov	r25, r15
 1da:	30 c0       	rjmp	.+96     	; 0x23c <USART_crc16+0x9c>
 1dc:	ef 3f       	cpi	r30, 0xFF	; 255
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	f8 07       	cpc	r31, r24
 1e2:	19 f4       	brne	.+6      	; 0x1ea <USART_crc16+0x4a>
 1e4:	8c 2d       	mov	r24, r12
 1e6:	9d 2d       	mov	r25, r13
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <USART_crc16+0x9c>
 1ea:	df 01       	movw	r26, r30
 1ec:	a2 5b       	subi	r26, 0xB2	; 178
 1ee:	bc 4e       	sbci	r27, 0xEC	; 236
 1f0:	8c 91       	ld	r24, X
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	23 c0       	rjmp	.+70     	; 0x23c <USART_crc16+0x9c>
 1f6:	ba 01       	movw	r22, r20
 1f8:	68 27       	eor	r22, r24
 1fa:	79 27       	eor	r23, r25
 1fc:	60 ff       	sbrs	r22, 0
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <USART_crc16+0x6e>
 200:	56 95       	lsr	r21
 202:	47 95       	ror	r20
 204:	68 e0       	ldi	r22, 0x08	; 8
 206:	46 27       	eor	r20, r22
 208:	64 e8       	ldi	r22, 0x84	; 132
 20a:	56 27       	eor	r21, r22
 20c:	02 c0       	rjmp	.+4      	; 0x212 <USART_crc16+0x72>
 20e:	56 95       	lsr	r21
 210:	47 95       	ror	r20
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
 21a:	69 f7       	brne	.-38     	; 0x1f6 <USART_crc16+0x56>
 21c:	31 96       	adiw	r30, 0x01	; 1
 21e:	e0 17       	cp	r30, r16
 220:	f1 07       	cpc	r31, r17
 222:	a9 f6       	brne	.-86     	; 0x1ce <USART_crc16+0x2e>
 224:	9a 01       	movw	r18, r20
 226:	20 95       	com	r18
 228:	30 95       	com	r19
 22a:	32 27       	eor	r19, r18
 22c:	23 27       	eor	r18, r19
 22e:	32 27       	eor	r19, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <USART_crc16+0x96>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	82 2f       	mov	r24, r18
 238:	93 2f       	mov	r25, r19
 23a:	02 c0       	rjmp	.+4      	; 0x240 <USART_crc16+0xa0>
 23c:	9e 01       	movw	r18, r28
 23e:	db cf       	rjmp	.-74     	; 0x1f6 <USART_crc16+0x56>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	08 95       	ret

00000252 <USART_SendPacket>:
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	9e e7       	ldi	r25, 0x7E	; 126
 25c:	90 93 4d 14 	sts	0x144D, r25
 260:	80 93 4e 14 	sts	0x144E, r24
 264:	60 93 4f 14 	sts	0x144F, r22
 268:	26 2f       	mov	r18, r22
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	12 16       	cp	r1, r18
 26e:	13 06       	cpc	r1, r19
 270:	4c f5       	brge	.+82     	; 0x2c4 <USART_SendPacket+0x72>
 272:	ee e4       	ldi	r30, 0x4E	; 78
 274:	f3 e1       	ldi	r31, 0x13	; 19
 276:	03 e0       	ldi	r16, 0x03	; 3
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	7d e7       	ldi	r23, 0x7D	; 125
 280:	50 e2       	ldi	r21, 0x20	; 32
 282:	90 81       	ld	r25, Z
 284:	49 2f       	mov	r20, r25
 286:	4d 57       	subi	r20, 0x7D	; 125
 288:	42 30       	cpi	r20, 0x02	; 2
 28a:	80 f4       	brcc	.+32     	; 0x2ac <USART_SendPacket+0x5a>
 28c:	d8 01       	movw	r26, r16
 28e:	a3 5b       	subi	r26, 0xB3	; 179
 290:	bb 4e       	sbci	r27, 0xEB	; 235
 292:	ac 0f       	add	r26, r28
 294:	bd 1f       	adc	r27, r29
 296:	7c 93       	st	X, r23
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	d8 01       	movw	r26, r16
 29e:	a3 5b       	subi	r26, 0xB3	; 179
 2a0:	bb 4e       	sbci	r27, 0xEB	; 235
 2a2:	ac 0f       	add	r26, r28
 2a4:	bd 1f       	adc	r27, r29
 2a6:	95 27       	eor	r25, r21
 2a8:	9c 93       	st	X, r25
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <USART_SendPacket+0x66>
 2ac:	d8 01       	movw	r26, r16
 2ae:	a3 5b       	subi	r26, 0xB3	; 179
 2b0:	bb 4e       	sbci	r27, 0xEB	; 235
 2b2:	ac 0f       	add	r26, r28
 2b4:	bd 1f       	adc	r27, r29
 2b6:	9c 93       	st	X, r25
 2b8:	21 96       	adiw	r28, 0x01	; 1
 2ba:	31 96       	adiw	r30, 0x01	; 1
 2bc:	c2 17       	cp	r28, r18
 2be:	d3 07       	cpc	r29, r19
 2c0:	01 f7       	brne	.-64     	; 0x282 <USART_SendPacket+0x30>
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <USART_SendPacket+0x7a>
 2c4:	03 e0       	ldi	r16, 0x03	; 3
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	69 df       	rcall	.-302    	; 0x1a0 <USART_crc16>
 2ce:	f8 01       	movw	r30, r16
 2d0:	e3 5b       	subi	r30, 0xB3	; 179
 2d2:	fb 4e       	sbci	r31, 0xEB	; 235
 2d4:	ec 0f       	add	r30, r28
 2d6:	fd 1f       	adc	r31, r29
 2d8:	90 83       	st	Z, r25
 2da:	81 83       	std	Z+1, r24	; 0x01
 2dc:	22 96       	adiw	r28, 0x02	; 2
 2de:	0c 0f       	add	r16, r28
 2e0:	1d 1f       	adc	r17, r29
 2e2:	f8 01       	movw	r30, r16
 2e4:	e3 5b       	subi	r30, 0xB3	; 179
 2e6:	fb 4e       	sbci	r31, 0xEB	; 235
 2e8:	8e e7       	ldi	r24, 0x7E	; 126
 2ea:	80 83       	st	Z, r24
 2ec:	c8 01       	movw	r24, r16
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	18 16       	cp	r1, r24
 2f2:	19 06       	cpc	r1, r25
 2f4:	4c f4       	brge	.+18     	; 0x308 <USART_SendPacket+0xb6>
 2f6:	cd e4       	ldi	r28, 0x4D	; 77
 2f8:	d4 e1       	ldi	r29, 0x14	; 20
 2fa:	02 5b       	subi	r16, 0xB2	; 178
 2fc:	1b 4e       	sbci	r17, 0xEB	; 235
 2fe:	89 91       	ld	r24, Y+
 300:	46 df       	rcall	.-372    	; 0x18e <USART_WriteByte>
 302:	c0 17       	cp	r28, r16
 304:	d1 07       	cpc	r29, r17
 306:	d9 f7       	brne	.-10     	; 0x2fe <USART_SendPacket+0xac>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <USART_SendSensors>:
	
void USART_SendSensors()
{
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ce e4       	ldi	r28, 0x4E	; 78
 320:	d3 e1       	ldi	r29, 0x13	; 19
	}
	
	USART_SendPacket('S', strlen(msg));
}
	
void USART_SendSensors()
 322:	0f 2e       	mov	r0, r31
 324:	f5 e5       	ldi	r31, 0x55	; 85
 326:	ef 2e       	mov	r14, r31
 328:	f3 e1       	ldi	r31, 0x13	; 19
 32a:	ff 2e       	mov	r15, r31
 32c:	f0 2d       	mov	r31, r0
{
	for(int i = 0; i < 7; i++)
	{
		gTxPayload[i] = 40 + rand() % 5;
 32e:	05 e0       	ldi	r16, 0x05	; 5
 330:	10 e0       	ldi	r17, 0x00	; 0
 332:	75 d3       	rcall	.+1770   	; 0xa1e <rand>
 334:	b8 01       	movw	r22, r16
 336:	00 d3       	rcall	.+1536   	; 0x938 <__divmodhi4>
 338:	88 5d       	subi	r24, 0xD8	; 216
 33a:	89 93       	st	Y+, r24
	USART_SendPacket('S', strlen(msg));
}
	
void USART_SendSensors()
{
	for(int i = 0; i < 7; i++)
 33c:	ce 15       	cp	r28, r14
 33e:	df 05       	cpc	r29, r15
 340:	c1 f7       	brne	.-16     	; 0x332 <USART_SendSensors+0x20>
	{
		gTxPayload[i] = 40 + rand() % 5;
	}
	
	USART_SendPacket('M', 7);
 342:	67 e0       	ldi	r22, 0x07	; 7
 344:	8d e4       	ldi	r24, 0x4D	; 77
 346:	85 df       	rcall	.-246    	; 0x252 <USART_SendPacket>
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <USART_DecodeMessageRxFIFO>:

uint8_t USART_DecodeMessageRxFIFO()
{
 356:	8f 92       	push	r8
 358:	9f 92       	push	r9
 35a:	af 92       	push	r10
 35c:	bf 92       	push	r11
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	
	
	// TODO: send to relevant party... the display for now
	send_string_fixed_length(S_ADRESS, msg, length);
	return 0;
}
 372:	ad b6       	in	r10, 0x3d	; 61
 374:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gRxFIFO, len))
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	80 91 04 01 	lds	r24, 0x0104
 37e:	90 91 05 01 	lds	r25, 0x0105
 382:	ca de       	rcall	.-620    	; 0x118 <FifoRead>
 384:	88 23       	and	r24, r24
 386:	39 f0       	breq	.+14     	; 0x396 <USART_DecodeMessageRxFIFO+0x40>
	{
		send_string(S_ADRESS, "RxFIFO ERROR: LEN MISSING");
 388:	6c e0       	ldi	r22, 0x0C	; 12
 38a:	71 e1       	ldi	r23, 0x11	; 17
 38c:	80 e4       	ldi	r24, 0x40	; 64
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	23 d2       	rcall	.+1094   	; 0x7d8 <send_string>
		return 1; // error
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	45 c0       	rjmp	.+138    	; 0x420 <USART_DecodeMessageRxFIFO+0xca>
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
 396:	c0 90 00 00 	lds	r12, 0x0000
 39a:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];
 39c:	96 01       	movw	r18, r12
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	c1 14       	cp	r12, r1
 3a8:	d1 04       	cpc	r13, r1
 3aa:	11 f0       	breq	.+4      	; 0x3b0 <USART_DecodeMessageRxFIFO+0x5a>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t msg[length-1+ifzero];
 3b0:	82 0f       	add	r24, r18
 3b2:	93 1f       	adc	r25, r19
 3b4:	2d b7       	in	r18, 0x3d	; 61
 3b6:	3e b7       	in	r19, 0x3e	; 62
 3b8:	28 1b       	sub	r18, r24
 3ba:	39 0b       	sbc	r19, r25
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	3e bf       	out	0x3e, r19	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	2d bf       	out	0x3d, r18	; 61
 3c6:	8d b7       	in	r24, 0x3d	; 61
 3c8:	9e b7       	in	r25, 0x3e	; 62
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	88 2e       	mov	r8, r24
 3ce:	99 2e       	mov	r9, r25

	for(int i = 0; i < length; ++i)
 3d0:	1c 14       	cp	r1, r12
 3d2:	1d 04       	cpc	r1, r13
 3d4:	f4 f4       	brge	.+60     	; 0x412 <USART_DecodeMessageRxFIFO+0xbc>
 3d6:	e8 2e       	mov	r14, r24
 3d8:	f9 2e       	mov	r15, r25
 3da:	00 e0       	ldi	r16, 0x00	; 0
 3dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gRxFIFO, character))
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 91 04 01 	lds	r24, 0x0104
 3e6:	90 91 05 01 	lds	r25, 0x0105
 3ea:	96 de       	rcall	.-724    	; 0x118 <FifoRead>
 3ec:	88 23       	and	r24, r24
 3ee:	39 f0       	breq	.+14     	; 0x3fe <USART_DecodeMessageRxFIFO+0xa8>
		{
			send_string(S_ADRESS, "RxFIFO ERROR: DATA MISSING");
 3f0:	66 e2       	ldi	r22, 0x26	; 38
 3f2:	71 e1       	ldi	r23, 0x11	; 17
 3f4:	80 e4       	ldi	r24, 0x40	; 64
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ef d1       	rcall	.+990    	; 0x7d8 <send_string>
			return 1; // error
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	11 c0       	rjmp	.+34     	; 0x420 <USART_DecodeMessageRxFIFO+0xca>
		}

		msg[i] = *character;
 3fe:	80 91 00 00 	lds	r24, 0x0000
 402:	f7 01       	movw	r30, r14
 404:	81 93       	st	Z+, r24
 406:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
 408:	0f 5f       	subi	r16, 0xFF	; 255
 40a:	1f 4f       	sbci	r17, 0xFF	; 255
 40c:	0c 15       	cp	r16, r12
 40e:	1d 05       	cpc	r17, r13
 410:	34 f3       	brlt	.-52     	; 0x3de <USART_DecodeMessageRxFIFO+0x88>
		msg[i] = *character;
	}
	
	
	// TODO: send to relevant party... the display for now
	send_string_fixed_length(S_ADRESS, msg, length);
 412:	a6 01       	movw	r20, r12
 414:	68 2d       	mov	r22, r8
 416:	79 2d       	mov	r23, r9
 418:	80 e4       	ldi	r24, 0x40	; 64
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	97 d1       	rcall	.+814    	; 0x74c <send_string_fixed_length>
	return 0;
 41e:	80 e0       	ldi	r24, 0x00	; 0
}
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	be be       	out	0x3e, r11	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	ad be       	out	0x3d, r10	; 61
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	bf 90       	pop	r11
 43c:	af 90       	pop	r10
 43e:	9f 90       	pop	r9
 440:	8f 90       	pop	r8
 442:	08 95       	ret

00000444 <USART_DecodeRxFIFO>:

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	if(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	80 91 04 01 	lds	r24, 0x0104
 44c:	90 91 05 01 	lds	r25, 0x0105
 450:	63 de       	rcall	.-826    	; 0x118 <FifoRead>
 452:	81 11       	cpse	r24, r1
 454:	05 c0       	rjmp	.+10     	; 0x460 <USART_DecodeRxFIFO+0x1c>
	{
		switch(*tag){
 456:	80 91 00 00 	lds	r24, 0x0000
 45a:	8d 34       	cpi	r24, 0x4D	; 77
 45c:	09 f4       	brne	.+2      	; 0x460 <USART_DecodeRxFIFO+0x1c>
			case('M'): // if 'tag' is 'M'
			{
				if(USART_DecodeMessageRxFIFO()) // if decoding failed
 45e:	7b cf       	rjmp	.-266    	; 0x356 <USART_DecodeMessageRxFIFO>
 460:	08 95       	ret

00000462 <main>:



int main(void)
{
	init();
 462:	7d de       	rcall	.-774    	; 0x15e <init>
	USART_init();
 464:	84 de       	rcall	.-760    	; 0x16e <USART_init>
	
	// init TWI
	my_adress = C_ADRESS;
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 93 4d 13 	sts	0x134D, r25
 46e:	80 93 4c 13 	sts	0x134C, r24
	init_TWI(my_adress);
 472:	18 d1       	rcall	.+560    	; 0x6a4 <init_TWI>
	
	sei();
 474:	78 94       	sei

	
	while(1)
	{
		PORTA ^= (1<<PORTA0);
 476:	c1 e0       	ldi	r28, 0x01	; 1
 478:	82 b1       	in	r24, 0x02	; 2
 47a:	8c 27       	eor	r24, r28
 47c:	82 b9       	out	0x02, r24	; 2
		
		USART_DecodeRxFIFO();
 47e:	e2 df       	rcall	.-60     	; 0x444 <USART_DecodeRxFIFO>
		USART_SendSensors();
 480:	48 df       	rcall	.-368    	; 0x312 <USART_SendSensors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	8f e3       	ldi	r24, 0x3F	; 63
 486:	98 e3       	ldi	r25, 0x38	; 56
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0x26>
 490:	00 c0       	rjmp	.+0      	; 0x492 <main+0x30>
 492:	00 00       	nop
 494:	f1 cf       	rjmp	.-30     	; 0x478 <main+0x16>

00000496 <USART_Bounce>:
	}
}

void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 496:	60 91 45 11 	lds	r22, 0x1145
 49a:	26 2f       	mov	r18, r22
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	64 f4       	brge	.+24     	; 0x4bc <USART_Bounce+0x26>
 4a4:	a6 e4       	ldi	r26, 0x46	; 70
 4a6:	b1 e1       	ldi	r27, 0x11	; 17
 4a8:	ee e4       	ldi	r30, 0x4E	; 78
 4aa:	f3 e1       	ldi	r31, 0x13	; 19
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		gTxPayload[i] = gRxBuffer[i+2];
 4b0:	4d 91       	ld	r20, X+
 4b2:	41 93       	st	Z+, r20
	}
}

void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	82 17       	cp	r24, r18
 4b8:	93 07       	cpc	r25, r19
 4ba:	d4 f3       	brlt	.-12     	; 0x4b0 <USART_Bounce+0x1a>
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
 4bc:	80 91 44 11 	lds	r24, 0x1144
 4c0:	c8 ce       	rjmp	.-624    	; 0x252 <USART_SendPacket>

000004c2 <__vector_20>:


// -- Interrupts -- 

ISR (USART0_RX_vect)
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	0b b6       	in	r0, 0x3b	; 59
 4ce:	0f 92       	push	r0
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
 4f4:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
 4f8:	2e 37       	cpi	r18, 0x7E	; 126
 4fa:	c9 f5       	brne	.+114    	; 0x56e <__vector_20+0xac>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
 4fc:	80 91 52 16 	lds	r24, 0x1652
 500:	90 91 53 16 	lds	r25, 0x1653
 504:	84 30       	cpi	r24, 0x04	; 4
 506:	91 05       	cpc	r25, r1
 508:	40 f4       	brcc	.+16     	; 0x51a <__vector_20+0x58>
 50a:	20 91 45 11 	lds	r18, 0x1145
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	2c 5f       	subi	r18, 0xFC	; 252
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	82 17       	cp	r24, r18
 516:	93 07       	cpc	r25, r19
 518:	29 f5       	brne	.+74     	; 0x564 <__vector_20+0xa2>
		{
			if(gInvertNextFlag)
 51a:	80 91 42 11 	lds	r24, 0x1142
 51e:	90 91 43 11 	lds	r25, 0x1143
 522:	89 2b       	or	r24, r25
 524:	21 f0       	breq	.+8      	; 0x52e <__vector_20+0x6c>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
 526:	10 92 43 11 	sts	0x1143, r1
 52a:	10 92 42 11 	sts	0x1142, r1
			}
			
			USART_Bounce();
 52e:	b3 df       	rcall	.-154    	; 0x496 <USART_Bounce>
 530:	04 e4       	ldi	r16, 0x44	; 68
 532:	11 e1       	ldi	r17, 0x11	; 17
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 534:	c0 e0       	ldi	r28, 0x00	; 0
 536:	d0 e0       	ldi	r29, 0x00	; 0
 538:	0f 2e       	mov	r0, r31
 53a:	f5 e4       	ldi	r31, 0x45	; 69
 53c:	ef 2e       	mov	r14, r31
 53e:	f1 e1       	ldi	r31, 0x11	; 17
 540:	ff 2e       	mov	r15, r31
 542:	f0 2d       	mov	r31, r0
			{
				FifoWrite(gRxFIFO, gRxBuffer[i]);
 544:	f8 01       	movw	r30, r16
 546:	61 91       	ld	r22, Z+
 548:	8f 01       	movw	r16, r30
 54a:	80 91 04 01 	lds	r24, 0x0104
 54e:	90 91 05 01 	lds	r25, 0x0105
 552:	c2 dd       	rcall	.-1148   	; 0xd8 <FifoWrite>
			}
			
			USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 554:	21 96       	adiw	r28, 0x01	; 1
 556:	f7 01       	movw	r30, r14
 558:	80 81       	ld	r24, Z
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 96       	adiw	r24, 0x02	; 2
 55e:	c8 17       	cp	r28, r24
 560:	d9 07       	cpc	r29, r25
 562:	84 f3       	brlt	.-32     	; 0x544 <__vector_20+0x82>
			{
				FifoWrite(gRxFIFO, gRxBuffer[i]);
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read 
 564:	10 92 53 16 	sts	0x1653, r1
 568:	10 92 52 16 	sts	0x1652, r1
 56c:	16 c0       	rjmp	.+44     	; 0x59a <__vector_20+0xd8>
		
	}else if(data == 0x7d)
 56e:	2d 37       	cpi	r18, 0x7D	; 125
 570:	39 f4       	brne	.+14     	; 0x580 <__vector_20+0xbe>
	{
		gInvertNextFlag = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	90 93 43 11 	sts	0x1143, r25
 57a:	80 93 42 11 	sts	0x1142, r24
 57e:	0d c0       	rjmp	.+26     	; 0x59a <__vector_20+0xd8>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
 580:	80 91 52 16 	lds	r24, 0x1652
 584:	90 91 53 16 	lds	r25, 0x1653
 588:	fc 01       	movw	r30, r24
 58a:	ec 5b       	subi	r30, 0xBC	; 188
 58c:	fe 4e       	sbci	r31, 0xEE	; 238
 58e:	20 83       	st	Z, r18
		++gRxBufferIndex;
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 53 16 	sts	0x1653, r25
 596:	80 93 52 16 	sts	0x1652, r24
	}
		
	
}
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	bf 91       	pop	r27
 5a4:	af 91       	pop	r26
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	7f 91       	pop	r23
 5ac:	6f 91       	pop	r22
 5ae:	5f 91       	pop	r21
 5b0:	4f 91       	pop	r20
 5b2:	3f 91       	pop	r19
 5b4:	2f 91       	pop	r18
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	0f 90       	pop	r0
 5c0:	0b be       	out	0x3b, r0	; 59
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_26>:
	reset_TWI();
}
*/

ISR(TWI_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	0b b6       	in	r0, 0x3b	; 59
 5d8:	0f 92       	push	r0
 5da:	2f 93       	push	r18
 5dc:	3f 93       	push	r19
 5de:	4f 93       	push	r20
 5e0:	5f 93       	push	r21
 5e2:	6f 93       	push	r22
 5e4:	7f 93       	push	r23
 5e6:	8f 93       	push	r24
 5e8:	9f 93       	push	r25
 5ea:	af 93       	push	r26
 5ec:	bf 93       	push	r27
 5ee:	ef 93       	push	r30
 5f0:	ff 93       	push	r31
	
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 5f2:	80 91 b9 00 	lds	r24, 0x00B9
 5f6:	88 7f       	andi	r24, 0xF8	; 248
 5f8:	80 36       	cpi	r24, 0x60	; 96
 5fa:	29 f0       	breq	.+10     	; 0x606 <__vector_26+0x3a>
 5fc:	80 91 b9 00 	lds	r24, 0x00B9
 600:	88 7f       	andi	r24, 0xF8	; 248
 602:	88 36       	cpi	r24, 0x68	; 104
 604:	21 f4       	brne	.+8      	; 0x60e <__vector_26+0x42>
	{
		instruction = true;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 4b 13 	sts	0x134B, r24
 60c:	33 c0       	rjmp	.+102    	; 0x674 <__vector_26+0xa8>
		
	}
	else if(CONTROL == DATA_SLAW)
 60e:	80 91 b9 00 	lds	r24, 0x00B9
 612:	88 7f       	andi	r24, 0xF8	; 248
 614:	80 38       	cpi	r24, 0x80	; 128
 616:	d1 f4       	brne	.+52     	; 0x64c <__vector_26+0x80>
	{
		if(instruction)
 618:	80 91 4b 13 	lds	r24, 0x134B
 61c:	88 23       	and	r24, r24
 61e:	41 f0       	breq	.+16     	; 0x630 <__vector_26+0x64>
		{
			current_instruction = get_data();
 620:	87 d0       	rcall	.+270    	; 0x730 <get_data>
 622:	90 93 4a 13 	sts	0x134A, r25
 626:	80 93 49 13 	sts	0x1349, r24
			instruction = false;
 62a:	10 92 4b 13 	sts	0x134B, r1
 62e:	22 c0       	rjmp	.+68     	; 0x674 <__vector_26+0xa8>
		}
		else
		{
			switch(current_instruction)
 630:	80 91 49 13 	lds	r24, 0x1349
 634:	90 91 4a 13 	lds	r25, 0x134A
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	91 05       	cpc	r25, r1
 63c:	19 f0       	breq	.+6      	; 0x644 <__vector_26+0x78>
 63e:	49 97       	sbiw	r24, 0x19	; 25
 640:	c9 f4       	brne	.+50     	; 0x674 <__vector_26+0xa8>
 642:	02 c0       	rjmp	.+4      	; 0x648 <__vector_26+0x7c>
			{
				case(I_SETTINGS):
				{
					get_settings_from_bus();
 644:	17 d1       	rcall	.+558    	; 0x874 <get_settings_from_bus>
					break;
 646:	16 c0       	rjmp	.+44     	; 0x674 <__vector_26+0xa8>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 648:	20 d1       	rcall	.+576    	; 0x88a <get_char_from_bus>
					break;
 64a:	14 c0       	rjmp	.+40     	; 0x674 <__vector_26+0xa8>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 64c:	80 91 b9 00 	lds	r24, 0x00B9
 650:	88 7f       	andi	r24, 0xF8	; 248
 652:	80 39       	cpi	r24, 0x90	; 144
 654:	19 f4       	brne	.+6      	; 0x65c <__vector_26+0x90>
	{
		//temp
		PORTA |= (1<<PORTA1); // turn on/off led
 656:	11 9a       	sbi	0x02, 1	; 2
		//temp
		
		get_sensor_from_bus();
 658:	2e d1       	rcall	.+604    	; 0x8b6 <get_sensor_from_bus>
 65a:	0c c0       	rjmp	.+24     	; 0x674 <__vector_26+0xa8>
	}
	else if (CONTROL == STOP)
 65c:	80 91 b9 00 	lds	r24, 0x00B9
 660:	88 7f       	andi	r24, 0xF8	; 248
 662:	80 3a       	cpi	r24, 0xA0	; 160
 664:	39 f4       	brne	.+14     	; 0x674 <__vector_26+0xa8>
	{
		switch(current_instruction)
 666:	80 91 49 13 	lds	r24, 0x1349
 66a:	90 91 4a 13 	lds	r25, 0x134A
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	09 f4       	brne	.+2      	; 0x674 <__vector_26+0xa8>
		{
			case(I_SETTINGS):
			{
				get_settings();
 672:	06 d1       	rcall	.+524    	; 0x880 <get_settings>
				//get_char(1);
				break;
			}
		}
	}
	reset_TWI();
 674:	4f d1       	rcall	.+670    	; 0x914 <reset_TWI>
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0b be       	out	0x3b, r0	; 59
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <set_twi_reciever_enable>:
	return servo;
}

void get_sweep_from_bus()
{
	sweep = get_data();
 69c:	85 e4       	ldi	r24, 0x45	; 69
 69e:	80 93 bc 00 	sts	0x00BC, r24
 6a2:	08 95       	ret

000006a4 <init_TWI>:
 6a4:	90 93 4d 13 	sts	0x134D, r25
 6a8:	80 93 4c 13 	sts	0x134C, r24
 6ac:	80 34       	cpi	r24, 0x40	; 64
 6ae:	91 05       	cpc	r25, r1
 6b0:	81 f0       	breq	.+32     	; 0x6d2 <init_TWI+0x2e>
 6b2:	80 38       	cpi	r24, 0x80	; 128
 6b4:	91 05       	cpc	r25, r1
 6b6:	19 f0       	breq	.+6      	; 0x6be <init_TWI+0x1a>
 6b8:	80 97       	sbiw	r24, 0x20	; 32
 6ba:	d1 f4       	brne	.+52     	; 0x6f0 <init_TWI+0x4c>
 6bc:	12 c0       	rjmp	.+36     	; 0x6e2 <init_TWI+0x3e>
 6be:	83 e0       	ldi	r24, 0x03	; 3
 6c0:	88 b9       	out	0x08, r24	; 8
 6c2:	ec df       	rcall	.-40     	; 0x69c <set_twi_reciever_enable>
 6c4:	8b e1       	ldi	r24, 0x1B	; 27
 6c6:	80 93 b8 00 	sts	0x00B8, r24
 6ca:	81 e8       	ldi	r24, 0x81	; 129
 6cc:	80 93 ba 00 	sts	0x00BA, r24
 6d0:	08 95       	ret
 6d2:	87 e1       	ldi	r24, 0x17	; 23
 6d4:	80 93 b8 00 	sts	0x00B8, r24
 6d8:	e1 df       	rcall	.-62     	; 0x69c <set_twi_reciever_enable>
 6da:	80 e4       	ldi	r24, 0x40	; 64
 6dc:	80 93 ba 00 	sts	0x00BA, r24
 6e0:	08 95       	ret
 6e2:	87 e1       	ldi	r24, 0x17	; 23
 6e4:	80 93 b8 00 	sts	0x00B8, r24
 6e8:	d9 df       	rcall	.-78     	; 0x69c <set_twi_reciever_enable>
 6ea:	81 e2       	ldi	r24, 0x21	; 33
 6ec:	80 93 ba 00 	sts	0x00BA, r24
 6f0:	08 95       	ret

000006f2 <clear_int>:
 6f2:	81 ec       	ldi	r24, 0xC1	; 193
 6f4:	80 93 bc 00 	sts	0x00BC, r24
 6f8:	08 95       	ret

000006fa <start_bus>:
 6fa:	2f ef       	ldi	r18, 0xFF	; 255
 6fc:	8f e9       	ldi	r24, 0x9F	; 159
 6fe:	95 e0       	ldi	r25, 0x05	; 5
 700:	21 50       	subi	r18, 0x01	; 1
 702:	80 40       	sbci	r24, 0x00	; 0
 704:	90 40       	sbci	r25, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <start_bus+0x6>
 708:	00 c0       	rjmp	.+0      	; 0x70a <start_bus+0x10>
 70a:	00 00       	nop
 70c:	84 ea       	ldi	r24, 0xA4	; 164
 70e:	80 93 bc 00 	sts	0x00BC, r24
 712:	08 95       	ret

00000714 <stop_bus>:
 714:	85 ed       	ldi	r24, 0xD5	; 213
 716:	80 93 bc 00 	sts	0x00BC, r24
 71a:	08 95       	ret

0000071c <Error>:
 71c:	80 91 b9 00 	lds	r24, 0x00B9
 720:	88 7f       	andi	r24, 0xF8	; 248
 722:	88 33       	cpi	r24, 0x38	; 56
 724:	09 f0       	breq	.+2      	; 0x728 <Error+0xc>
 726:	f6 cf       	rjmp	.-20     	; 0x714 <stop_bus>
 728:	e4 cf       	rjmp	.-56     	; 0x6f2 <clear_int>

0000072a <set_data>:
 72a:	80 93 bb 00 	sts	0x00BB, r24
 72e:	08 95       	ret

00000730 <get_data>:
 730:	80 91 bb 00 	lds	r24, 0x00BB
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	08 95       	ret

00000738 <send_bus>:
 738:	84 e8       	ldi	r24, 0x84	; 132
 73a:	80 93 bc 00 	sts	0x00BC, r24
 73e:	08 95       	ret

00000740 <wait_for_bus>:
 740:	ec eb       	ldi	r30, 0xBC	; 188
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	88 23       	and	r24, r24
 748:	ec f7       	brge	.-6      	; 0x744 <wait_for_bus+0x4>
 74a:	08 95       	ret

0000074c <send_string_fixed_length>:
 74c:	ef 92       	push	r14
 74e:	ff 92       	push	r15
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	ec 01       	movw	r28, r24
 75a:	e6 2e       	mov	r14, r22
 75c:	f7 2e       	mov	r15, r23
 75e:	8a 01       	movw	r16, r20
 760:	cc df       	rcall	.-104    	; 0x6fa <start_bus>
 762:	ee df       	rcall	.-36     	; 0x740 <wait_for_bus>
 764:	80 91 b9 00 	lds	r24, 0x00B9
 768:	88 7f       	andi	r24, 0xF8	; 248
 76a:	88 30       	cpi	r24, 0x08	; 8
 76c:	19 f0       	breq	.+6      	; 0x774 <send_string_fixed_length+0x28>
 76e:	d6 df       	rcall	.-84     	; 0x71c <Error>
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	2b c0       	rjmp	.+86     	; 0x7ca <send_string_fixed_length+0x7e>
 774:	ce 01       	movw	r24, r28
 776:	d9 df       	rcall	.-78     	; 0x72a <set_data>
 778:	df df       	rcall	.-66     	; 0x738 <send_bus>
 77a:	e2 df       	rcall	.-60     	; 0x740 <wait_for_bus>
 77c:	80 91 b9 00 	lds	r24, 0x00B9
 780:	88 7f       	andi	r24, 0xF8	; 248
 782:	88 31       	cpi	r24, 0x18	; 24
 784:	19 f0       	breq	.+6      	; 0x78c <send_string_fixed_length+0x40>
 786:	ca df       	rcall	.-108    	; 0x71c <Error>
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	1f c0       	rjmp	.+62     	; 0x7ca <send_string_fixed_length+0x7e>
 78c:	89 e1       	ldi	r24, 0x19	; 25
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	cc df       	rcall	.-104    	; 0x72a <set_data>
 792:	d2 df       	rcall	.-92     	; 0x738 <send_bus>
 794:	d5 df       	rcall	.-86     	; 0x740 <wait_for_bus>
 796:	80 91 b9 00 	lds	r24, 0x00B9
 79a:	88 7f       	andi	r24, 0xF8	; 248
 79c:	88 32       	cpi	r24, 0x28	; 40
 79e:	21 f4       	brne	.+8      	; 0x7a8 <send_string_fixed_length+0x5c>
 7a0:	10 16       	cp	r1, r16
 7a2:	11 06       	cpc	r1, r17
 7a4:	24 f0       	brlt	.+8      	; 0x7ae <send_string_fixed_length+0x62>
 7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <send_string_fixed_length+0x7a>
 7a8:	b9 df       	rcall	.-142    	; 0x71c <Error>
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	0e c0       	rjmp	.+28     	; 0x7ca <send_string_fixed_length+0x7e>
 7ae:	ce 2d       	mov	r28, r14
 7b0:	df 2d       	mov	r29, r15
 7b2:	0c 0f       	add	r16, r28
 7b4:	1d 1f       	adc	r17, r29
 7b6:	89 91       	ld	r24, Y+
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	b7 df       	rcall	.-146    	; 0x72a <set_data>
 7bc:	bd df       	rcall	.-134    	; 0x738 <send_bus>
 7be:	c0 df       	rcall	.-128    	; 0x740 <wait_for_bus>
 7c0:	c0 17       	cp	r28, r16
 7c2:	d1 07       	cpc	r29, r17
 7c4:	c1 f7       	brne	.-16     	; 0x7b6 <send_string_fixed_length+0x6a>
 7c6:	a6 df       	rcall	.-180    	; 0x714 <stop_bus>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	08 95       	ret

000007d8 <send_string>:
 7d8:	ef 92       	push	r14
 7da:	ff 92       	push	r15
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	ec 01       	movw	r28, r24
 7e6:	e6 2e       	mov	r14, r22
 7e8:	f7 2e       	mov	r15, r23
 7ea:	87 df       	rcall	.-242    	; 0x6fa <start_bus>
 7ec:	a9 df       	rcall	.-174    	; 0x740 <wait_for_bus>
 7ee:	80 91 b9 00 	lds	r24, 0x00B9
 7f2:	88 7f       	andi	r24, 0xF8	; 248
 7f4:	88 30       	cpi	r24, 0x08	; 8
 7f6:	19 f0       	breq	.+6      	; 0x7fe <send_string+0x26>
 7f8:	91 df       	rcall	.-222    	; 0x71c <Error>
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	34 c0       	rjmp	.+104    	; 0x866 <send_string+0x8e>
 7fe:	ce 01       	movw	r24, r28
 800:	94 df       	rcall	.-216    	; 0x72a <set_data>
 802:	9a df       	rcall	.-204    	; 0x738 <send_bus>
 804:	9d df       	rcall	.-198    	; 0x740 <wait_for_bus>
 806:	80 91 b9 00 	lds	r24, 0x00B9
 80a:	88 7f       	andi	r24, 0xF8	; 248
 80c:	88 31       	cpi	r24, 0x18	; 24
 80e:	19 f0       	breq	.+6      	; 0x816 <send_string+0x3e>
 810:	85 df       	rcall	.-246    	; 0x71c <Error>
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	28 c0       	rjmp	.+80     	; 0x866 <send_string+0x8e>
 816:	89 e1       	ldi	r24, 0x19	; 25
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	87 df       	rcall	.-242    	; 0x72a <set_data>
 81c:	8d df       	rcall	.-230    	; 0x738 <send_bus>
 81e:	90 df       	rcall	.-224    	; 0x740 <wait_for_bus>
 820:	80 91 b9 00 	lds	r24, 0x00B9
 824:	88 7f       	andi	r24, 0xF8	; 248
 826:	88 32       	cpi	r24, 0x28	; 40
 828:	29 f4       	brne	.+10     	; 0x834 <send_string+0x5c>
 82a:	0e 2d       	mov	r16, r14
 82c:	1f 2d       	mov	r17, r15
 82e:	c0 e0       	ldi	r28, 0x00	; 0
 830:	d0 e0       	ldi	r29, 0x00	; 0
 832:	0b c0       	rjmp	.+22     	; 0x84a <send_string+0x72>
 834:	73 df       	rcall	.-282    	; 0x71c <Error>
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	16 c0       	rjmp	.+44     	; 0x866 <send_string+0x8e>
 83a:	f8 01       	movw	r30, r16
 83c:	81 91       	ld	r24, Z+
 83e:	8f 01       	movw	r16, r30
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	73 df       	rcall	.-282    	; 0x72a <set_data>
 844:	79 df       	rcall	.-270    	; 0x738 <send_bus>
 846:	7c df       	rcall	.-264    	; 0x740 <wait_for_bus>
 848:	21 96       	adiw	r28, 0x01	; 1
 84a:	ee 2d       	mov	r30, r14
 84c:	ff 2d       	mov	r31, r15
 84e:	df 01       	movw	r26, r30
 850:	0d 90       	ld	r0, X+
 852:	00 20       	and	r0, r0
 854:	e9 f7       	brne	.-6      	; 0x850 <send_string+0x78>
 856:	11 97       	sbiw	r26, 0x01	; 1
 858:	ae 1b       	sub	r26, r30
 85a:	bf 0b       	sbc	r27, r31
 85c:	ca 17       	cp	r28, r26
 85e:	db 07       	cpc	r29, r27
 860:	60 f3       	brcs	.-40     	; 0x83a <send_string+0x62>
 862:	58 df       	rcall	.-336    	; 0x714 <stop_bus>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	08 95       	ret

00000874 <get_settings_from_bus>:
 874:	5d df       	rcall	.-326    	; 0x730 <get_data>
 876:	90 93 55 16 	sts	0x1655, r25
 87a:	80 93 54 16 	sts	0x1654, r24
 87e:	08 95       	ret

00000880 <get_settings>:
 880:	80 91 54 16 	lds	r24, 0x1654
 884:	90 91 55 16 	lds	r25, 0x1655
 888:	08 95       	ret

0000088a <get_char_from_bus>:
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	c0 91 6b 17 	lds	r28, 0x176B
 892:	d0 91 6c 17 	lds	r29, 0x176C
 896:	4c df       	rcall	.-360    	; 0x730 <get_data>
 898:	c4 5a       	subi	r28, 0xA4	; 164
 89a:	d9 4e       	sbci	r29, 0xE9	; 233
 89c:	88 83       	st	Y, r24
 89e:	80 91 6b 17 	lds	r24, 0x176B
 8a2:	90 91 6c 17 	lds	r25, 0x176C
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	90 93 6c 17 	sts	0x176C, r25
 8ac:	80 93 6b 17 	sts	0x176B, r24
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	08 95       	ret

000008b6 <get_sensor_from_bus>:
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	c0 91 71 17 	lds	r28, 0x1771
 8be:	d0 91 72 17 	lds	r29, 0x1772
 8c2:	c7 30       	cpi	r28, 0x07	; 7
 8c4:	d1 05       	cpc	r29, r1
 8c6:	99 f4       	brne	.+38     	; 0x8ee <get_sensor_from_bus+0x38>
 8c8:	ed e5       	ldi	r30, 0x5D	; 93
 8ca:	f7 e1       	ldi	r31, 0x17	; 23
 8cc:	a3 e7       	ldi	r26, 0x73	; 115
 8ce:	b7 e1       	ldi	r27, 0x17	; 23
 8d0:	2b e6       	ldi	r18, 0x6B	; 107
 8d2:	37 e1       	ldi	r19, 0x17	; 23
 8d4:	81 91       	ld	r24, Z+
 8d6:	91 91       	ld	r25, Z+
 8d8:	8d 93       	st	X+, r24
 8da:	9d 93       	st	X+, r25
 8dc:	e2 17       	cp	r30, r18
 8de:	f3 07       	cpc	r31, r19
 8e0:	c9 f7       	brne	.-14     	; 0x8d4 <get_sensor_from_bus+0x1e>
 8e2:	26 df       	rcall	.-436    	; 0x730 <get_data>
 8e4:	90 93 6e 17 	sts	0x176E, r25
 8e8:	80 93 6d 17 	sts	0x176D, r24
 8ec:	10 c0       	rjmp	.+32     	; 0x90e <get_sensor_from_bus+0x58>
 8ee:	20 df       	rcall	.-448    	; 0x730 <get_data>
 8f0:	cc 0f       	add	r28, r28
 8f2:	dd 1f       	adc	r29, r29
 8f4:	c3 5a       	subi	r28, 0xA3	; 163
 8f6:	d8 4e       	sbci	r29, 0xE8	; 232
 8f8:	99 83       	std	Y+1, r25	; 0x01
 8fa:	88 83       	st	Y, r24
 8fc:	80 91 71 17 	lds	r24, 0x1771
 900:	90 91 72 17 	lds	r25, 0x1772
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	90 93 72 17 	sts	0x1772, r25
 90a:	80 93 71 17 	sts	0x1771, r24
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <reset_TWI>:
}

void reset_TWI()
{
	current_command = 0;
 914:	10 92 5c 17 	sts	0x175C, r1
 918:	10 92 5b 17 	sts	0x175B, r1
	sensor = 0;
 91c:	10 92 72 17 	sts	0x1772, r1
 920:	10 92 71 17 	sts	0x1771, r1
	message_counter = 0;
 924:	10 92 6c 17 	sts	0x176C, r1
 928:	10 92 6b 17 	sts	0x176B, r1
	TWCR |= (1<<TWINT) | (1<<TWEA);
 92c:	ec eb       	ldi	r30, 0xBC	; 188
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	80 6c       	ori	r24, 0xC0	; 192
 934:	80 83       	st	Z, r24
 936:	08 95       	ret

00000938 <__divmodhi4>:
 938:	97 fb       	bst	r25, 7
 93a:	07 2e       	mov	r0, r23
 93c:	16 f4       	brtc	.+4      	; 0x942 <__divmodhi4+0xa>
 93e:	00 94       	com	r0
 940:	06 d0       	rcall	.+12     	; 0x94e <__divmodhi4_neg1>
 942:	77 fd       	sbrc	r23, 7
 944:	08 d0       	rcall	.+16     	; 0x956 <__divmodhi4_neg2>
 946:	0b d0       	rcall	.+22     	; 0x95e <__udivmodhi4>
 948:	07 fc       	sbrc	r0, 7
 94a:	05 d0       	rcall	.+10     	; 0x956 <__divmodhi4_neg2>
 94c:	3e f4       	brtc	.+14     	; 0x95c <__divmodhi4_exit>

0000094e <__divmodhi4_neg1>:
 94e:	90 95       	com	r25
 950:	81 95       	neg	r24
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	08 95       	ret

00000956 <__divmodhi4_neg2>:
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255

0000095c <__divmodhi4_exit>:
 95c:	08 95       	ret

0000095e <__udivmodhi4>:
 95e:	aa 1b       	sub	r26, r26
 960:	bb 1b       	sub	r27, r27
 962:	51 e1       	ldi	r21, 0x11	; 17
 964:	07 c0       	rjmp	.+14     	; 0x974 <__udivmodhi4_ep>

00000966 <__udivmodhi4_loop>:
 966:	aa 1f       	adc	r26, r26
 968:	bb 1f       	adc	r27, r27
 96a:	a6 17       	cp	r26, r22
 96c:	b7 07       	cpc	r27, r23
 96e:	10 f0       	brcs	.+4      	; 0x974 <__udivmodhi4_ep>
 970:	a6 1b       	sub	r26, r22
 972:	b7 0b       	sbc	r27, r23

00000974 <__udivmodhi4_ep>:
 974:	88 1f       	adc	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	5a 95       	dec	r21
 97a:	a9 f7       	brne	.-22     	; 0x966 <__udivmodhi4_loop>
 97c:	80 95       	com	r24
 97e:	90 95       	com	r25
 980:	bc 01       	movw	r22, r24
 982:	cd 01       	movw	r24, r26
 984:	08 95       	ret

00000986 <do_rand>:
 986:	8f 92       	push	r8
 988:	9f 92       	push	r9
 98a:	af 92       	push	r10
 98c:	bf 92       	push	r11
 98e:	cf 92       	push	r12
 990:	df 92       	push	r13
 992:	ef 92       	push	r14
 994:	ff 92       	push	r15
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	ec 01       	movw	r28, r24
 99c:	68 81       	ld	r22, Y
 99e:	79 81       	ldd	r23, Y+1	; 0x01
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	9b 81       	ldd	r25, Y+3	; 0x03
 9a4:	61 15       	cp	r22, r1
 9a6:	71 05       	cpc	r23, r1
 9a8:	81 05       	cpc	r24, r1
 9aa:	91 05       	cpc	r25, r1
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <do_rand+0x30>
 9ae:	64 e2       	ldi	r22, 0x24	; 36
 9b0:	79 ed       	ldi	r23, 0xD9	; 217
 9b2:	8b e5       	ldi	r24, 0x5B	; 91
 9b4:	97 e0       	ldi	r25, 0x07	; 7
 9b6:	2d e1       	ldi	r18, 0x1D	; 29
 9b8:	33 ef       	ldi	r19, 0xF3	; 243
 9ba:	41 e0       	ldi	r20, 0x01	; 1
 9bc:	50 e0       	ldi	r21, 0x00	; 0
 9be:	3d d0       	rcall	.+122    	; 0xa3a <__divmodsi4>
 9c0:	49 01       	movw	r8, r18
 9c2:	5a 01       	movw	r10, r20
 9c4:	9b 01       	movw	r18, r22
 9c6:	ac 01       	movw	r20, r24
 9c8:	a7 ea       	ldi	r26, 0xA7	; 167
 9ca:	b1 e4       	ldi	r27, 0x41	; 65
 9cc:	51 d0       	rcall	.+162    	; 0xa70 <__muluhisi3>
 9ce:	6b 01       	movw	r12, r22
 9d0:	7c 01       	movw	r14, r24
 9d2:	ac ee       	ldi	r26, 0xEC	; 236
 9d4:	b4 ef       	ldi	r27, 0xF4	; 244
 9d6:	a5 01       	movw	r20, r10
 9d8:	94 01       	movw	r18, r8
 9da:	56 d0       	rcall	.+172    	; 0xa88 <__mulohisi3>
 9dc:	c6 0e       	add	r12, r22
 9de:	d7 1e       	adc	r13, r23
 9e0:	e8 1e       	adc	r14, r24
 9e2:	f9 1e       	adc	r15, r25
 9e4:	f7 fe       	sbrs	r15, 7
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <do_rand+0x6e>
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	c8 1a       	sub	r12, r24
 9ec:	d1 08       	sbc	r13, r1
 9ee:	e1 08       	sbc	r14, r1
 9f0:	80 e8       	ldi	r24, 0x80	; 128
 9f2:	f8 0a       	sbc	r15, r24
 9f4:	c8 82       	st	Y, r12
 9f6:	d9 82       	std	Y+1, r13	; 0x01
 9f8:	ea 82       	std	Y+2, r14	; 0x02
 9fa:	fb 82       	std	Y+3, r15	; 0x03
 9fc:	e8 94       	clt
 9fe:	d7 f8       	bld	r13, 7
 a00:	ee 24       	eor	r14, r14
 a02:	ff 24       	eor	r15, r15
 a04:	c6 01       	movw	r24, r12
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	ff 90       	pop	r15
 a0c:	ef 90       	pop	r14
 a0e:	df 90       	pop	r13
 a10:	cf 90       	pop	r12
 a12:	bf 90       	pop	r11
 a14:	af 90       	pop	r10
 a16:	9f 90       	pop	r9
 a18:	8f 90       	pop	r8
 a1a:	08 95       	ret

00000a1c <rand_r>:
 a1c:	b4 cf       	rjmp	.-152    	; 0x986 <do_rand>

00000a1e <rand>:
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	b1 cf       	rjmp	.-158    	; 0x986 <do_rand>

00000a24 <srand>:
 a24:	a0 e0       	ldi	r26, 0x00	; 0
 a26:	b0 e0       	ldi	r27, 0x00	; 0
 a28:	80 93 00 01 	sts	0x0100, r24
 a2c:	90 93 01 01 	sts	0x0101, r25
 a30:	a0 93 02 01 	sts	0x0102, r26
 a34:	b0 93 03 01 	sts	0x0103, r27
 a38:	08 95       	ret

00000a3a <__divmodsi4>:
 a3a:	05 2e       	mov	r0, r21
 a3c:	97 fb       	bst	r25, 7
 a3e:	16 f4       	brtc	.+4      	; 0xa44 <__divmodsi4+0xa>
 a40:	00 94       	com	r0
 a42:	06 d0       	rcall	.+12     	; 0xa50 <__divmodsi4_neg1>
 a44:	57 fd       	sbrc	r21, 7
 a46:	0c d0       	rcall	.+24     	; 0xa60 <__divmodsi4_neg2>
 a48:	23 d0       	rcall	.+70     	; 0xa90 <__udivmodsi4>
 a4a:	07 fc       	sbrc	r0, 7
 a4c:	09 d0       	rcall	.+18     	; 0xa60 <__divmodsi4_neg2>
 a4e:	7e f4       	brtc	.+30     	; 0xa6e <__divmodsi4_exit>

00000a50 <__divmodsi4_neg1>:
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__divmodsi4_neg2>:
 a60:	50 95       	com	r21
 a62:	40 95       	com	r20
 a64:	30 95       	com	r19
 a66:	21 95       	neg	r18
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	4f 4f       	sbci	r20, 0xFF	; 255
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255

00000a6e <__divmodsi4_exit>:
 a6e:	08 95       	ret

00000a70 <__muluhisi3>:
 a70:	31 d0       	rcall	.+98     	; 0xad4 <__umulhisi3>
 a72:	a5 9f       	mul	r26, r21
 a74:	90 0d       	add	r25, r0
 a76:	b4 9f       	mul	r27, r20
 a78:	90 0d       	add	r25, r0
 a7a:	a4 9f       	mul	r26, r20
 a7c:	80 0d       	add	r24, r0
 a7e:	91 1d       	adc	r25, r1
 a80:	11 24       	eor	r1, r1
 a82:	08 95       	ret

00000a84 <__mulshisi3>:
 a84:	b7 ff       	sbrs	r27, 7
 a86:	f4 cf       	rjmp	.-24     	; 0xa70 <__muluhisi3>

00000a88 <__mulohisi3>:
 a88:	f3 df       	rcall	.-26     	; 0xa70 <__muluhisi3>
 a8a:	82 1b       	sub	r24, r18
 a8c:	93 0b       	sbc	r25, r19
 a8e:	08 95       	ret

00000a90 <__udivmodsi4>:
 a90:	a1 e2       	ldi	r26, 0x21	; 33
 a92:	1a 2e       	mov	r1, r26
 a94:	aa 1b       	sub	r26, r26
 a96:	bb 1b       	sub	r27, r27
 a98:	fd 01       	movw	r30, r26
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <__udivmodsi4_ep>

00000a9c <__udivmodsi4_loop>:
 a9c:	aa 1f       	adc	r26, r26
 a9e:	bb 1f       	adc	r27, r27
 aa0:	ee 1f       	adc	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	a2 17       	cp	r26, r18
 aa6:	b3 07       	cpc	r27, r19
 aa8:	e4 07       	cpc	r30, r20
 aaa:	f5 07       	cpc	r31, r21
 aac:	20 f0       	brcs	.+8      	; 0xab6 <__udivmodsi4_ep>
 aae:	a2 1b       	sub	r26, r18
 ab0:	b3 0b       	sbc	r27, r19
 ab2:	e4 0b       	sbc	r30, r20
 ab4:	f5 0b       	sbc	r31, r21

00000ab6 <__udivmodsi4_ep>:
 ab6:	66 1f       	adc	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	88 1f       	adc	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	1a 94       	dec	r1
 ac0:	69 f7       	brne	.-38     	; 0xa9c <__udivmodsi4_loop>
 ac2:	60 95       	com	r22
 ac4:	70 95       	com	r23
 ac6:	80 95       	com	r24
 ac8:	90 95       	com	r25
 aca:	9b 01       	movw	r18, r22
 acc:	ac 01       	movw	r20, r24
 ace:	bd 01       	movw	r22, r26
 ad0:	cf 01       	movw	r24, r30
 ad2:	08 95       	ret

00000ad4 <__umulhisi3>:
 ad4:	a2 9f       	mul	r26, r18
 ad6:	b0 01       	movw	r22, r0
 ad8:	b3 9f       	mul	r27, r19
 ada:	c0 01       	movw	r24, r0
 adc:	a3 9f       	mul	r26, r19
 ade:	01 d0       	rcall	.+2      	; 0xae2 <__umulhisi3+0xe>
 ae0:	b2 9f       	mul	r27, r18
 ae2:	70 0d       	add	r23, r0
 ae4:	81 1d       	adc	r24, r1
 ae6:	11 24       	eor	r1, r1
 ae8:	91 1d       	adc	r25, r1
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
