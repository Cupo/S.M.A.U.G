
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000010ba  00800100  00000a5c  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  008011ba  008011ba  00001baa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000230f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000019f5  00000000  00000000  0000253e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000731  00000000  00000000  00003f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00004664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000600  00000000  00000000  00005910  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000548  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000121c  00000000  00000000  00006458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  00007674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7e c4       	rjmp	.+2300   	; 0x94e <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	a4 c0       	rjmp	.+328    	; 0x1b2 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e1       	ldi	r17, 0x11	; 17
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 3b       	cpi	r26, 0xBA	; 186
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e1       	ldi	r18, 0x17	; 23
  b4:	aa eb       	ldi	r26, 0xBA	; 186
  b6:	b1 e1       	ldi	r27, 0x11	; 17
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 3f       	cpi	r26, 0xFB	; 251
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	51 d0       	rcall	.+162    	; 0x166 <main>
  c4:	c9 c4       	rjmp	.+2450   	; 0xa58 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
  c8:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
  ca:	90 81       	ld	r25, Z
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	22 81       	ldd	r18, Z+2	; 0x02
  d2:	82 1b       	sub	r24, r18
};
  d4:	89 23       	and	r24, r25
  d6:	08 95       	ret

000000d8 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
  e2:	f2 df       	rcall	.-28     	; 0xc8 <FifoDataLength>
  e4:	28 81       	ld	r18, Y
  e6:	39 81       	ldd	r19, Y+1	; 0x01
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	82 17       	cp	r24, r18
  f0:	93 07       	cpc	r25, r19
  f2:	69 f0       	breq	.+26     	; 0x10e <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	9d 81       	ldd	r25, Y+5	; 0x05
  f8:	fe 01       	movw	r30, r28
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	28 23       	and	r18, r24
 104:	39 23       	and	r19, r25
 106:	3d 83       	std	Y+5, r19	; 0x05
 108:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
 124:	d1 df       	rcall	.-94     	; 0xc8 <FifoDataLength>
 126:	88 23       	and	r24, r24
 128:	a1 f0       	breq	.+40     	; 0x152 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
 12a:	ea 81       	ldd	r30, Y+2	; 0x02
 12c:	fb 81       	ldd	r31, Y+3	; 0x03
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	f8 01       	movw	r30, r16
 136:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
 138:	28 81       	ld	r18, Y
 13a:	39 81       	ldd	r19, Y+1	; 0x01
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	31 09       	sbc	r19, r1
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	9b 81       	ldd	r25, Y+3	; 0x03
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	82 23       	and	r24, r18
 148:	93 23       	and	r25, r19
 14a:	9b 83       	std	Y+3, r25	; 0x03
 14c:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	01 c0       	rjmp	.+2      	; 0x154 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <init>:
// --  END MAIN --


void init()
{
	DDRA |= (1<<PORTA0|1<<PORTA1); //set status diodes to outputs
 15e:	81 b1       	in	r24, 0x01	; 1
 160:	83 60       	ori	r24, 0x03	; 3
 162:	81 b9       	out	0x01, r24	; 1
 164:	08 95       	ret

00000166 <main>:

// -- MAIN --

int main(void)
{
	init();
 166:	fb df       	rcall	.-10     	; 0x15e <init>
	USART_init();
 168:	11 d2       	rcall	.+1058   	; 0x58c <USART_init>
	
	// init TWI
	my_adress = C_ADRESS;
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 c2 11 	sts	0x11C2, r25
 172:	80 93 c1 11 	sts	0x11C1, r24
	init_TWI(my_adress);
 176:	89 d0       	rcall	.+274    	; 0x28a <init_TWI>
	
	sei();
 178:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9c e1       	ldi	r25, 0x1C	; 28
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x1a>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x24>
 18a:	00 00       	nop
	_delay_ms(500);
	while(1)
	{
		PORTA ^= (1<<PORTA0);
 18c:	c1 e0       	ldi	r28, 0x01	; 1
 18e:	82 b1       	in	r24, 0x02	; 2
 190:	8c 27       	eor	r24, r28
 192:	82 b9       	out	0x02, r24	; 2
		
		
		USART_DecodeRxFIFO();
 194:	b4 d3       	rcall	.+1896   	; 0x8fe <USART_DecodeRxFIFO>
		USART_SendSensors();
 196:	cc d2       	rcall	.+1432   	; 0x730 <USART_SendSensors>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	8f e7       	ldi	r24, 0x7F	; 127
 19c:	90 e7       	ldi	r25, 0x70	; 112
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x38>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x42>
 1a8:	00 00       	nop
		
		_delay_ms(2000);
		send_status(S_ADRESS);
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	b9 d0       	rcall	.+370    	; 0x322 <send_status>
 1b0:	ee cf       	rjmp	.-36     	; 0x18e <main+0x28>

000001b2 <__vector_26>:
// -- Interrupts -- 



ISR(TWI_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0b b6       	in	r0, 0x3b	; 59
 1be:	0f 92       	push	r0
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	cli();
 1d8:	f8 94       	cli
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 1da:	80 91 b9 00 	lds	r24, 0x00B9
 1de:	88 7f       	andi	r24, 0xF8	; 248
 1e0:	80 36       	cpi	r24, 0x60	; 96
 1e2:	29 f0       	breq	.+10     	; 0x1ee <__vector_26+0x3c>
 1e4:	80 91 b9 00 	lds	r24, 0x00B9
 1e8:	88 7f       	andi	r24, 0xF8	; 248
 1ea:	88 36       	cpi	r24, 0x68	; 104
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <__vector_26+0x44>
	{
		instruction = true;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 c0 11 	sts	0x11C0, r24
 1f4:	31 c0       	rjmp	.+98     	; 0x258 <__vector_26+0xa6>
		
	}
	else if(CONTROL == DATA_SLAW)
 1f6:	80 91 b9 00 	lds	r24, 0x00B9
 1fa:	88 7f       	andi	r24, 0xF8	; 248
 1fc:	80 38       	cpi	r24, 0x80	; 128
 1fe:	d1 f4       	brne	.+52     	; 0x234 <__vector_26+0x82>
	{
		if(instruction)
 200:	80 91 c0 11 	lds	r24, 0x11C0
 204:	88 23       	and	r24, r24
 206:	41 f0       	breq	.+16     	; 0x218 <__vector_26+0x66>
		{
			current_instruction = get_data();
 208:	7e d0       	rcall	.+252    	; 0x306 <get_data>
 20a:	90 93 bf 11 	sts	0x11BF, r25
 20e:	80 93 be 11 	sts	0x11BE, r24
			instruction = false;
 212:	10 92 c0 11 	sts	0x11C0, r1
 216:	20 c0       	rjmp	.+64     	; 0x258 <__vector_26+0xa6>
		}
		else
		{
			switch(current_instruction)
 218:	80 91 be 11 	lds	r24, 0x11BE
 21c:	90 91 bf 11 	lds	r25, 0x11BF
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	19 f0       	breq	.+6      	; 0x22c <__vector_26+0x7a>
 226:	49 97       	sbiw	r24, 0x19	; 25
 228:	b9 f4       	brne	.+46     	; 0x258 <__vector_26+0xa6>
 22a:	02 c0       	rjmp	.+4      	; 0x230 <__vector_26+0x7e>
			{
				case(I_SETTINGS):
				{
					get_settings_from_bus();
 22c:	40 d1       	rcall	.+640    	; 0x4ae <get_settings_from_bus>
					break;
 22e:	14 c0       	rjmp	.+40     	; 0x258 <__vector_26+0xa6>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 230:	44 d1       	rcall	.+648    	; 0x4ba <get_char_from_bus>
					break;
 232:	12 c0       	rjmp	.+36     	; 0x258 <__vector_26+0xa6>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 234:	80 91 b9 00 	lds	r24, 0x00B9
 238:	88 7f       	andi	r24, 0xF8	; 248
 23a:	80 39       	cpi	r24, 0x90	; 144
 23c:	19 f4       	brne	.+6      	; 0x244 <__vector_26+0x92>
	{
		//temp
		PORTA |= (1<<PORTA1); // turn on/off led
 23e:	11 9a       	sbi	0x02, 1	; 2
		//temp
		
		get_sensor_from_bus();
 240:	56 d1       	rcall	.+684    	; 0x4ee <get_sensor_from_bus>
 242:	0a c0       	rjmp	.+20     	; 0x258 <__vector_26+0xa6>
	}
	else if (CONTROL == STOP)
 244:	80 91 b9 00 	lds	r24, 0x00B9
 248:	88 7f       	andi	r24, 0xF8	; 248
 24a:	80 3a       	cpi	r24, 0xA0	; 160
 24c:	29 f4       	brne	.+10     	; 0x258 <__vector_26+0xa6>
	{
		PORTA ^= (1<<PORTA1);
 24e:	92 b1       	in	r25, 0x02	; 2
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	89 27       	eor	r24, r25
 254:	82 b9       	out	0x02, r24	; 2
			{
				//get_char(1);
				break;
			}
		}
		stop_twi();
 256:	87 d1       	rcall	.+782    	; 0x566 <stop_twi>
	}
	reset_TWI();
 258:	93 d1       	rcall	.+806    	; 0x580 <reset_TWI>
	sei();
 25a:	78 94       	sei
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0b be       	out	0x3b, r0	; 59
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <set_twi_reciever_enable>:
}

int get_sweep()
{
	return sweep;
}
 282:	85 e4       	ldi	r24, 0x45	; 69
 284:	80 93 bc 00 	sts	0x00BC, r24
 288:	08 95       	ret

0000028a <init_TWI>:
 28a:	20 9a       	sbi	0x04, 0	; 4
 28c:	90 93 c2 11 	sts	0x11C2, r25
 290:	80 93 c1 11 	sts	0x11C1, r24
 294:	80 34       	cpi	r24, 0x40	; 64
 296:	91 05       	cpc	r25, r1
 298:	81 f0       	breq	.+32     	; 0x2ba <init_TWI+0x30>
 29a:	80 38       	cpi	r24, 0x80	; 128
 29c:	91 05       	cpc	r25, r1
 29e:	19 f0       	breq	.+6      	; 0x2a6 <init_TWI+0x1c>
 2a0:	80 97       	sbiw	r24, 0x20	; 32
 2a2:	d1 f4       	brne	.+52     	; 0x2d8 <init_TWI+0x4e>
 2a4:	12 c0       	rjmp	.+36     	; 0x2ca <init_TWI+0x40>
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	88 b9       	out	0x08, r24	; 8
 2aa:	eb df       	rcall	.-42     	; 0x282 <set_twi_reciever_enable>
 2ac:	8f e3       	ldi	r24, 0x3F	; 63
 2ae:	80 93 b8 00 	sts	0x00B8, r24
 2b2:	81 e8       	ldi	r24, 0x81	; 129
 2b4:	80 93 ba 00 	sts	0x00BA, r24
 2b8:	08 95       	ret
 2ba:	8f e3       	ldi	r24, 0x3F	; 63
 2bc:	80 93 b8 00 	sts	0x00B8, r24
 2c0:	e0 df       	rcall	.-64     	; 0x282 <set_twi_reciever_enable>
 2c2:	80 e4       	ldi	r24, 0x40	; 64
 2c4:	80 93 ba 00 	sts	0x00BA, r24
 2c8:	08 95       	ret
 2ca:	8f e3       	ldi	r24, 0x3F	; 63
 2cc:	80 93 b8 00 	sts	0x00B8, r24
 2d0:	d8 df       	rcall	.-80     	; 0x282 <set_twi_reciever_enable>
 2d2:	81 e2       	ldi	r24, 0x21	; 33
 2d4:	80 93 ba 00 	sts	0x00BA, r24
 2d8:	08 95       	ret

000002da <clear_int>:
 2da:	81 ec       	ldi	r24, 0xC1	; 193
 2dc:	80 93 bc 00 	sts	0x00BC, r24
 2e0:	08 95       	ret

000002e2 <start_bus>:
 2e2:	84 ea       	ldi	r24, 0xA4	; 164
 2e4:	80 93 bc 00 	sts	0x00BC, r24
 2e8:	08 95       	ret

000002ea <stop_bus>:
 2ea:	85 ed       	ldi	r24, 0xD5	; 213
 2ec:	80 93 bc 00 	sts	0x00BC, r24
 2f0:	08 95       	ret

000002f2 <Error>:
 2f2:	80 91 b9 00 	lds	r24, 0x00B9
 2f6:	88 7f       	andi	r24, 0xF8	; 248
 2f8:	88 33       	cpi	r24, 0x38	; 56
 2fa:	09 f0       	breq	.+2      	; 0x2fe <Error+0xc>
 2fc:	f6 cf       	rjmp	.-20     	; 0x2ea <stop_bus>
 2fe:	ed cf       	rjmp	.-38     	; 0x2da <clear_int>

00000300 <set_data>:
 300:	80 93 bb 00 	sts	0x00BB, r24
 304:	08 95       	ret

00000306 <get_data>:
 306:	80 91 bb 00 	lds	r24, 0x00BB
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	08 95       	ret

0000030e <send_bus>:
 30e:	84 e8       	ldi	r24, 0x84	; 132
 310:	80 93 bc 00 	sts	0x00BC, r24
 314:	08 95       	ret

00000316 <wait_for_bus>:
 316:	ec eb       	ldi	r30, 0xBC	; 188
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	88 23       	and	r24, r24
 31e:	ec f7       	brge	.-6      	; 0x31a <wait_for_bus+0x4>
 320:	08 95       	ret

00000322 <send_status>:
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
 328:	dc df       	rcall	.-72     	; 0x2e2 <start_bus>
 32a:	f5 df       	rcall	.-22     	; 0x316 <wait_for_bus>
 32c:	80 91 b9 00 	lds	r24, 0x00B9
 330:	88 7f       	andi	r24, 0xF8	; 248
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	19 f0       	breq	.+6      	; 0x33c <send_status+0x1a>
 336:	dd df       	rcall	.-70     	; 0x2f2 <Error>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	22 c0       	rjmp	.+68     	; 0x380 <send_status+0x5e>
 33c:	ce 01       	movw	r24, r28
 33e:	e0 df       	rcall	.-64     	; 0x300 <set_data>
 340:	e6 df       	rcall	.-52     	; 0x30e <send_bus>
 342:	e9 df       	rcall	.-46     	; 0x316 <wait_for_bus>
 344:	80 91 b9 00 	lds	r24, 0x00B9
 348:	88 7f       	andi	r24, 0xF8	; 248
 34a:	88 31       	cpi	r24, 0x18	; 24
 34c:	19 f0       	breq	.+6      	; 0x354 <send_status+0x32>
 34e:	d1 df       	rcall	.-94     	; 0x2f2 <Error>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	16 c0       	rjmp	.+44     	; 0x380 <send_status+0x5e>
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	d3 df       	rcall	.-90     	; 0x300 <set_data>
 35a:	d9 df       	rcall	.-78     	; 0x30e <send_bus>
 35c:	dc df       	rcall	.-72     	; 0x316 <wait_for_bus>
 35e:	80 91 b9 00 	lds	r24, 0x00B9
 362:	88 7f       	andi	r24, 0xF8	; 248
 364:	88 33       	cpi	r24, 0x38	; 56
 366:	59 f0       	breq	.+22     	; 0x37e <send_status+0x5c>
 368:	80 91 b9 00 	lds	r24, 0x00B9
 36c:	88 7f       	andi	r24, 0xF8	; 248
 36e:	88 32       	cpi	r24, 0x28	; 40
 370:	19 f0       	breq	.+6      	; 0x378 <send_status+0x56>
 372:	bf df       	rcall	.-130    	; 0x2f2 <Error>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	04 c0       	rjmp	.+8      	; 0x380 <send_status+0x5e>
 378:	b8 df       	rcall	.-144    	; 0x2ea <stop_bus>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	01 c0       	rjmp	.+2      	; 0x380 <send_status+0x5e>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <send_string>:
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
 394:	e6 2e       	mov	r14, r22
 396:	f7 2e       	mov	r15, r23
 398:	a4 df       	rcall	.-184    	; 0x2e2 <start_bus>
 39a:	bd df       	rcall	.-134    	; 0x316 <wait_for_bus>
 39c:	80 91 b9 00 	lds	r24, 0x00B9
 3a0:	88 7f       	andi	r24, 0xF8	; 248
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	19 f0       	breq	.+6      	; 0x3ac <send_string+0x26>
 3a6:	a5 df       	rcall	.-182    	; 0x2f2 <Error>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	34 c0       	rjmp	.+104    	; 0x414 <send_string+0x8e>
 3ac:	ce 01       	movw	r24, r28
 3ae:	a8 df       	rcall	.-176    	; 0x300 <set_data>
 3b0:	ae df       	rcall	.-164    	; 0x30e <send_bus>
 3b2:	b1 df       	rcall	.-158    	; 0x316 <wait_for_bus>
 3b4:	80 91 b9 00 	lds	r24, 0x00B9
 3b8:	88 7f       	andi	r24, 0xF8	; 248
 3ba:	88 31       	cpi	r24, 0x18	; 24
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <send_string+0x3e>
 3be:	99 df       	rcall	.-206    	; 0x2f2 <Error>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	28 c0       	rjmp	.+80     	; 0x414 <send_string+0x8e>
 3c4:	89 e1       	ldi	r24, 0x19	; 25
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	9b df       	rcall	.-202    	; 0x300 <set_data>
 3ca:	a1 df       	rcall	.-190    	; 0x30e <send_bus>
 3cc:	a4 df       	rcall	.-184    	; 0x316 <wait_for_bus>
 3ce:	80 91 b9 00 	lds	r24, 0x00B9
 3d2:	88 7f       	andi	r24, 0xF8	; 248
 3d4:	88 32       	cpi	r24, 0x28	; 40
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <send_string+0x5c>
 3d8:	0e 2d       	mov	r16, r14
 3da:	1f 2d       	mov	r17, r15
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	d0 e0       	ldi	r29, 0x00	; 0
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <send_string+0x72>
 3e2:	87 df       	rcall	.-242    	; 0x2f2 <Error>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	16 c0       	rjmp	.+44     	; 0x414 <send_string+0x8e>
 3e8:	f8 01       	movw	r30, r16
 3ea:	81 91       	ld	r24, Z+
 3ec:	8f 01       	movw	r16, r30
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	87 df       	rcall	.-242    	; 0x300 <set_data>
 3f2:	8d df       	rcall	.-230    	; 0x30e <send_bus>
 3f4:	90 df       	rcall	.-224    	; 0x316 <wait_for_bus>
 3f6:	21 96       	adiw	r28, 0x01	; 1
 3f8:	ee 2d       	mov	r30, r14
 3fa:	ff 2d       	mov	r31, r15
 3fc:	df 01       	movw	r26, r30
 3fe:	0d 90       	ld	r0, X+
 400:	00 20       	and	r0, r0
 402:	e9 f7       	brne	.-6      	; 0x3fe <send_string+0x78>
 404:	11 97       	sbiw	r26, 0x01	; 1
 406:	ae 1b       	sub	r26, r30
 408:	bf 0b       	sbc	r27, r31
 40a:	ca 17       	cp	r28, r26
 40c:	db 07       	cpc	r29, r27
 40e:	60 f3       	brcs	.-40     	; 0x3e8 <send_string+0x62>
 410:	6c df       	rcall	.-296    	; 0x2ea <stop_bus>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	08 95       	ret

00000422 <send_string_fixed_length>:
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ec 01       	movw	r28, r24
 430:	e6 2e       	mov	r14, r22
 432:	f7 2e       	mov	r15, r23
 434:	8a 01       	movw	r16, r20
 436:	55 df       	rcall	.-342    	; 0x2e2 <start_bus>
 438:	6e df       	rcall	.-292    	; 0x316 <wait_for_bus>
 43a:	80 91 b9 00 	lds	r24, 0x00B9
 43e:	88 7f       	andi	r24, 0xF8	; 248
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	19 f0       	breq	.+6      	; 0x44a <send_string_fixed_length+0x28>
 444:	56 df       	rcall	.-340    	; 0x2f2 <Error>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	2b c0       	rjmp	.+86     	; 0x4a0 <send_string_fixed_length+0x7e>
 44a:	ce 01       	movw	r24, r28
 44c:	59 df       	rcall	.-334    	; 0x300 <set_data>
 44e:	5f df       	rcall	.-322    	; 0x30e <send_bus>
 450:	62 df       	rcall	.-316    	; 0x316 <wait_for_bus>
 452:	80 91 b9 00 	lds	r24, 0x00B9
 456:	88 7f       	andi	r24, 0xF8	; 248
 458:	88 31       	cpi	r24, 0x18	; 24
 45a:	19 f0       	breq	.+6      	; 0x462 <send_string_fixed_length+0x40>
 45c:	4a df       	rcall	.-364    	; 0x2f2 <Error>
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	1f c0       	rjmp	.+62     	; 0x4a0 <send_string_fixed_length+0x7e>
 462:	89 e1       	ldi	r24, 0x19	; 25
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	4c df       	rcall	.-360    	; 0x300 <set_data>
 468:	52 df       	rcall	.-348    	; 0x30e <send_bus>
 46a:	55 df       	rcall	.-342    	; 0x316 <wait_for_bus>
 46c:	80 91 b9 00 	lds	r24, 0x00B9
 470:	88 7f       	andi	r24, 0xF8	; 248
 472:	88 32       	cpi	r24, 0x28	; 40
 474:	21 f4       	brne	.+8      	; 0x47e <send_string_fixed_length+0x5c>
 476:	10 16       	cp	r1, r16
 478:	11 06       	cpc	r1, r17
 47a:	24 f0       	brlt	.+8      	; 0x484 <send_string_fixed_length+0x62>
 47c:	0f c0       	rjmp	.+30     	; 0x49c <send_string_fixed_length+0x7a>
 47e:	39 df       	rcall	.-398    	; 0x2f2 <Error>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e c0       	rjmp	.+28     	; 0x4a0 <send_string_fixed_length+0x7e>
 484:	ce 2d       	mov	r28, r14
 486:	df 2d       	mov	r29, r15
 488:	0c 0f       	add	r16, r28
 48a:	1d 1f       	adc	r17, r29
 48c:	89 91       	ld	r24, Y+
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	37 df       	rcall	.-402    	; 0x300 <set_data>
 492:	3d df       	rcall	.-390    	; 0x30e <send_bus>
 494:	40 df       	rcall	.-384    	; 0x316 <wait_for_bus>
 496:	c0 17       	cp	r28, r16
 498:	d1 07       	cpc	r29, r17
 49a:	c1 f7       	brne	.-16     	; 0x48c <send_string_fixed_length+0x6a>
 49c:	26 df       	rcall	.-436    	; 0x2ea <stop_bus>
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	08 95       	ret

000004ae <get_settings_from_bus>:
 4ae:	2b df       	rcall	.-426    	; 0x306 <get_data>
 4b0:	90 93 c6 11 	sts	0x11C6, r25
 4b4:	80 93 c5 11 	sts	0x11C5, r24
 4b8:	08 95       	ret

000004ba <get_char_from_bus>:
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	c0 91 dc 12 	lds	r28, 0x12DC
 4c2:	d0 91 dd 12 	lds	r29, 0x12DD
 4c6:	1f df       	rcall	.-450    	; 0x306 <get_data>
 4c8:	c3 53       	subi	r28, 0x33	; 51
 4ca:	de 4e       	sbci	r29, 0xEE	; 238
 4cc:	88 83       	st	Y, r24
 4ce:	80 91 dc 12 	lds	r24, 0x12DC
 4d2:	90 91 dd 12 	lds	r25, 0x12DD
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	90 93 dd 12 	sts	0x12DD, r25
 4dc:	80 93 dc 12 	sts	0x12DC, r24
 4e0:	90 93 c4 11 	sts	0x11C4, r25
 4e4:	80 93 c3 11 	sts	0x11C3, r24
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <get_sensor_from_bus>:
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	c0 91 e2 12 	lds	r28, 0x12E2
 4f6:	d0 91 e3 12 	lds	r29, 0x12E3
 4fa:	c7 30       	cpi	r28, 0x07	; 7
 4fc:	d1 05       	cpc	r29, r1
 4fe:	99 f4       	brne	.+38     	; 0x526 <get_sensor_from_bus+0x38>
 500:	ee ec       	ldi	r30, 0xCE	; 206
 502:	f2 e1       	ldi	r31, 0x12	; 18
 504:	a4 ee       	ldi	r26, 0xE4	; 228
 506:	b2 e1       	ldi	r27, 0x12	; 18
 508:	2c ed       	ldi	r18, 0xDC	; 220
 50a:	32 e1       	ldi	r19, 0x12	; 18
 50c:	81 91       	ld	r24, Z+
 50e:	91 91       	ld	r25, Z+
 510:	8d 93       	st	X+, r24
 512:	9d 93       	st	X+, r25
 514:	e2 17       	cp	r30, r18
 516:	f3 07       	cpc	r31, r19
 518:	c9 f7       	brne	.-14     	; 0x50c <get_sensor_from_bus+0x1e>
 51a:	f5 de       	rcall	.-534    	; 0x306 <get_data>
 51c:	90 93 df 12 	sts	0x12DF, r25
 520:	80 93 de 12 	sts	0x12DE, r24
 524:	10 c0       	rjmp	.+32     	; 0x546 <get_sensor_from_bus+0x58>
 526:	ef de       	rcall	.-546    	; 0x306 <get_data>
 528:	cc 0f       	add	r28, r28
 52a:	dd 1f       	adc	r29, r29
 52c:	c2 53       	subi	r28, 0x32	; 50
 52e:	dd 4e       	sbci	r29, 0xED	; 237
 530:	99 83       	std	Y+1, r25	; 0x01
 532:	88 83       	st	Y, r24
 534:	80 91 e2 12 	lds	r24, 0x12E2
 538:	90 91 e3 12 	lds	r25, 0x12E3
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	90 93 e3 12 	sts	0x12E3, r25
 542:	80 93 e2 12 	sts	0x12E2, r24
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <get_sensor>:
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	fc 01       	movw	r30, r24
 552:	ec 51       	subi	r30, 0x1C	; 28
 554:	fd 4e       	sbci	r31, 0xED	; 237
 556:	80 81       	ld	r24, Z
 558:	91 81       	ldd	r25, Z+1	; 0x01
 55a:	08 95       	ret

0000055c <get_servo>:
 55c:	80 91 de 12 	lds	r24, 0x12DE
 560:	90 91 df 12 	lds	r25, 0x12DF
 564:	08 95       	ret

00000566 <stop_twi>:

void stop_twi()
{
	current_command = 0;
 566:	10 92 cd 12 	sts	0x12CD, r1
 56a:	10 92 cc 12 	sts	0x12CC, r1
	sensor = 0;
 56e:	10 92 e3 12 	sts	0x12E3, r1
 572:	10 92 e2 12 	sts	0x12E2, r1
	message_counter = 0;
 576:	10 92 dd 12 	sts	0x12DD, r1
 57a:	10 92 dc 12 	sts	0x12DC, r1
 57e:	08 95       	ret

00000580 <reset_TWI>:
}

void reset_TWI()
{
	TWCR |= (1<<TWINT) | (1<<TWEA);
 580:	ec eb       	ldi	r30, 0xBC	; 188
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 6c       	ori	r24, 0xC0	; 192
 588:	80 83       	st	Z, r24
 58a:	08 95       	ret

0000058c <USART_init>:
	{
		gTxPayload[i] = msg[i];
	}
	
	USART_SendPacket('S', strlen(msg));
}
 58c:	10 92 c5 00 	sts	0x00C5, r1
 590:	89 e0       	ldi	r24, 0x09	; 9
 592:	80 93 c4 00 	sts	0x00C4, r24
 596:	88 e9       	ldi	r24, 0x98	; 152
 598:	80 93 c1 00 	sts	0x00C1, r24
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	80 93 c2 00 	sts	0x00C2, r24
 5a2:	08 95       	ret

000005a4 <USART_CheckTxReady>:
 5a4:	80 91 c0 00 	lds	r24, 0x00C0
 5a8:	80 72       	andi	r24, 0x20	; 32
 5aa:	08 95       	ret

000005ac <USART_WriteByte>:
 5ac:	cf 93       	push	r28
 5ae:	c8 2f       	mov	r28, r24
 5b0:	f9 df       	rcall	.-14     	; 0x5a4 <USART_CheckTxReady>
 5b2:	88 23       	and	r24, r24
 5b4:	e9 f3       	breq	.-6      	; 0x5b0 <USART_WriteByte+0x4>
 5b6:	c0 93 c6 00 	sts	0x00C6, r28
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <USART_crc16>:
 5be:	cf 92       	push	r12
 5c0:	df 92       	push	r13
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	66 23       	and	r22, r22
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <USART_crc16+0x16>
 5d2:	3e c0       	rjmp	.+124    	; 0x650 <USART_crc16+0x92>
 5d4:	06 2f       	mov	r16, r22
 5d6:	10 e0       	ldi	r17, 0x00	; 0
 5d8:	4f ef       	ldi	r20, 0xFF	; 255
 5da:	5f ef       	ldi	r21, 0xFF	; 255
 5dc:	ee ef       	ldi	r30, 0xFE	; 254
 5de:	ff ef       	ldi	r31, 0xFF	; 255
 5e0:	c6 2e       	mov	r12, r22
 5e2:	d1 2c       	mov	r13, r1
 5e4:	e8 2e       	mov	r14, r24
 5e6:	f1 2c       	mov	r15, r1
 5e8:	c8 e0       	ldi	r28, 0x08	; 8
 5ea:	d0 e0       	ldi	r29, 0x00	; 0
 5ec:	ee 3f       	cpi	r30, 0xFE	; 254
 5ee:	6f ef       	ldi	r22, 0xFF	; 255
 5f0:	f6 07       	cpc	r31, r22
 5f2:	19 f4       	brne	.+6      	; 0x5fa <USART_crc16+0x3c>
 5f4:	8e 2d       	mov	r24, r14
 5f6:	9f 2d       	mov	r25, r15
 5f8:	30 c0       	rjmp	.+96     	; 0x65a <USART_crc16+0x9c>
 5fa:	ef 3f       	cpi	r30, 0xFF	; 255
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	f8 07       	cpc	r31, r24
 600:	19 f4       	brne	.+6      	; 0x608 <USART_crc16+0x4a>
 602:	8c 2d       	mov	r24, r12
 604:	9d 2d       	mov	r25, r13
 606:	29 c0       	rjmp	.+82     	; 0x65a <USART_crc16+0x9c>
 608:	df 01       	movw	r26, r30
 60a:	a9 50       	subi	r26, 0x09	; 9
 60c:	bb 4e       	sbci	r27, 0xEB	; 235
 60e:	8c 91       	ld	r24, X
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	23 c0       	rjmp	.+70     	; 0x65a <USART_crc16+0x9c>
 614:	ba 01       	movw	r22, r20
 616:	68 27       	eor	r22, r24
 618:	79 27       	eor	r23, r25
 61a:	60 ff       	sbrs	r22, 0
 61c:	07 c0       	rjmp	.+14     	; 0x62c <USART_crc16+0x6e>
 61e:	56 95       	lsr	r21
 620:	47 95       	ror	r20
 622:	68 e0       	ldi	r22, 0x08	; 8
 624:	46 27       	eor	r20, r22
 626:	64 e8       	ldi	r22, 0x84	; 132
 628:	56 27       	eor	r21, r22
 62a:	02 c0       	rjmp	.+4      	; 0x630 <USART_crc16+0x72>
 62c:	56 95       	lsr	r21
 62e:	47 95       	ror	r20
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	21 50       	subi	r18, 0x01	; 1
 636:	31 09       	sbc	r19, r1
 638:	69 f7       	brne	.-38     	; 0x614 <USART_crc16+0x56>
 63a:	31 96       	adiw	r30, 0x01	; 1
 63c:	e0 17       	cp	r30, r16
 63e:	f1 07       	cpc	r31, r17
 640:	a9 f6       	brne	.-86     	; 0x5ec <USART_crc16+0x2e>
 642:	9a 01       	movw	r18, r20
 644:	20 95       	com	r18
 646:	30 95       	com	r19
 648:	32 27       	eor	r19, r18
 64a:	23 27       	eor	r18, r19
 64c:	32 27       	eor	r19, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <USART_crc16+0x96>
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	82 2f       	mov	r24, r18
 656:	93 2f       	mov	r25, r19
 658:	02 c0       	rjmp	.+4      	; 0x65e <USART_crc16+0xa0>
 65a:	9e 01       	movw	r18, r28
 65c:	db cf       	rjmp	.-74     	; 0x614 <USART_crc16+0x56>
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	df 90       	pop	r13
 66c:	cf 90       	pop	r12
 66e:	08 95       	ret

00000670 <USART_SendPacket>:
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	9e e7       	ldi	r25, 0x7E	; 126
 67a:	90 93 f6 15 	sts	0x15F6, r25
 67e:	80 93 f7 15 	sts	0x15F7, r24
 682:	60 93 f8 15 	sts	0x15F8, r22
 686:	26 2f       	mov	r18, r22
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	12 16       	cp	r1, r18
 68c:	13 06       	cpc	r1, r19
 68e:	4c f5       	brge	.+82     	; 0x6e2 <USART_SendPacket+0x72>
 690:	e7 ef       	ldi	r30, 0xF7	; 247
 692:	f4 e1       	ldi	r31, 0x14	; 20
 694:	03 e0       	ldi	r16, 0x03	; 3
 696:	10 e0       	ldi	r17, 0x00	; 0
 698:	c0 e0       	ldi	r28, 0x00	; 0
 69a:	d0 e0       	ldi	r29, 0x00	; 0
 69c:	7d e7       	ldi	r23, 0x7D	; 125
 69e:	50 e2       	ldi	r21, 0x20	; 32
 6a0:	90 81       	ld	r25, Z
 6a2:	49 2f       	mov	r20, r25
 6a4:	4d 57       	subi	r20, 0x7D	; 125
 6a6:	42 30       	cpi	r20, 0x02	; 2
 6a8:	80 f4       	brcc	.+32     	; 0x6ca <USART_SendPacket+0x5a>
 6aa:	d8 01       	movw	r26, r16
 6ac:	aa 50       	subi	r26, 0x0A	; 10
 6ae:	ba 4e       	sbci	r27, 0xEA	; 234
 6b0:	ac 0f       	add	r26, r28
 6b2:	bd 1f       	adc	r27, r29
 6b4:	7c 93       	st	X, r23
 6b6:	0f 5f       	subi	r16, 0xFF	; 255
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	d8 01       	movw	r26, r16
 6bc:	aa 50       	subi	r26, 0x0A	; 10
 6be:	ba 4e       	sbci	r27, 0xEA	; 234
 6c0:	ac 0f       	add	r26, r28
 6c2:	bd 1f       	adc	r27, r29
 6c4:	95 27       	eor	r25, r21
 6c6:	9c 93       	st	X, r25
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <USART_SendPacket+0x66>
 6ca:	d8 01       	movw	r26, r16
 6cc:	aa 50       	subi	r26, 0x0A	; 10
 6ce:	ba 4e       	sbci	r27, 0xEA	; 234
 6d0:	ac 0f       	add	r26, r28
 6d2:	bd 1f       	adc	r27, r29
 6d4:	9c 93       	st	X, r25
 6d6:	21 96       	adiw	r28, 0x01	; 1
 6d8:	31 96       	adiw	r30, 0x01	; 1
 6da:	c2 17       	cp	r28, r18
 6dc:	d3 07       	cpc	r29, r19
 6de:	01 f7       	brne	.-64     	; 0x6a0 <USART_SendPacket+0x30>
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <USART_SendPacket+0x7a>
 6e2:	03 e0       	ldi	r16, 0x03	; 3
 6e4:	10 e0       	ldi	r17, 0x00	; 0
 6e6:	c0 e0       	ldi	r28, 0x00	; 0
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
 6ea:	69 df       	rcall	.-302    	; 0x5be <USART_crc16>
 6ec:	f8 01       	movw	r30, r16
 6ee:	ea 50       	subi	r30, 0x0A	; 10
 6f0:	fa 4e       	sbci	r31, 0xEA	; 234
 6f2:	ec 0f       	add	r30, r28
 6f4:	fd 1f       	adc	r31, r29
 6f6:	90 83       	st	Z, r25
 6f8:	81 83       	std	Z+1, r24	; 0x01
 6fa:	22 96       	adiw	r28, 0x02	; 2
 6fc:	0c 0f       	add	r16, r28
 6fe:	1d 1f       	adc	r17, r29
 700:	f8 01       	movw	r30, r16
 702:	ea 50       	subi	r30, 0x0A	; 10
 704:	fa 4e       	sbci	r31, 0xEA	; 234
 706:	8e e7       	ldi	r24, 0x7E	; 126
 708:	80 83       	st	Z, r24
 70a:	c8 01       	movw	r24, r16
 70c:	01 96       	adiw	r24, 0x01	; 1
 70e:	18 16       	cp	r1, r24
 710:	19 06       	cpc	r1, r25
 712:	4c f4       	brge	.+18     	; 0x726 <USART_SendPacket+0xb6>
 714:	c6 ef       	ldi	r28, 0xF6	; 246
 716:	d5 e1       	ldi	r29, 0x15	; 21
 718:	09 50       	subi	r16, 0x09	; 9
 71a:	1a 4e       	sbci	r17, 0xEA	; 234
 71c:	89 91       	ld	r24, Y+
 71e:	46 df       	rcall	.-372    	; 0x5ac <USART_WriteByte>
 720:	c0 17       	cp	r28, r16
 722:	d1 07       	cpc	r29, r17
 724:	d9 f7       	brne	.-10     	; 0x71c <USART_SendPacket+0xac>
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	1f 91       	pop	r17
 72c:	0f 91       	pop	r16
 72e:	08 95       	ret

00000730 <USART_SendSensors>:

void USART_SendSensors()
{
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	07 ef       	ldi	r16, 0xF7	; 247
 73a:	14 e1       	ldi	r17, 0x14	; 20
	for(int i = 0; i < 7; i++)
 73c:	c0 e0       	ldi	r28, 0x00	; 0
 73e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		gTxPayload[i] = get_sensor(i);
 740:	ce 01       	movw	r24, r28
 742:	04 df       	rcall	.-504    	; 0x54c <get_sensor>
 744:	f8 01       	movw	r30, r16
 746:	81 93       	st	Z+, r24
 748:	8f 01       	movw	r16, r30
	USART_SendPacket('S', strlen(msg));
}

void USART_SendSensors()
{
	for(int i = 0; i < 7; i++)
 74a:	21 96       	adiw	r28, 0x01	; 1
 74c:	c7 30       	cpi	r28, 0x07	; 7
 74e:	d1 05       	cpc	r29, r1
 750:	b9 f7       	brne	.-18     	; 0x740 <USART_SendSensors+0x10>
		gTxPayload[i] = get_sensor(i);
	}
	
	//UL sensor
	
	gTxPayload[7] = 254;
 752:	8e ef       	ldi	r24, 0xFE	; 254
 754:	80 93 fe 14 	sts	0x14FE, r24
	gTxPayload[8] = get_servo();
 758:	01 df       	rcall	.-510    	; 0x55c <get_servo>
 75a:	80 93 ff 14 	sts	0x14FF, r24
	
	USART_SendPacket('S', 9);
 75e:	69 e0       	ldi	r22, 0x09	; 9
 760:	83 e5       	ldi	r24, 0x53	; 83
 762:	86 df       	rcall	.-244    	; 0x670 <USART_SendPacket>
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <USART_DecodeMessageRxFIFO>:

uint8_t USART_DecodeMessageRxFIFO()
{
 76e:	8f 92       	push	r8
 770:	9f 92       	push	r9
 772:	af 92       	push	r10
 774:	bf 92       	push	r11
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
	
	// TODO: send to relevant party... the display for now
	send_string_fixed_length(S_ADRESS, msg, length);
	
	return 0;
}
 78a:	ad b6       	in	r10, 0x3d	; 61
 78c:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gRxFIFO, len))
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	80 91 00 01 	lds	r24, 0x0100
 796:	90 91 01 01 	lds	r25, 0x0101
 79a:	be dc       	rcall	.-1668   	; 0x118 <FifoRead>
 79c:	88 23       	and	r24, r24
 79e:	39 f0       	breq	.+14     	; 0x7ae <USART_DecodeMessageRxFIFO+0x40>
	{
		send_string(S_ADRESS, "RxFIFO MESSAGE ERROR: LEN MISSING");
 7a0:	68 e0       	ldi	r22, 0x08	; 8
 7a2:	71 e1       	ldi	r23, 0x11	; 17
 7a4:	80 e4       	ldi	r24, 0x40	; 64
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	ee dd       	rcall	.-1060   	; 0x386 <send_string>
		return 1; // error
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	45 c0       	rjmp	.+138    	; 0x838 <USART_DecodeMessageRxFIFO+0xca>
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
 7ae:	c0 90 00 00 	lds	r12, 0x0000
 7b2:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];
 7b4:	96 01       	movw	r18, r12
 7b6:	21 50       	subi	r18, 0x01	; 1
 7b8:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	c1 14       	cp	r12, r1
 7c0:	d1 04       	cpc	r13, r1
 7c2:	11 f0       	breq	.+4      	; 0x7c8 <USART_DecodeMessageRxFIFO+0x5a>
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t msg[length-1+ifzero];
 7c8:	82 0f       	add	r24, r18
 7ca:	93 1f       	adc	r25, r19
 7cc:	2d b7       	in	r18, 0x3d	; 61
 7ce:	3e b7       	in	r19, 0x3e	; 62
 7d0:	28 1b       	sub	r18, r24
 7d2:	39 0b       	sbc	r19, r25
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	3e bf       	out	0x3e, r19	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	2d bf       	out	0x3d, r18	; 61
 7de:	8d b7       	in	r24, 0x3d	; 61
 7e0:	9e b7       	in	r25, 0x3e	; 62
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	88 2e       	mov	r8, r24
 7e6:	99 2e       	mov	r9, r25

	for(int i = 0; i < length; ++i)
 7e8:	1c 14       	cp	r1, r12
 7ea:	1d 04       	cpc	r1, r13
 7ec:	f4 f4       	brge	.+60     	; 0x82a <USART_DecodeMessageRxFIFO+0xbc>
 7ee:	e8 2e       	mov	r14, r24
 7f0:	f9 2e       	mov	r15, r25
 7f2:	00 e0       	ldi	r16, 0x00	; 0
 7f4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gRxFIFO, character))
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	80 91 00 01 	lds	r24, 0x0100
 7fe:	90 91 01 01 	lds	r25, 0x0101
 802:	8a dc       	rcall	.-1772   	; 0x118 <FifoRead>
 804:	88 23       	and	r24, r24
 806:	39 f0       	breq	.+14     	; 0x816 <USART_DecodeMessageRxFIFO+0xa8>
		{
			send_string(S_ADRESS, "RxFIFO MESSAGE ERROR: DATA MISSING");
 808:	6a e2       	ldi	r22, 0x2A	; 42
 80a:	71 e1       	ldi	r23, 0x11	; 17
 80c:	80 e4       	ldi	r24, 0x40	; 64
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	ba dd       	rcall	.-1164   	; 0x386 <send_string>
			return 1; // error
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	11 c0       	rjmp	.+34     	; 0x838 <USART_DecodeMessageRxFIFO+0xca>
		}

		msg[i] = *character;
 816:	80 91 00 00 	lds	r24, 0x0000
 81a:	f7 01       	movw	r30, r14
 81c:	81 93       	st	Z+, r24
 81e:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
 820:	0f 5f       	subi	r16, 0xFF	; 255
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	0c 15       	cp	r16, r12
 826:	1d 05       	cpc	r17, r13
 828:	34 f3       	brlt	.-52     	; 0x7f6 <USART_DecodeMessageRxFIFO+0x88>
		msg[i] = *character;
	}
	
	
	// TODO: send to relevant party... the display for now
	send_string_fixed_length(S_ADRESS, msg, length);
 82a:	a6 01       	movw	r20, r12
 82c:	68 2d       	mov	r22, r8
 82e:	79 2d       	mov	r23, r9
 830:	80 e4       	ldi	r24, 0x40	; 64
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	f6 dd       	rcall	.-1044   	; 0x422 <send_string_fixed_length>
	
	return 0;
 836:	80 e0       	ldi	r24, 0x00	; 0
}
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	f8 94       	cli
 83c:	be be       	out	0x3e, r11	; 62
 83e:	0f be       	out	0x3f, r0	; 63
 840:	ad be       	out	0x3d, r10	; 61
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	df 90       	pop	r13
 850:	cf 90       	pop	r12
 852:	bf 90       	pop	r11
 854:	af 90       	pop	r10
 856:	9f 90       	pop	r9
 858:	8f 90       	pop	r8
 85a:	08 95       	ret

0000085c <USART_DecodeCommandRxFIFO>:

uint8_t USART_DecodeCommandRxFIFO()
{
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
	uint8_t *len = 0;
	uint8_t *data = 0;
	
	if(FifoRead(gRxFIFO, len))
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	80 91 00 01 	lds	r24, 0x0100
 86c:	90 91 01 01 	lds	r25, 0x0101
 870:	53 dc       	rcall	.-1882   	; 0x118 <FifoRead>
 872:	88 23       	and	r24, r24
 874:	39 f0       	breq	.+14     	; 0x884 <USART_DecodeCommandRxFIFO+0x28>
	{
		send_string(S_ADRESS, "RxFIFO COMMAND ERROR: LEN MISSING");
 876:	6d e4       	ldi	r22, 0x4D	; 77
 878:	71 e1       	ldi	r23, 0x11	; 17
 87a:	80 e4       	ldi	r24, 0x40	; 64
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	83 dd       	rcall	.-1274   	; 0x386 <send_string>
		return 1; // error
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	38 c0       	rjmp	.+112    	; 0x8f4 <USART_DecodeCommandRxFIFO+0x98>
	}
	
	int length = *len;
 884:	00 91 00 00 	lds	r16, 0x0000
 888:	10 e0       	ldi	r17, 0x00	; 0
	
	if(length == 3)
 88a:	03 30       	cpi	r16, 0x03	; 3
 88c:	11 05       	cpc	r17, r1
 88e:	99 f4       	brne	.+38     	; 0x8b6 <USART_DecodeCommandRxFIFO+0x5a>
	{
		if(FifoRead(gRxFIFO, data))
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	80 91 00 01 	lds	r24, 0x0100
 898:	90 91 01 01 	lds	r25, 0x0101
 89c:	3d dc       	rcall	.-1926   	; 0x118 <FifoRead>
 89e:	81 11       	cpse	r24, r1
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <USART_DecodeCommandRxFIFO+0x4c>
	
	return 0;
}

uint8_t USART_DecodeCommandRxFIFO()
{
 8a2:	c0 e0       	ldi	r28, 0x00	; 0
 8a4:	d0 e0       	ldi	r29, 0x00	; 0
 8a6:	11 c0       	rjmp	.+34     	; 0x8ca <USART_DecodeCommandRxFIFO+0x6e>
	
	if(length == 3)
	{
		if(FifoRead(gRxFIFO, data))
		{
			send_string(S_ADRESS, "RxFIFO COMMAND ERROR: DATA MISSING");
 8a8:	6f e6       	ldi	r22, 0x6F	; 111
 8aa:	71 e1       	ldi	r23, 0x11	; 17
 8ac:	80 e4       	ldi	r24, 0x40	; 64
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	6a dd       	rcall	.-1324   	; 0x386 <send_string>
			return 1; // error
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	1f c0       	rjmp	.+62     	; 0x8f4 <USART_DecodeCommandRxFIFO+0x98>
		}

	}else
	{
		send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
 8b6:	62 e9       	ldi	r22, 0x92	; 146
 8b8:	71 e1       	ldi	r23, 0x11	; 17
 8ba:	80 e4       	ldi	r24, 0x40	; 64
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	63 dd       	rcall	.-1338   	; 0x386 <send_string>
	}
	
	for(int i = 0; i < length; ++i)
 8c0:	10 16       	cp	r1, r16
 8c2:	11 06       	cpc	r1, r17
 8c4:	74 f3       	brlt	.-36     	; 0x8a2 <USART_DecodeCommandRxFIFO+0x46>
			send_string(S_ADRESS, "RxFIFO COMMAND ERROR: DATA MISSING");
			return 1; // error
		}

	}
	return 0;
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	15 c0       	rjmp	.+42     	; 0x8f4 <USART_DecodeCommandRxFIFO+0x98>
		send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
	}
	
	for(int i = 0; i < length; ++i)
	{
		if(FifoRead(gRxFIFO, data))
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	80 91 00 01 	lds	r24, 0x0100
 8d2:	90 91 01 01 	lds	r25, 0x0101
 8d6:	20 dc       	rcall	.-1984   	; 0x118 <FifoRead>
 8d8:	88 23       	and	r24, r24
 8da:	39 f0       	breq	.+14     	; 0x8ea <USART_DecodeCommandRxFIFO+0x8e>
		{
			send_string(S_ADRESS, "RxFIFO COMMAND ERROR: DATA MISSING");
 8dc:	6f e6       	ldi	r22, 0x6F	; 111
 8de:	71 e1       	ldi	r23, 0x11	; 17
 8e0:	80 e4       	ldi	r24, 0x40	; 64
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	50 dd       	rcall	.-1376   	; 0x386 <send_string>
			return 1; // error
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <USART_DecodeCommandRxFIFO+0x98>
	}else
	{
		send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
	}
	
	for(int i = 0; i < length; ++i)
 8ea:	21 96       	adiw	r28, 0x01	; 1
 8ec:	c0 17       	cp	r28, r16
 8ee:	d1 07       	cpc	r29, r17
 8f0:	64 f3       	brlt	.-40     	; 0x8ca <USART_DecodeCommandRxFIFO+0x6e>
			send_string(S_ADRESS, "RxFIFO COMMAND ERROR: DATA MISSING");
			return 1; // error
		}

	}
	return 0;
 8f2:	80 e0       	ldi	r24, 0x00	; 0
	
}
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	08 95       	ret

000008fe <USART_DecodeRxFIFO>:

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	if(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	80 91 00 01 	lds	r24, 0x0100
 906:	90 91 01 01 	lds	r25, 0x0101
 90a:	06 dc       	rcall	.-2036   	; 0x118 <FifoRead>
 90c:	81 11       	cpse	r24, r1
 90e:	08 c0       	rjmp	.+16     	; 0x920 <USART_DecodeRxFIFO+0x22>
	{
		switch(*tag){
 910:	80 91 00 00 	lds	r24, 0x0000
 914:	83 34       	cpi	r24, 0x43	; 67
 916:	19 f0       	breq	.+6      	; 0x91e <USART_DecodeRxFIFO+0x20>
 918:	8d 34       	cpi	r24, 0x4D	; 77
 91a:	11 f4       	brne	.+4      	; 0x920 <USART_DecodeRxFIFO+0x22>
			case('M'): // if 'tag' is 'M'
			{
				if(USART_DecodeMessageRxFIFO()) // if decoding failed
 91c:	28 cf       	rjmp	.-432    	; 0x76e <USART_DecodeMessageRxFIFO>
				
				break;
			}
			case('C'): // 
			{
				if(USART_DecodeCommandRxFIFO())
 91e:	9e cf       	rjmp	.-196    	; 0x85c <USART_DecodeCommandRxFIFO>
 920:	08 95       	ret

00000922 <USART_Bounce>:



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 922:	60 91 f3 12 	lds	r22, 0x12F3
 926:	26 2f       	mov	r18, r22
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	12 16       	cp	r1, r18
 92c:	13 06       	cpc	r1, r19
 92e:	64 f4       	brge	.+24     	; 0x948 <USART_Bounce+0x26>
 930:	a4 ef       	ldi	r26, 0xF4	; 244
 932:	b2 e1       	ldi	r27, 0x12	; 18
 934:	e7 ef       	ldi	r30, 0xF7	; 247
 936:	f4 e1       	ldi	r31, 0x14	; 20
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	90 e0       	ldi	r25, 0x00	; 0
	{
		gTxPayload[i] = gRxBuffer[i+2];
 93c:	4d 91       	ld	r20, X+
 93e:	41 93       	st	Z+, r20



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 940:	01 96       	adiw	r24, 0x01	; 1
 942:	82 17       	cp	r24, r18
 944:	93 07       	cpc	r25, r19
 946:	d4 f3       	brlt	.-12     	; 0x93c <USART_Bounce+0x1a>
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
 948:	80 91 f2 12 	lds	r24, 0x12F2
 94c:	91 ce       	rjmp	.-734    	; 0x670 <USART_SendPacket>

0000094e <__vector_20>:
}


ISR (USART0_RX_vect)
{
 94e:	1f 92       	push	r1
 950:	0f 92       	push	r0
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	0f 92       	push	r0
 956:	11 24       	eor	r1, r1
 958:	0b b6       	in	r0, 0x3b	; 59
 95a:	0f 92       	push	r0
 95c:	ef 92       	push	r14
 95e:	ff 92       	push	r15
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	2f 93       	push	r18
 966:	3f 93       	push	r19
 968:	4f 93       	push	r20
 96a:	5f 93       	push	r21
 96c:	6f 93       	push	r22
 96e:	7f 93       	push	r23
 970:	8f 93       	push	r24
 972:	9f 93       	push	r25
 974:	af 93       	push	r26
 976:	bf 93       	push	r27
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	ef 93       	push	r30
 97e:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
 980:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
 984:	2e 37       	cpi	r18, 0x7E	; 126
 986:	c9 f5       	brne	.+114    	; 0x9fa <__vector_20+0xac>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
 988:	80 91 bc 11 	lds	r24, 0x11BC
 98c:	90 91 bd 11 	lds	r25, 0x11BD
 990:	84 30       	cpi	r24, 0x04	; 4
 992:	91 05       	cpc	r25, r1
 994:	40 f4       	brcc	.+16     	; 0x9a6 <__vector_20+0x58>
 996:	20 91 f3 12 	lds	r18, 0x12F3
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	2c 5f       	subi	r18, 0xFC	; 252
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	82 17       	cp	r24, r18
 9a2:	93 07       	cpc	r25, r19
 9a4:	29 f5       	brne	.+74     	; 0x9f0 <__vector_20+0xa2>
		{
			if(gInvertNextFlag)
 9a6:	80 91 ba 11 	lds	r24, 0x11BA
 9aa:	90 91 bb 11 	lds	r25, 0x11BB
 9ae:	89 2b       	or	r24, r25
 9b0:	21 f0       	breq	.+8      	; 0x9ba <__vector_20+0x6c>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
 9b2:	10 92 bb 11 	sts	0x11BB, r1
 9b6:	10 92 ba 11 	sts	0x11BA, r1
			}
			
			USART_Bounce();
 9ba:	b3 df       	rcall	.-154    	; 0x922 <USART_Bounce>
 9bc:	02 ef       	ldi	r16, 0xF2	; 242
 9be:	12 e1       	ldi	r17, 0x12	; 18
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 9c0:	c0 e0       	ldi	r28, 0x00	; 0
 9c2:	d0 e0       	ldi	r29, 0x00	; 0
 9c4:	0f 2e       	mov	r0, r31
 9c6:	f3 ef       	ldi	r31, 0xF3	; 243
 9c8:	ef 2e       	mov	r14, r31
 9ca:	f2 e1       	ldi	r31, 0x12	; 18
 9cc:	ff 2e       	mov	r15, r31
 9ce:	f0 2d       	mov	r31, r0
			{
				FifoWrite(gRxFIFO, gRxBuffer[i]);
 9d0:	f8 01       	movw	r30, r16
 9d2:	61 91       	ld	r22, Z+
 9d4:	8f 01       	movw	r16, r30
 9d6:	80 91 00 01 	lds	r24, 0x0100
 9da:	90 91 01 01 	lds	r25, 0x0101
 9de:	7c db       	rcall	.-2312   	; 0xd8 <FifoWrite>
			}
			
			USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 9e0:	21 96       	adiw	r28, 0x01	; 1
 9e2:	f7 01       	movw	r30, r14
 9e4:	80 81       	ld	r24, Z
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	02 96       	adiw	r24, 0x02	; 2
 9ea:	c8 17       	cp	r28, r24
 9ec:	d9 07       	cpc	r29, r25
 9ee:	84 f3       	brlt	.-32     	; 0x9d0 <__vector_20+0x82>
			{
				FifoWrite(gRxFIFO, gRxBuffer[i]);
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
 9f0:	10 92 bd 11 	sts	0x11BD, r1
 9f4:	10 92 bc 11 	sts	0x11BC, r1
 9f8:	16 c0       	rjmp	.+44     	; 0xa26 <__vector_20+0xd8>
		
	}else if(data == 0x7d)
 9fa:	2d 37       	cpi	r18, 0x7D	; 125
 9fc:	39 f4       	brne	.+14     	; 0xa0c <__vector_20+0xbe>
	{
		gInvertNextFlag = 1;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	90 93 bb 11 	sts	0x11BB, r25
 a06:	80 93 ba 11 	sts	0x11BA, r24
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__vector_20+0xd8>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
 a0c:	80 91 bc 11 	lds	r24, 0x11BC
 a10:	90 91 bd 11 	lds	r25, 0x11BD
 a14:	fc 01       	movw	r30, r24
 a16:	ee 50       	subi	r30, 0x0E	; 14
 a18:	fd 4e       	sbci	r31, 0xED	; 237
 a1a:	20 83       	st	Z, r18
		++gRxBufferIndex;
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	90 93 bd 11 	sts	0x11BD, r25
 a22:	80 93 bc 11 	sts	0x11BC, r24
	}
	
	
}
 a26:	ff 91       	pop	r31
 a28:	ef 91       	pop	r30
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	1f 91       	pop	r17
 a44:	0f 91       	pop	r16
 a46:	ff 90       	pop	r15
 a48:	ef 90       	pop	r14
 a4a:	0f 90       	pop	r0
 a4c:	0b be       	out	0x3b, r0	; 59
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
