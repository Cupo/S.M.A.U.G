
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000211e  00800100  00001134  000011c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  0080221e  0080221e  000032e6  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  000032e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000598  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a0  00000000  00000000  00004f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020b1  00000000  00000000  000051c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000918  00000000  00000000  00007274  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001853  00000000  00000000  00007b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007ec  00000000  00000000  000093e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000841  00000000  00000000  00009bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000181c  00000000  00000000  0000a40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000298  00000000  00000000  0000bc29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	1f c1       	rjmp	.+574    	; 0x264 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c6 c6       	rjmp	.+3468   	; 0xdde <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	39 c3       	rjmp	.+1650   	; 0x6dc <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e2       	ldi	r17, 0x22	; 34
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e3       	ldi	r30, 0x34	; 52
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e2       	ldi	r18, 0x28	; 40
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b2 e2       	ldi	r27, 0x22	; 34
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 35       	cpi	r26, 0x5D	; 93
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	94 d0       	rcall	.+296    	; 0x1ec <main>
      c4:	0c 94 98 08 	jmp	0x1130	; 0x1130 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT2 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 18.000 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	3e d7       	rcall	.+3708   	; 0xf4e <__floatunsisf>
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	40 e9       	ldi	r20, 0x90	; 144
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	9f d7       	rcall	.+3902   	; 0x101a <__mulsf3>
      dc:	0c d7       	rcall	.+3608   	; 0xef6 <__fixunssfsi>
	OCR1A = delay;
      de:	70 93 89 00 	sts	0x0089, r23
      e2:	60 93 88 00 	sts	0x0088, r22
      e6:	08 95       	ret

000000e8 <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 18.000 * delay;
      e8:	bc 01       	movw	r22, r24
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	2f d7       	rcall	.+3678   	; 0xf4e <__floatunsisf>
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	40 e9       	ldi	r20, 0x90	; 144
      f6:	51 e4       	ldi	r21, 0x41	; 65
      f8:	90 d7       	rcall	.+3872   	; 0x101a <__mulsf3>
      fa:	fd d6       	rcall	.+3578   	; 0xef6 <__fixunssfsi>
	OCR1A = delay;
      fc:	70 93 89 00 	sts	0x0089, r23
     100:	60 93 88 00 	sts	0x0088, r22
     104:	08 95       	ret

00000106 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     106:	e1 e8       	ldi	r30, 0x81	; 129
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	85 60       	ori	r24, 0x05	; 5
     10e:	80 83       	st	Z, r24
	TCCR2B |= 0b00000101; // clock 2, prescaler 1024
     110:	e1 eb       	ldi	r30, 0xB1	; 177
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	85 60       	ori	r24, 0x05	; 5
     118:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     11a:	88 ee       	ldi	r24, 0xE8	; 232
     11c:	93 e0       	ldi	r25, 0x03	; 3
     11e:	d5 df       	rcall	.-86     	; 0xca <set_counter_1>
	set_counter_2(1000);
     120:	88 ee       	ldi	r24, 0xE8	; 232
     122:	93 e0       	ldi	r25, 0x03	; 3
     124:	e1 df       	rcall	.-62     	; 0xe8 <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     126:	ef e6       	ldi	r30, 0x6F	; 111
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	82 60       	ori	r24, 0x02	; 2
     12e:	80 83       	st	Z, r24
	TIMSK2 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     130:	e0 e7       	ldi	r30, 0x70	; 112
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	82 60       	ori	r24, 0x02	; 2
     138:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     13a:	10 92 85 00 	sts	0x0085, r1
     13e:	10 92 84 00 	sts	0x0084, r1
	TCNT2 = 0;
     142:	10 92 b2 00 	sts	0x00B2, r1
     146:	08 95       	ret

00000148 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     148:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     14a:	90 81       	ld	r25, Z
     14c:	91 50       	subi	r25, 0x01	; 1
     14e:	84 81       	ldd	r24, Z+4	; 0x04
     150:	22 81       	ldd	r18, Z+2	; 0x02
     152:	82 1b       	sub	r24, r18
};
     154:	89 23       	and	r24, r25
     156:	08 95       	ret

00000158 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
     160:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     162:	f2 df       	rcall	.-28     	; 0x148 <FifoDataLength>
     164:	28 81       	ld	r18, Y
     166:	39 81       	ldd	r19, Y+1	; 0x01
     168:	21 50       	subi	r18, 0x01	; 1
     16a:	31 09       	sbc	r19, r1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	82 17       	cp	r24, r18
     170:	93 07       	cpc	r25, r19
     172:	69 f0       	breq	.+26     	; 0x18e <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     174:	8c 81       	ldd	r24, Y+4	; 0x04
     176:	9d 81       	ldd	r25, Y+5	; 0x05
     178:	fe 01       	movw	r30, r28
     17a:	e8 0f       	add	r30, r24
     17c:	f9 1f       	adc	r31, r25
     17e:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	28 23       	and	r18, r24
     184:	39 23       	and	r19, r25
     186:	3d 83       	std	Y+5, r19	; 0x05
     188:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	01 c0       	rjmp	.+2      	; 0x190 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	08 95       	ret

00000198 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	ec 01       	movw	r28, r24
     1a2:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     1a4:	d1 df       	rcall	.-94     	; 0x148 <FifoDataLength>
     1a6:	88 23       	and	r24, r24
     1a8:	a1 f0       	breq	.+40     	; 0x1d2 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     1aa:	ea 81       	ldd	r30, Y+2	; 0x02
     1ac:	fb 81       	ldd	r31, Y+3	; 0x03
     1ae:	ec 0f       	add	r30, r28
     1b0:	fd 1f       	adc	r31, r29
     1b2:	86 81       	ldd	r24, Z+6	; 0x06
     1b4:	f8 01       	movw	r30, r16
     1b6:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     1b8:	28 81       	ld	r18, Y
     1ba:	39 81       	ldd	r19, Y+1	; 0x01
     1bc:	21 50       	subi	r18, 0x01	; 1
     1be:	31 09       	sbc	r19, r1
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	9b 81       	ldd	r25, Y+3	; 0x03
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	82 23       	and	r24, r18
     1c8:	93 23       	and	r25, r19
     1ca:	9b 83       	std	Y+3, r25	; 0x03
     1cc:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <init>:
// --  END MAIN --


void init()
{
	DDRA |= (1<<PORTA0|1<<PORTA1); //set status diodes to outputs
     1de:	81 b1       	in	r24, 0x01	; 1
     1e0:	83 60       	ori	r24, 0x03	; 3
     1e2:	81 b9       	out	0x01, r24	; 1
	USART_init();
     1e4:	03 d4       	rcall	.+2054   	; 0x9ec <USART_init>
	TWI_init(C_ADRESS);
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	e0 d0       	rcall	.+448    	; 0x3aa <TWI_init>
	init_counters();
     1ea:	8d cf       	rjmp	.-230    	; 0x106 <init_counters>

000001ec <main>:

// -- MAIN --

int main(void)
{
	init();
     1ec:	f8 df       	rcall	.-16     	; 0x1de <init>
	sei();
     1ee:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f0:	2f ef       	ldi	r18, 0xFF	; 255
     1f2:	8f e1       	ldi	r24, 0x1F	; 31
     1f4:	9c e1       	ldi	r25, 0x1C	; 28
     1f6:	21 50       	subi	r18, 0x01	; 1
     1f8:	80 40       	sbci	r24, 0x00	; 0
     1fa:	90 40       	sbci	r25, 0x00	; 0
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0xa>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x14>
     200:	00 00       	nop
	_delay_ms(500);
	while(1)
	{
		PORTA ^= (1<<PORTA0);
     202:	c1 e0       	ldi	r28, 0x01	; 1
     204:	82 b1       	in	r24, 0x02	; 2
     206:	8c 27       	eor	r24, r28
     208:	82 b9       	out	0x02, r24	; 2
		
		
		USART_DecodeRxFIFO();
     20a:	bb d5       	rcall	.+2934   	; 0xd82 <USART_DecodeRxFIFO>
     20c:	fb cf       	rjmp	.-10     	; 0x204 <main+0x18>

0000020e <__vector_13>:
}

//Interrupt vectors

ISR(TIMER1_COMPA_vect)
{
     20e:	1f 92       	push	r1
     210:	0f 92       	push	r0
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	0f 92       	push	r0
     216:	11 24       	eor	r1, r1
     218:	0b b6       	in	r0, 0x3b	; 59
     21a:	0f 92       	push	r0
     21c:	2f 93       	push	r18
     21e:	3f 93       	push	r19
     220:	4f 93       	push	r20
     222:	5f 93       	push	r21
     224:	6f 93       	push	r22
     226:	7f 93       	push	r23
     228:	8f 93       	push	r24
     22a:	9f 93       	push	r25
     22c:	af 93       	push	r26
     22e:	bf 93       	push	r27
     230:	ef 93       	push	r30
     232:	ff 93       	push	r31
	decode_message_TwiFIFO();
     234:	a9 d1       	rcall	.+850    	; 0x588 <decode_message_TwiFIFO>
	TCNT1 = 0;
     236:	10 92 85 00 	sts	0x0085, r1
     23a:	10 92 84 00 	sts	0x0084, r1
}
     23e:	ff 91       	pop	r31
     240:	ef 91       	pop	r30
     242:	bf 91       	pop	r27
     244:	af 91       	pop	r26
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	7f 91       	pop	r23
     24c:	6f 91       	pop	r22
     24e:	5f 91       	pop	r21
     250:	4f 91       	pop	r20
     252:	3f 91       	pop	r19
     254:	2f 91       	pop	r18
     256:	0f 90       	pop	r0
     258:	0b be       	out	0x3b, r0	; 59
     25a:	0f 90       	pop	r0
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	0f 90       	pop	r0
     260:	1f 90       	pop	r1
     262:	18 95       	reti

00000264 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
	TCNT2 = 0;
     26e:	10 92 b2 00 	sts	0x00B2, r1
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <set_twi_reciever_enable>:
     27c:	85 e4       	ldi	r24, 0x45	; 69
     27e:	80 93 bc 00 	sts	0x00BC, r24
     282:	08 95       	ret

00000284 <clear_int>:
     284:	81 ec       	ldi	r24, 0xC1	; 193
     286:	80 93 bc 00 	sts	0x00BC, r24
     28a:	08 95       	ret

0000028c <start_bus>:
     28c:	84 ea       	ldi	r24, 0xA4	; 164
     28e:	80 93 bc 00 	sts	0x00BC, r24
     292:	08 95       	ret

00000294 <stop_bus>:
     294:	85 ed       	ldi	r24, 0xD5	; 213
     296:	80 93 bc 00 	sts	0x00BC, r24
     29a:	08 95       	ret

0000029c <Error>:
     29c:	80 91 b9 00 	lds	r24, 0x00B9
     2a0:	88 7f       	andi	r24, 0xF8	; 248
     2a2:	88 33       	cpi	r24, 0x38	; 56
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <Error+0xc>
     2a6:	f6 cf       	rjmp	.-20     	; 0x294 <stop_bus>
     2a8:	ed cf       	rjmp	.-38     	; 0x284 <clear_int>

000002aa <get_data>:
     2aa:	80 91 bb 00 	lds	r24, 0x00BB
     2ae:	08 95       	ret

000002b0 <wait_for_bus>:
     2b0:	ec eb       	ldi	r30, 0xBC	; 188
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	88 23       	and	r24, r24
     2b8:	ec f7       	brge	.-6      	; 0x2b4 <wait_for_bus+0x4>
     2ba:	08 95       	ret

000002bc <send_data_and_wait>:
     2bc:	80 93 bb 00 	sts	0x00BB, r24
     2c0:	84 e8       	ldi	r24, 0x84	; 132
     2c2:	80 93 bc 00 	sts	0x00BC, r24
     2c6:	f4 cf       	rjmp	.-24     	; 0x2b0 <wait_for_bus>

000002c8 <stop_twi>:
     2c8:	10 92 3d 23 	sts	0x233D, r1
     2cc:	10 92 3c 23 	sts	0x233C, r1
     2d0:	10 92 48 23 	sts	0x2348, r1
     2d4:	10 92 47 23 	sts	0x2347, r1
     2d8:	10 92 41 23 	sts	0x2341, r1
     2dc:	10 92 40 23 	sts	0x2340, r1
     2e0:	10 92 44 23 	sts	0x2344, r1
     2e4:	10 92 43 23 	sts	0x2343, r1
     2e8:	08 95       	ret

000002ea <reset_TWI>:
     2ea:	ec eb       	ldi	r30, 0xBC	; 188
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	80 6c       	ori	r24, 0xC0	; 192
     2f2:	80 83       	st	Z, r24
     2f4:	08 95       	ret

000002f6 <get_sensor_from_bus>:
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	c0 91 47 23 	lds	r28, 0x2347
     2fe:	d0 91 48 23 	lds	r29, 0x2348
     302:	c7 30       	cpi	r28, 0x07	; 7
     304:	d1 05       	cpc	r29, r1
     306:	91 f4       	brne	.+36     	; 0x32c <get_sensor_from_bus+0x36>
     308:	ee e2       	ldi	r30, 0x2E	; 46
     30a:	f2 e2       	ldi	r31, 0x22	; 34
     30c:	ad e4       	ldi	r26, 0x4D	; 77
     30e:	b3 e2       	ldi	r27, 0x23	; 35
     310:	85 e3       	ldi	r24, 0x35	; 53
     312:	92 e2       	ldi	r25, 0x22	; 34
     314:	21 91       	ld	r18, Z+
     316:	2d 93       	st	X+, r18
     318:	e8 17       	cp	r30, r24
     31a:	f9 07       	cpc	r31, r25
     31c:	d9 f7       	brne	.-10     	; 0x314 <get_sensor_from_bus+0x1e>
     31e:	c5 df       	rcall	.-118    	; 0x2aa <get_data>
     320:	80 93 42 23 	sts	0x2342, r24
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 23 22 	sts	0x2223, r24
     32a:	0d c0       	rjmp	.+26     	; 0x346 <get_sensor_from_bus+0x50>
     32c:	be df       	rcall	.-132    	; 0x2aa <get_data>
     32e:	c2 5d       	subi	r28, 0xD2	; 210
     330:	dd 4d       	sbci	r29, 0xDD	; 221
     332:	88 83       	st	Y, r24
     334:	80 91 47 23 	lds	r24, 0x2347
     338:	90 91 48 23 	lds	r25, 0x2348
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	90 93 48 23 	sts	0x2348, r25
     342:	80 93 47 23 	sts	0x2347, r24
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <get_control_settings_from_bus>:
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	c0 91 43 23 	lds	r28, 0x2343
     354:	d0 91 44 23 	lds	r29, 0x2344
     358:	a8 df       	rcall	.-176    	; 0x2aa <get_data>
     35a:	c7 5c       	subi	r28, 0xC7	; 199
     35c:	dc 4d       	sbci	r29, 0xDC	; 220
     35e:	88 83       	st	Y, r24
     360:	10 92 44 23 	sts	0x2344, r1
     364:	10 92 43 23 	sts	0x2343, r1
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <get_autonom_settings_from_bus>:
     36e:	9d df       	rcall	.-198    	; 0x2aa <get_data>
     370:	80 93 37 23 	sts	0x2337, r24
     374:	08 95       	ret

00000376 <get_char_from_bus>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	c0 91 40 23 	lds	r28, 0x2340
     37e:	d0 91 41 23 	lds	r29, 0x2341
     382:	93 df       	rcall	.-218    	; 0x2aa <get_data>
     384:	c8 5c       	subi	r28, 0xC8	; 200
     386:	dd 4d       	sbci	r29, 0xDD	; 221
     388:	88 83       	st	Y, r24
     38a:	80 91 40 23 	lds	r24, 0x2340
     38e:	90 91 41 23 	lds	r25, 0x2341
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	90 93 41 23 	sts	0x2341, r25
     398:	80 93 40 23 	sts	0x2340, r24
     39c:	90 93 29 22 	sts	0x2229, r25
     3a0:	80 93 28 22 	sts	0x2228, r24
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <TWI_init>:
     3aa:	80 93 45 23 	sts	0x2345, r24
     3ae:	80 34       	cpi	r24, 0x40	; 64
     3b0:	79 f0       	breq	.+30     	; 0x3d0 <TWI_init+0x26>
     3b2:	80 38       	cpi	r24, 0x80	; 128
     3b4:	19 f0       	breq	.+6      	; 0x3bc <TWI_init+0x12>
     3b6:	80 32       	cpi	r24, 0x20	; 32
     3b8:	d1 f4       	brne	.+52     	; 0x3ee <TWI_init+0x44>
     3ba:	12 c0       	rjmp	.+36     	; 0x3e0 <TWI_init+0x36>
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	88 b9       	out	0x08, r24	; 8
     3c0:	5d df       	rcall	.-326    	; 0x27c <set_twi_reciever_enable>
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	80 93 b8 00 	sts	0x00B8, r24
     3c8:	81 e8       	ldi	r24, 0x81	; 129
     3ca:	80 93 ba 00 	sts	0x00BA, r24
     3ce:	08 95       	ret
     3d0:	8f e3       	ldi	r24, 0x3F	; 63
     3d2:	80 93 b8 00 	sts	0x00B8, r24
     3d6:	52 df       	rcall	.-348    	; 0x27c <set_twi_reciever_enable>
     3d8:	80 e4       	ldi	r24, 0x40	; 64
     3da:	80 93 ba 00 	sts	0x00BA, r24
     3de:	08 95       	ret
     3e0:	8f e3       	ldi	r24, 0x3F	; 63
     3e2:	80 93 b8 00 	sts	0x00B8, r24
     3e6:	4a df       	rcall	.-364    	; 0x27c <set_twi_reciever_enable>
     3e8:	81 e2       	ldi	r24, 0x21	; 33
     3ea:	80 93 ba 00 	sts	0x00BA, r24
     3ee:	08 95       	ret

000003f0 <TWI_send_command>:
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	c8 2f       	mov	r28, r24
     3f8:	d6 2f       	mov	r29, r22
     3fa:	14 2f       	mov	r17, r20
     3fc:	47 df       	rcall	.-370    	; 0x28c <start_bus>
     3fe:	58 df       	rcall	.-336    	; 0x2b0 <wait_for_bus>
     400:	90 91 b9 00 	lds	r25, 0x00B9
     404:	98 7f       	andi	r25, 0xF8	; 248
     406:	98 30       	cpi	r25, 0x08	; 8
     408:	19 f0       	breq	.+6      	; 0x410 <TWI_send_command+0x20>
     40a:	48 df       	rcall	.-368    	; 0x29c <Error>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	34 c0       	rjmp	.+104    	; 0x478 <TWI_send_command+0x88>
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	54 df       	rcall	.-344    	; 0x2bc <send_data_and_wait>
     414:	80 91 b9 00 	lds	r24, 0x00B9
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 31       	cpi	r24, 0x18	; 24
     41c:	19 f0       	breq	.+6      	; 0x424 <TWI_send_command+0x34>
     41e:	3e df       	rcall	.-388    	; 0x29c <Error>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	2a c0       	rjmp	.+84     	; 0x478 <TWI_send_command+0x88>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	4a df       	rcall	.-364    	; 0x2bc <send_data_and_wait>
     428:	80 91 b9 00 	lds	r24, 0x00B9
     42c:	88 7f       	andi	r24, 0xF8	; 248
     42e:	88 32       	cpi	r24, 0x28	; 40
     430:	19 f0       	breq	.+6      	; 0x438 <TWI_send_command+0x48>
     432:	34 df       	rcall	.-408    	; 0x29c <Error>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	20 c0       	rjmp	.+64     	; 0x478 <TWI_send_command+0x88>
     438:	8c 2f       	mov	r24, r28
     43a:	40 df       	rcall	.-384    	; 0x2bc <send_data_and_wait>
     43c:	80 91 b9 00 	lds	r24, 0x00B9
     440:	88 7f       	andi	r24, 0xF8	; 248
     442:	88 32       	cpi	r24, 0x28	; 40
     444:	19 f0       	breq	.+6      	; 0x44c <TWI_send_command+0x5c>
     446:	2a df       	rcall	.-428    	; 0x29c <Error>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	16 c0       	rjmp	.+44     	; 0x478 <TWI_send_command+0x88>
     44c:	8d 2f       	mov	r24, r29
     44e:	36 df       	rcall	.-404    	; 0x2bc <send_data_and_wait>
     450:	80 91 b9 00 	lds	r24, 0x00B9
     454:	88 7f       	andi	r24, 0xF8	; 248
     456:	88 32       	cpi	r24, 0x28	; 40
     458:	19 f0       	breq	.+6      	; 0x460 <TWI_send_command+0x70>
     45a:	20 df       	rcall	.-448    	; 0x29c <Error>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0c c0       	rjmp	.+24     	; 0x478 <TWI_send_command+0x88>
     460:	81 2f       	mov	r24, r17
     462:	2c df       	rcall	.-424    	; 0x2bc <send_data_and_wait>
     464:	80 91 b9 00 	lds	r24, 0x00B9
     468:	88 7f       	andi	r24, 0xF8	; 248
     46a:	88 32       	cpi	r24, 0x28	; 40
     46c:	19 f0       	breq	.+6      	; 0x474 <TWI_send_command+0x84>
     46e:	16 df       	rcall	.-468    	; 0x29c <Error>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <TWI_send_command+0x88>
     474:	0f df       	rcall	.-482    	; 0x294 <stop_bus>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	08 95       	ret

00000480 <TWI_send_string>:
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	c8 2f       	mov	r28, r24
     48e:	e6 2e       	mov	r14, r22
     490:	f7 2e       	mov	r15, r23
     492:	fc de       	rcall	.-520    	; 0x28c <start_bus>
     494:	0d df       	rcall	.-486    	; 0x2b0 <wait_for_bus>
     496:	90 91 b9 00 	lds	r25, 0x00B9
     49a:	98 7f       	andi	r25, 0xF8	; 248
     49c:	98 30       	cpi	r25, 0x08	; 8
     49e:	19 f0       	breq	.+6      	; 0x4a6 <TWI_send_string+0x26>
     4a0:	fd de       	rcall	.-518    	; 0x29c <Error>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	2c c0       	rjmp	.+88     	; 0x4fe <TWI_send_string+0x7e>
     4a6:	8c 2f       	mov	r24, r28
     4a8:	09 df       	rcall	.-494    	; 0x2bc <send_data_and_wait>
     4aa:	80 91 b9 00 	lds	r24, 0x00B9
     4ae:	88 7f       	andi	r24, 0xF8	; 248
     4b0:	88 31       	cpi	r24, 0x18	; 24
     4b2:	19 f0       	breq	.+6      	; 0x4ba <TWI_send_string+0x3a>
     4b4:	f3 de       	rcall	.-538    	; 0x29c <Error>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	22 c0       	rjmp	.+68     	; 0x4fe <TWI_send_string+0x7e>
     4ba:	89 e1       	ldi	r24, 0x19	; 25
     4bc:	ff de       	rcall	.-514    	; 0x2bc <send_data_and_wait>
     4be:	80 91 b9 00 	lds	r24, 0x00B9
     4c2:	88 7f       	andi	r24, 0xF8	; 248
     4c4:	88 32       	cpi	r24, 0x28	; 40
     4c6:	29 f4       	brne	.+10     	; 0x4d2 <TWI_send_string+0x52>
     4c8:	0e 2d       	mov	r16, r14
     4ca:	1f 2d       	mov	r17, r15
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	d0 e0       	ldi	r29, 0x00	; 0
     4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <TWI_send_string+0x62>
     4d2:	e4 de       	rcall	.-568    	; 0x29c <Error>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	13 c0       	rjmp	.+38     	; 0x4fe <TWI_send_string+0x7e>
     4d8:	f8 01       	movw	r30, r16
     4da:	81 91       	ld	r24, Z+
     4dc:	8f 01       	movw	r16, r30
     4de:	ee de       	rcall	.-548    	; 0x2bc <send_data_and_wait>
     4e0:	21 96       	adiw	r28, 0x01	; 1
     4e2:	ee 2d       	mov	r30, r14
     4e4:	ff 2d       	mov	r31, r15
     4e6:	df 01       	movw	r26, r30
     4e8:	0d 90       	ld	r0, X+
     4ea:	00 20       	and	r0, r0
     4ec:	e9 f7       	brne	.-6      	; 0x4e8 <TWI_send_string+0x68>
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	ae 1b       	sub	r26, r30
     4f2:	bf 0b       	sbc	r27, r31
     4f4:	ca 17       	cp	r28, r26
     4f6:	db 07       	cpc	r29, r27
     4f8:	78 f3       	brcs	.-34     	; 0x4d8 <TWI_send_string+0x58>
     4fa:	cc de       	rcall	.-616    	; 0x294 <stop_bus>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	08 95       	ret

0000050c <TWI_send_string_fixed_length>:
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	c8 2f       	mov	r28, r24
     51a:	e6 2e       	mov	r14, r22
     51c:	f7 2e       	mov	r15, r23
     51e:	8a 01       	movw	r16, r20
     520:	b5 de       	rcall	.-662    	; 0x28c <start_bus>
     522:	c6 de       	rcall	.-628    	; 0x2b0 <wait_for_bus>
     524:	90 91 b9 00 	lds	r25, 0x00B9
     528:	98 7f       	andi	r25, 0xF8	; 248
     52a:	98 30       	cpi	r25, 0x08	; 8
     52c:	19 f0       	breq	.+6      	; 0x534 <TWI_send_string_fixed_length+0x28>
     52e:	b6 de       	rcall	.-660    	; 0x29c <Error>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	23 c0       	rjmp	.+70     	; 0x57a <TWI_send_string_fixed_length+0x6e>
     534:	8c 2f       	mov	r24, r28
     536:	c2 de       	rcall	.-636    	; 0x2bc <send_data_and_wait>
     538:	80 91 b9 00 	lds	r24, 0x00B9
     53c:	88 7f       	andi	r24, 0xF8	; 248
     53e:	88 31       	cpi	r24, 0x18	; 24
     540:	19 f0       	breq	.+6      	; 0x548 <TWI_send_string_fixed_length+0x3c>
     542:	ac de       	rcall	.-680    	; 0x29c <Error>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	19 c0       	rjmp	.+50     	; 0x57a <TWI_send_string_fixed_length+0x6e>
     548:	89 e1       	ldi	r24, 0x19	; 25
     54a:	b8 de       	rcall	.-656    	; 0x2bc <send_data_and_wait>
     54c:	80 91 b9 00 	lds	r24, 0x00B9
     550:	88 7f       	andi	r24, 0xF8	; 248
     552:	88 32       	cpi	r24, 0x28	; 40
     554:	21 f4       	brne	.+8      	; 0x55e <TWI_send_string_fixed_length+0x52>
     556:	10 16       	cp	r1, r16
     558:	11 06       	cpc	r1, r17
     55a:	24 f0       	brlt	.+8      	; 0x564 <TWI_send_string_fixed_length+0x58>
     55c:	0c c0       	rjmp	.+24     	; 0x576 <TWI_send_string_fixed_length+0x6a>
     55e:	9e de       	rcall	.-708    	; 0x29c <Error>
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0b c0       	rjmp	.+22     	; 0x57a <TWI_send_string_fixed_length+0x6e>
     564:	ce 2d       	mov	r28, r14
     566:	df 2d       	mov	r29, r15
     568:	0c 0f       	add	r16, r28
     56a:	1d 1f       	adc	r17, r29
     56c:	89 91       	ld	r24, Y+
     56e:	a6 de       	rcall	.-692    	; 0x2bc <send_data_and_wait>
     570:	c0 17       	cp	r28, r16
     572:	d1 07       	cpc	r29, r17
     574:	d9 f7       	brne	.-10     	; 0x56c <TWI_send_string_fixed_length+0x60>
     576:	8e de       	rcall	.-740    	; 0x294 <stop_bus>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	08 95       	ret

00000588 <decode_message_TwiFIFO>:
     588:	8f 92       	push	r8
     58a:	9f 92       	push	r9
     58c:	af 92       	push	r10
     58e:	bf 92       	push	r11
     590:	cf 92       	push	r12
     592:	df 92       	push	r13
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	ad b6       	in	r10, 0x3d	; 61
     5a6:	be b6       	in	r11, 0x3e	; 62
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 91 00 01 	lds	r24, 0x0100
     5b0:	90 91 01 01 	lds	r25, 0x0101
     5b4:	f1 dd       	rcall	.-1054   	; 0x198 <FifoRead>
     5b6:	81 11       	cpse	r24, r1
     5b8:	3b c0       	rjmp	.+118    	; 0x630 <decode_message_TwiFIFO+0xa8>
     5ba:	c0 90 00 00 	lds	r12, 0x0000
     5be:	d1 2c       	mov	r13, r1
     5c0:	96 01       	movw	r18, r12
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	31 09       	sbc	r19, r1
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	c1 14       	cp	r12, r1
     5cc:	d1 04       	cpc	r13, r1
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <decode_message_TwiFIFO+0x4c>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	2d b7       	in	r18, 0x3d	; 61
     5da:	3e b7       	in	r19, 0x3e	; 62
     5dc:	28 1b       	sub	r18, r24
     5de:	39 0b       	sbc	r19, r25
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	3e bf       	out	0x3e, r19	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	2d bf       	out	0x3d, r18	; 61
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	82 2e       	mov	r8, r18
     5f0:	93 2e       	mov	r9, r19
     5f2:	1c 14       	cp	r1, r12
     5f4:	1d 04       	cpc	r1, r13
     5f6:	bc f4       	brge	.+46     	; 0x626 <decode_message_TwiFIFO+0x9e>
     5f8:	e2 2e       	mov	r14, r18
     5fa:	f3 2e       	mov	r15, r19
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	80 91 00 01 	lds	r24, 0x0100
     608:	90 91 01 01 	lds	r25, 0x0101
     60c:	c5 dd       	rcall	.-1142   	; 0x198 <FifoRead>
     60e:	81 11       	cpse	r24, r1
     610:	11 c0       	rjmp	.+34     	; 0x634 <decode_message_TwiFIFO+0xac>
     612:	20 91 00 00 	lds	r18, 0x0000
     616:	f7 01       	movw	r30, r14
     618:	21 93       	st	Z+, r18
     61a:	7f 01       	movw	r14, r30
     61c:	0f 5f       	subi	r16, 0xFF	; 255
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	0c 15       	cp	r16, r12
     622:	1d 05       	cpc	r17, r13
     624:	6c f3       	brlt	.-38     	; 0x600 <decode_message_TwiFIFO+0x78>
     626:	88 2d       	mov	r24, r8
     628:	99 2d       	mov	r25, r9
     62a:	b2 d2       	rcall	.+1380   	; 0xb90 <USART_SendMessage>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	03 c0       	rjmp	.+6      	; 0x636 <decode_message_TwiFIFO+0xae>
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	01 c0       	rjmp	.+2      	; 0x636 <decode_message_TwiFIFO+0xae>
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	be be       	out	0x3e, r11	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	ad be       	out	0x3d, r10	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	08 95       	ret

0000065a <write_to_TwiFIFO>:
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	e8 2e       	mov	r14, r24
     668:	f9 2e       	mov	r15, r25
     66a:	e8 2f       	mov	r30, r24
     66c:	f9 2f       	mov	r31, r25
     66e:	df 01       	movw	r26, r30
     670:	0d 90       	ld	r0, X+
     672:	00 20       	and	r0, r0
     674:	e9 f7       	brne	.-6      	; 0x670 <write_to_TwiFIFO+0x16>
     676:	11 97       	sbiw	r26, 0x01	; 1
     678:	bd 01       	movw	r22, r26
     67a:	6e 1b       	sub	r22, r30
     67c:	7f 0b       	sbc	r23, r31
     67e:	80 91 00 01 	lds	r24, 0x0100
     682:	90 91 01 01 	lds	r25, 0x0101
     686:	68 dd       	rcall	.-1328   	; 0x158 <FifoWrite>
     688:	81 11       	cpse	r24, r1
     68a:	1e c0       	rjmp	.+60     	; 0x6c8 <write_to_TwiFIFO+0x6e>
     68c:	0e 2d       	mov	r16, r14
     68e:	1f 2d       	mov	r17, r15
     690:	c0 e0       	ldi	r28, 0x00	; 0
     692:	d0 e0       	ldi	r29, 0x00	; 0
     694:	0b c0       	rjmp	.+22     	; 0x6ac <write_to_TwiFIFO+0x52>
     696:	f8 01       	movw	r30, r16
     698:	61 91       	ld	r22, Z+
     69a:	8f 01       	movw	r16, r30
     69c:	80 91 00 01 	lds	r24, 0x0100
     6a0:	90 91 01 01 	lds	r25, 0x0101
     6a4:	59 dd       	rcall	.-1358   	; 0x158 <FifoWrite>
     6a6:	81 11       	cpse	r24, r1
     6a8:	11 c0       	rjmp	.+34     	; 0x6cc <write_to_TwiFIFO+0x72>
     6aa:	21 96       	adiw	r28, 0x01	; 1
     6ac:	ee 2d       	mov	r30, r14
     6ae:	ff 2d       	mov	r31, r15
     6b0:	df 01       	movw	r26, r30
     6b2:	0d 90       	ld	r0, X+
     6b4:	00 20       	and	r0, r0
     6b6:	e9 f7       	brne	.-6      	; 0x6b2 <write_to_TwiFIFO+0x58>
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	ae 1b       	sub	r26, r30
     6bc:	bf 0b       	sbc	r27, r31
     6be:	ca 17       	cp	r28, r26
     6c0:	db 07       	cpc	r29, r27
     6c2:	48 f3       	brcs	.-46     	; 0x696 <write_to_TwiFIFO+0x3c>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <write_to_TwiFIFO+0x74>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <write_to_TwiFIFO+0x74>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	08 95       	ret

000006dc <__vector_26>:
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	0b b6       	in	r0, 0x3b	; 59
     6e8:	0f 92       	push	r0
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
     706:	80 91 45 23 	lds	r24, 0x2345
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	09 f4       	brne	.+2      	; 0x710 <__vector_26+0x34>
     70e:	54 c1       	rjmp	.+680    	; 0x9b8 <__vector_26+0x2dc>
     710:	48 f4       	brcc	.+18     	; 0x724 <__vector_26+0x48>
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	09 f4       	brne	.+2      	; 0x718 <__vector_26+0x3c>
     716:	4c c1       	rjmp	.+664    	; 0x9b0 <__vector_26+0x2d4>
     718:	08 f4       	brcc	.+2      	; 0x71c <__vector_26+0x40>
     71a:	42 c1       	rjmp	.+644    	; 0x9a0 <__vector_26+0x2c4>
     71c:	84 30       	cpi	r24, 0x04	; 4
     71e:	09 f0       	breq	.+2      	; 0x722 <__vector_26+0x46>
     720:	50 c1       	rjmp	.+672    	; 0x9c2 <__vector_26+0x2e6>
     722:	42 c1       	rjmp	.+644    	; 0x9a8 <__vector_26+0x2cc>
     724:	80 34       	cpi	r24, 0x40	; 64
     726:	09 f4       	brne	.+2      	; 0x72a <__vector_26+0x4e>
     728:	83 c0       	rjmp	.+262    	; 0x830 <__vector_26+0x154>
     72a:	80 38       	cpi	r24, 0x80	; 128
     72c:	21 f0       	breq	.+8      	; 0x736 <__vector_26+0x5a>
     72e:	80 32       	cpi	r24, 0x20	; 32
     730:	09 f0       	breq	.+2      	; 0x734 <__vector_26+0x58>
     732:	47 c1       	rjmp	.+654    	; 0x9c2 <__vector_26+0x2e6>
     734:	bd c0       	rjmp	.+378    	; 0x8b0 <__vector_26+0x1d4>
     736:	80 91 b9 00 	lds	r24, 0x00B9
     73a:	88 7f       	andi	r24, 0xF8	; 248
     73c:	80 36       	cpi	r24, 0x60	; 96
     73e:	29 f0       	breq	.+10     	; 0x74a <__vector_26+0x6e>
     740:	80 91 b9 00 	lds	r24, 0x00B9
     744:	88 7f       	andi	r24, 0xF8	; 248
     746:	88 36       	cpi	r24, 0x68	; 104
     748:	21 f4       	brne	.+8      	; 0x752 <__vector_26+0x76>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 38 23 	sts	0x2338, r24
     750:	6d c0       	rjmp	.+218    	; 0x82c <__vector_26+0x150>
     752:	80 91 b9 00 	lds	r24, 0x00B9
     756:	88 7f       	andi	r24, 0xF8	; 248
     758:	80 38       	cpi	r24, 0x80	; 128
     75a:	b9 f5       	brne	.+110    	; 0x7ca <__vector_26+0xee>
     75c:	80 91 38 23 	lds	r24, 0x2338
     760:	88 23       	and	r24, r24
     762:	41 f0       	breq	.+16     	; 0x774 <__vector_26+0x98>
     764:	a2 dd       	rcall	.-1212   	; 0x2aa <get_data>
     766:	80 93 2c 22 	sts	0x222C, r24
     76a:	10 92 2d 22 	sts	0x222D, r1
     76e:	10 92 38 23 	sts	0x2338, r1
     772:	5c c0       	rjmp	.+184    	; 0x82c <__vector_26+0x150>
     774:	80 91 2c 22 	lds	r24, 0x222C
     778:	90 91 2d 22 	lds	r25, 0x222D
     77c:	85 30       	cpi	r24, 0x05	; 5
     77e:	91 05       	cpc	r25, r1
     780:	71 f0       	breq	.+28     	; 0x79e <__vector_26+0xc2>
     782:	24 f4       	brge	.+8      	; 0x78c <__vector_26+0xb0>
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	09 f0       	breq	.+2      	; 0x78a <__vector_26+0xae>
     788:	51 c0       	rjmp	.+162    	; 0x82c <__vector_26+0x150>
     78a:	07 c0       	rjmp	.+14     	; 0x79a <__vector_26+0xbe>
     78c:	86 30       	cpi	r24, 0x06	; 6
     78e:	91 05       	cpc	r25, r1
     790:	51 f0       	breq	.+20     	; 0x7a6 <__vector_26+0xca>
     792:	49 97       	sbiw	r24, 0x19	; 25
     794:	09 f0       	breq	.+2      	; 0x798 <__vector_26+0xbc>
     796:	4a c0       	rjmp	.+148    	; 0x82c <__vector_26+0x150>
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <__vector_26+0xc6>
     79a:	d8 dd       	rcall	.-1104   	; 0x34c <get_control_settings_from_bus>
     79c:	47 c0       	rjmp	.+142    	; 0x82c <__vector_26+0x150>
     79e:	e7 dd       	rcall	.-1074   	; 0x36e <get_autonom_settings_from_bus>
     7a0:	45 c0       	rjmp	.+138    	; 0x82c <__vector_26+0x150>
     7a2:	e9 dd       	rcall	.-1070   	; 0x376 <get_char_from_bus>
     7a4:	43 c0       	rjmp	.+134    	; 0x82c <__vector_26+0x150>
     7a6:	c0 91 2a 22 	lds	r28, 0x222A
     7aa:	d0 91 2b 22 	lds	r29, 0x222B
     7ae:	7d dd       	rcall	.-1286   	; 0x2aa <get_data>
     7b0:	c7 5b       	subi	r28, 0xB7	; 183
     7b2:	dc 4d       	sbci	r29, 0xDC	; 220
     7b4:	88 83       	st	Y, r24
     7b6:	80 91 2a 22 	lds	r24, 0x222A
     7ba:	90 91 2b 22 	lds	r25, 0x222B
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	90 93 2b 22 	sts	0x222B, r25
     7c4:	80 93 2a 22 	sts	0x222A, r24
     7c8:	31 c0       	rjmp	.+98     	; 0x82c <__vector_26+0x150>
     7ca:	80 91 b9 00 	lds	r24, 0x00B9
     7ce:	88 7f       	andi	r24, 0xF8	; 248
     7d0:	80 39       	cpi	r24, 0x90	; 144
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <__vector_26+0xfc>
     7d4:	90 dd       	rcall	.-1248   	; 0x2f6 <get_sensor_from_bus>
     7d6:	2a c0       	rjmp	.+84     	; 0x82c <__vector_26+0x150>
     7d8:	80 91 b9 00 	lds	r24, 0x00B9
     7dc:	88 7f       	andi	r24, 0xF8	; 248
     7de:	80 3a       	cpi	r24, 0xA0	; 160
     7e0:	29 f5       	brne	.+74     	; 0x82c <__vector_26+0x150>
     7e2:	72 dd       	rcall	.-1308   	; 0x2c8 <stop_twi>
     7e4:	80 91 2c 22 	lds	r24, 0x222C
     7e8:	90 91 2d 22 	lds	r25, 0x222D
     7ec:	85 30       	cpi	r24, 0x05	; 5
     7ee:	91 05       	cpc	r25, r1
     7f0:	71 f0       	breq	.+28     	; 0x80e <__vector_26+0x132>
     7f2:	1c f4       	brge	.+6      	; 0x7fa <__vector_26+0x11e>
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	d1 f4       	brne	.+52     	; 0x82c <__vector_26+0x150>
     7f8:	06 c0       	rjmp	.+12     	; 0x806 <__vector_26+0x12a>
     7fa:	86 30       	cpi	r24, 0x06	; 6
     7fc:	91 05       	cpc	r25, r1
     7fe:	79 f0       	breq	.+30     	; 0x81e <__vector_26+0x142>
     800:	49 97       	sbiw	r24, 0x19	; 25
     802:	a1 f4       	brne	.+40     	; 0x82c <__vector_26+0x150>
     804:	08 c0       	rjmp	.+16     	; 0x816 <__vector_26+0x13a>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	80 93 21 22 	sts	0x2221, r24
     80c:	0f c0       	rjmp	.+30     	; 0x82c <__vector_26+0x150>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 20 22 	sts	0x2220, r24
     814:	0b c0       	rjmp	.+22     	; 0x82c <__vector_26+0x150>
     816:	88 e3       	ldi	r24, 0x38	; 56
     818:	92 e2       	ldi	r25, 0x22	; 34
     81a:	1f df       	rcall	.-450    	; 0x65a <write_to_TwiFIFO>
     81c:	07 c0       	rjmp	.+14     	; 0x82c <__vector_26+0x150>
     81e:	89 e4       	ldi	r24, 0x49	; 73
     820:	93 e2       	ldi	r25, 0x23	; 35
     822:	d7 d1       	rcall	.+942    	; 0xbd2 <USART_SendValue>
     824:	10 92 2b 22 	sts	0x222B, r1
     828:	10 92 2a 22 	sts	0x222A, r1
     82c:	5e dd       	rcall	.-1348   	; 0x2ea <reset_TWI>
     82e:	c9 c0       	rjmp	.+402    	; 0x9c2 <__vector_26+0x2e6>
     830:	80 91 b9 00 	lds	r24, 0x00B9
     834:	88 7f       	andi	r24, 0xF8	; 248
     836:	80 36       	cpi	r24, 0x60	; 96
     838:	29 f0       	breq	.+10     	; 0x844 <__vector_26+0x168>
     83a:	80 91 b9 00 	lds	r24, 0x00B9
     83e:	88 7f       	andi	r24, 0xF8	; 248
     840:	88 36       	cpi	r24, 0x68	; 104
     842:	21 f4       	brne	.+8      	; 0x84c <__vector_26+0x170>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 38 23 	sts	0x2338, r24
     84a:	30 c0       	rjmp	.+96     	; 0x8ac <__vector_26+0x1d0>
     84c:	80 91 b9 00 	lds	r24, 0x00B9
     850:	88 7f       	andi	r24, 0xF8	; 248
     852:	80 38       	cpi	r24, 0x80	; 128
     854:	e1 f4       	brne	.+56     	; 0x88e <__vector_26+0x1b2>
     856:	80 91 38 23 	lds	r24, 0x2338
     85a:	88 23       	and	r24, r24
     85c:	41 f0       	breq	.+16     	; 0x86e <__vector_26+0x192>
     85e:	25 dd       	rcall	.-1462   	; 0x2aa <get_data>
     860:	80 93 2c 22 	sts	0x222C, r24
     864:	10 92 2d 22 	sts	0x222D, r1
     868:	10 92 38 23 	sts	0x2338, r1
     86c:	1f c0       	rjmp	.+62     	; 0x8ac <__vector_26+0x1d0>
     86e:	80 91 2c 22 	lds	r24, 0x222C
     872:	90 91 2d 22 	lds	r25, 0x222D
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	91 05       	cpc	r25, r1
     87a:	19 f0       	breq	.+6      	; 0x882 <__vector_26+0x1a6>
     87c:	49 97       	sbiw	r24, 0x19	; 25
     87e:	b1 f4       	brne	.+44     	; 0x8ac <__vector_26+0x1d0>
     880:	04 c0       	rjmp	.+8      	; 0x88a <__vector_26+0x1ae>
     882:	13 dd       	rcall	.-1498   	; 0x2aa <get_data>
     884:	80 93 46 23 	sts	0x2346, r24
     888:	11 c0       	rjmp	.+34     	; 0x8ac <__vector_26+0x1d0>
     88a:	75 dd       	rcall	.-1302   	; 0x376 <get_char_from_bus>
     88c:	0f c0       	rjmp	.+30     	; 0x8ac <__vector_26+0x1d0>
     88e:	80 91 b9 00 	lds	r24, 0x00B9
     892:	88 7f       	andi	r24, 0xF8	; 248
     894:	80 3a       	cpi	r24, 0xA0	; 160
     896:	51 f4       	brne	.+20     	; 0x8ac <__vector_26+0x1d0>
     898:	17 dd       	rcall	.-1490   	; 0x2c8 <stop_twi>
     89a:	80 91 2c 22 	lds	r24, 0x222C
     89e:	90 91 2d 22 	lds	r25, 0x222D
     8a2:	02 97       	sbiw	r24, 0x02	; 2
     8a4:	19 f4       	brne	.+6      	; 0x8ac <__vector_26+0x1d0>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 1e 22 	sts	0x221E, r24
     8ac:	1e dd       	rcall	.-1476   	; 0x2ea <reset_TWI>
     8ae:	89 c0       	rjmp	.+274    	; 0x9c2 <__vector_26+0x2e6>
     8b0:	80 91 b9 00 	lds	r24, 0x00B9
     8b4:	88 7f       	andi	r24, 0xF8	; 248
     8b6:	80 36       	cpi	r24, 0x60	; 96
     8b8:	29 f0       	breq	.+10     	; 0x8c4 <__vector_26+0x1e8>
     8ba:	80 91 b9 00 	lds	r24, 0x00B9
     8be:	88 7f       	andi	r24, 0xF8	; 248
     8c0:	88 36       	cpi	r24, 0x68	; 104
     8c2:	21 f4       	brne	.+8      	; 0x8cc <__vector_26+0x1f0>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 38 23 	sts	0x2338, r24
     8ca:	7a c0       	rjmp	.+244    	; 0x9c0 <__vector_26+0x2e4>
     8cc:	80 91 b9 00 	lds	r24, 0x00B9
     8d0:	88 7f       	andi	r24, 0xF8	; 248
     8d2:	80 38       	cpi	r24, 0x80	; 128
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__vector_26+0x1fc>
     8d6:	57 c0       	rjmp	.+174    	; 0x986 <__vector_26+0x2aa>
     8d8:	80 91 38 23 	lds	r24, 0x2338
     8dc:	88 23       	and	r24, r24
     8de:	41 f0       	breq	.+16     	; 0x8f0 <__vector_26+0x214>
     8e0:	e4 dc       	rcall	.-1592   	; 0x2aa <get_data>
     8e2:	80 93 2c 22 	sts	0x222C, r24
     8e6:	10 92 2d 22 	sts	0x222D, r1
     8ea:	10 92 38 23 	sts	0x2338, r1
     8ee:	68 c0       	rjmp	.+208    	; 0x9c0 <__vector_26+0x2e4>
     8f0:	80 91 2c 22 	lds	r24, 0x222C
     8f4:	90 91 2d 22 	lds	r25, 0x222D
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	91 05       	cpc	r25, r1
     8fc:	09 f4       	brne	.+2      	; 0x900 <__vector_26+0x224>
     8fe:	3f c0       	rjmp	.+126    	; 0x97e <__vector_26+0x2a2>
     900:	1c f4       	brge	.+6      	; 0x908 <__vector_26+0x22c>
     902:	89 2b       	or	r24, r25
     904:	41 f0       	breq	.+16     	; 0x916 <__vector_26+0x23a>
     906:	5c c0       	rjmp	.+184    	; 0x9c0 <__vector_26+0x2e4>
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	91 05       	cpc	r25, r1
     90c:	b1 f0       	breq	.+44     	; 0x93a <__vector_26+0x25e>
     90e:	05 97       	sbiw	r24, 0x05	; 5
     910:	09 f0       	breq	.+2      	; 0x914 <__vector_26+0x238>
     912:	56 c0       	rjmp	.+172    	; 0x9c0 <__vector_26+0x2e4>
     914:	36 c0       	rjmp	.+108    	; 0x982 <__vector_26+0x2a6>
     916:	c0 91 3c 23 	lds	r28, 0x233C
     91a:	d0 91 3d 23 	lds	r29, 0x233D
     91e:	c5 dc       	rcall	.-1654   	; 0x2aa <get_data>
     920:	cb 5c       	subi	r28, 0xCB	; 203
     922:	dd 4d       	sbci	r29, 0xDD	; 221
     924:	88 83       	st	Y, r24
     926:	80 91 3c 23 	lds	r24, 0x233C
     92a:	90 91 3d 23 	lds	r25, 0x233D
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	90 93 3d 23 	sts	0x233D, r25
     934:	80 93 3c 23 	sts	0x233C, r24
     938:	43 c0       	rjmp	.+134    	; 0x9c0 <__vector_26+0x2e4>
     93a:	b7 dc       	rcall	.-1682   	; 0x2aa <get_data>
     93c:	20 91 3e 23 	lds	r18, 0x233E
     940:	30 91 3f 23 	lds	r19, 0x233F
     944:	a9 01       	movw	r20, r18
     946:	48 0f       	add	r20, r24
     948:	51 1d       	adc	r21, r1
     94a:	ca 01       	movw	r24, r20
     94c:	18 16       	cp	r1, r24
     94e:	19 06       	cpc	r1, r25
     950:	3c f0       	brlt	.+14     	; 0x960 <__vector_26+0x284>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 3f 23 	sts	0x233F, r25
     95a:	80 93 3e 23 	sts	0x233E, r24
     95e:	30 c0       	rjmp	.+96     	; 0x9c0 <__vector_26+0x2e4>
     960:	48 30       	cpi	r20, 0x08	; 8
     962:	51 05       	cpc	r21, r1
     964:	2c f4       	brge	.+10     	; 0x970 <__vector_26+0x294>
     966:	50 93 3f 23 	sts	0x233F, r21
     96a:	40 93 3e 23 	sts	0x233E, r20
     96e:	28 c0       	rjmp	.+80     	; 0x9c0 <__vector_26+0x2e4>
     970:	87 e0       	ldi	r24, 0x07	; 7
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 3f 23 	sts	0x233F, r25
     978:	80 93 3e 23 	sts	0x233E, r24
     97c:	21 c0       	rjmp	.+66     	; 0x9c0 <__vector_26+0x2e4>
     97e:	e6 dc       	rcall	.-1588   	; 0x34c <get_control_settings_from_bus>
     980:	1f c0       	rjmp	.+62     	; 0x9c0 <__vector_26+0x2e4>
     982:	f5 dc       	rcall	.-1558   	; 0x36e <get_autonom_settings_from_bus>
     984:	1d c0       	rjmp	.+58     	; 0x9c0 <__vector_26+0x2e4>
     986:	80 91 b9 00 	lds	r24, 0x00B9
     98a:	88 7f       	andi	r24, 0xF8	; 248
     98c:	80 39       	cpi	r24, 0x90	; 144
     98e:	11 f4       	brne	.+4      	; 0x994 <__vector_26+0x2b8>
     990:	b2 dc       	rcall	.-1692   	; 0x2f6 <get_sensor_from_bus>
     992:	16 c0       	rjmp	.+44     	; 0x9c0 <__vector_26+0x2e4>
     994:	80 91 b9 00 	lds	r24, 0x00B9
     998:	88 7f       	andi	r24, 0xF8	; 248
     99a:	80 3a       	cpi	r24, 0xA0	; 160
     99c:	89 f4       	brne	.+34     	; 0x9c0 <__vector_26+0x2e4>
     99e:	94 dc       	rcall	.-1752   	; 0x2c8 <stop_twi>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 22 22 	sts	0x2222, r24
     9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <__vector_26+0x2e6>
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 1f 22 	sts	0x221F, r24
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__vector_26+0x2e6>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 21 22 	sts	0x2221, r24
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <__vector_26+0x2e6>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 93 20 22 	sts	0x2220, r24
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__vector_26+0x2e6>
     9c0:	94 dc       	rcall	.-1752   	; 0x2ea <reset_TWI>
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0b be       	out	0x3b, r0	; 59
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <USART_init>:
	
	gTxPayload[7] = 254;
	gTxPayload[8] = TWI_get_servo();
	
	USART_SendPacket('S', 9);
}
     9ec:	10 92 c5 00 	sts	0x00C5, r1
     9f0:	89 e0       	ldi	r24, 0x09	; 9
     9f2:	80 93 c4 00 	sts	0x00C4, r24
     9f6:	88 e9       	ldi	r24, 0x98	; 152
     9f8:	80 93 c1 00 	sts	0x00C1, r24
     9fc:	86 e0       	ldi	r24, 0x06	; 6
     9fe:	80 93 c2 00 	sts	0x00C2, r24
     a02:	08 95       	ret

00000a04 <USART_CheckTxReady>:
     a04:	80 91 c0 00 	lds	r24, 0x00C0
     a08:	80 72       	andi	r24, 0x20	; 32
     a0a:	08 95       	ret

00000a0c <USART_WriteByte>:
     a0c:	cf 93       	push	r28
     a0e:	c8 2f       	mov	r28, r24
     a10:	f9 df       	rcall	.-14     	; 0xa04 <USART_CheckTxReady>
     a12:	88 23       	and	r24, r24
     a14:	e9 f3       	breq	.-6      	; 0xa10 <USART_WriteByte+0x4>
     a16:	c0 93 c6 00 	sts	0x00C6, r28
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <USART_crc16>:
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	66 23       	and	r22, r22
     a30:	09 f4       	brne	.+2      	; 0xa34 <USART_crc16+0x16>
     a32:	3e c0       	rjmp	.+124    	; 0xab0 <USART_crc16+0x92>
     a34:	06 2f       	mov	r16, r22
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	4f ef       	ldi	r20, 0xFF	; 255
     a3a:	5f ef       	ldi	r21, 0xFF	; 255
     a3c:	ee ef       	ldi	r30, 0xFE	; 254
     a3e:	ff ef       	ldi	r31, 0xFF	; 255
     a40:	c6 2e       	mov	r12, r22
     a42:	d1 2c       	mov	r13, r1
     a44:	e8 2e       	mov	r14, r24
     a46:	f1 2c       	mov	r15, r1
     a48:	c8 e0       	ldi	r28, 0x08	; 8
     a4a:	d0 e0       	ldi	r29, 0x00	; 0
     a4c:	ee 3f       	cpi	r30, 0xFE	; 254
     a4e:	6f ef       	ldi	r22, 0xFF	; 255
     a50:	f6 07       	cpc	r31, r22
     a52:	19 f4       	brne	.+6      	; 0xa5a <USART_crc16+0x3c>
     a54:	8e 2d       	mov	r24, r14
     a56:	9f 2d       	mov	r25, r15
     a58:	30 c0       	rjmp	.+96     	; 0xaba <USART_crc16+0x9c>
     a5a:	ef 3f       	cpi	r30, 0xFF	; 255
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	f8 07       	cpc	r31, r24
     a60:	19 f4       	brne	.+6      	; 0xa68 <USART_crc16+0x4a>
     a62:	8c 2d       	mov	r24, r12
     a64:	9d 2d       	mov	r25, r13
     a66:	29 c0       	rjmp	.+82     	; 0xaba <USART_crc16+0x9c>
     a68:	df 01       	movw	r26, r30
     a6a:	a7 5a       	subi	r26, 0xA7	; 167
     a6c:	ba 4d       	sbci	r27, 0xDA	; 218
     a6e:	8c 91       	ld	r24, X
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	23 c0       	rjmp	.+70     	; 0xaba <USART_crc16+0x9c>
     a74:	ba 01       	movw	r22, r20
     a76:	68 27       	eor	r22, r24
     a78:	79 27       	eor	r23, r25
     a7a:	60 ff       	sbrs	r22, 0
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <USART_crc16+0x6e>
     a7e:	56 95       	lsr	r21
     a80:	47 95       	ror	r20
     a82:	68 e0       	ldi	r22, 0x08	; 8
     a84:	46 27       	eor	r20, r22
     a86:	64 e8       	ldi	r22, 0x84	; 132
     a88:	56 27       	eor	r21, r22
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <USART_crc16+0x72>
     a8c:	56 95       	lsr	r21
     a8e:	47 95       	ror	r20
     a90:	96 95       	lsr	r25
     a92:	87 95       	ror	r24
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	31 09       	sbc	r19, r1
     a98:	69 f7       	brne	.-38     	; 0xa74 <USART_crc16+0x56>
     a9a:	31 96       	adiw	r30, 0x01	; 1
     a9c:	e0 17       	cp	r30, r16
     a9e:	f1 07       	cpc	r31, r17
     aa0:	a9 f6       	brne	.-86     	; 0xa4c <USART_crc16+0x2e>
     aa2:	9a 01       	movw	r18, r20
     aa4:	20 95       	com	r18
     aa6:	30 95       	com	r19
     aa8:	32 27       	eor	r19, r18
     aaa:	23 27       	eor	r18, r19
     aac:	32 27       	eor	r19, r18
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <USART_crc16+0x96>
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	82 2f       	mov	r24, r18
     ab6:	93 2f       	mov	r25, r19
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <USART_crc16+0xa0>
     aba:	9e 01       	movw	r18, r28
     abc:	db cf       	rjmp	.-74     	; 0xa74 <USART_crc16+0x56>
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	08 95       	ret

00000ad0 <USART_SendPacket>:
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	9e e7       	ldi	r25, 0x7E	; 126
     ada:	90 93 58 26 	sts	0x2658, r25
     ade:	80 93 59 26 	sts	0x2659, r24
     ae2:	60 93 5a 26 	sts	0x265A, r22
     ae6:	26 2f       	mov	r18, r22
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	12 16       	cp	r1, r18
     aec:	13 06       	cpc	r1, r19
     aee:	4c f5       	brge	.+82     	; 0xb42 <USART_SendPacket+0x72>
     af0:	e9 e5       	ldi	r30, 0x59	; 89
     af2:	f5 e2       	ldi	r31, 0x25	; 37
     af4:	03 e0       	ldi	r16, 0x03	; 3
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	c0 e0       	ldi	r28, 0x00	; 0
     afa:	d0 e0       	ldi	r29, 0x00	; 0
     afc:	7d e7       	ldi	r23, 0x7D	; 125
     afe:	50 e2       	ldi	r21, 0x20	; 32
     b00:	90 81       	ld	r25, Z
     b02:	49 2f       	mov	r20, r25
     b04:	4d 57       	subi	r20, 0x7D	; 125
     b06:	42 30       	cpi	r20, 0x02	; 2
     b08:	80 f4       	brcc	.+32     	; 0xb2a <USART_SendPacket+0x5a>
     b0a:	d8 01       	movw	r26, r16
     b0c:	a8 5a       	subi	r26, 0xA8	; 168
     b0e:	b9 4d       	sbci	r27, 0xD9	; 217
     b10:	ac 0f       	add	r26, r28
     b12:	bd 1f       	adc	r27, r29
     b14:	7c 93       	st	X, r23
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	d8 01       	movw	r26, r16
     b1c:	a8 5a       	subi	r26, 0xA8	; 168
     b1e:	b9 4d       	sbci	r27, 0xD9	; 217
     b20:	ac 0f       	add	r26, r28
     b22:	bd 1f       	adc	r27, r29
     b24:	95 27       	eor	r25, r21
     b26:	9c 93       	st	X, r25
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <USART_SendPacket+0x66>
     b2a:	d8 01       	movw	r26, r16
     b2c:	a8 5a       	subi	r26, 0xA8	; 168
     b2e:	b9 4d       	sbci	r27, 0xD9	; 217
     b30:	ac 0f       	add	r26, r28
     b32:	bd 1f       	adc	r27, r29
     b34:	9c 93       	st	X, r25
     b36:	21 96       	adiw	r28, 0x01	; 1
     b38:	31 96       	adiw	r30, 0x01	; 1
     b3a:	c2 17       	cp	r28, r18
     b3c:	d3 07       	cpc	r29, r19
     b3e:	01 f7       	brne	.-64     	; 0xb00 <USART_SendPacket+0x30>
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <USART_SendPacket+0x7a>
     b42:	03 e0       	ldi	r16, 0x03	; 3
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	c0 e0       	ldi	r28, 0x00	; 0
     b48:	d0 e0       	ldi	r29, 0x00	; 0
     b4a:	69 df       	rcall	.-302    	; 0xa1e <USART_crc16>
     b4c:	f8 01       	movw	r30, r16
     b4e:	e8 5a       	subi	r30, 0xA8	; 168
     b50:	f9 4d       	sbci	r31, 0xD9	; 217
     b52:	ec 0f       	add	r30, r28
     b54:	fd 1f       	adc	r31, r29
     b56:	90 83       	st	Z, r25
     b58:	81 83       	std	Z+1, r24	; 0x01
     b5a:	22 96       	adiw	r28, 0x02	; 2
     b5c:	0c 0f       	add	r16, r28
     b5e:	1d 1f       	adc	r17, r29
     b60:	f8 01       	movw	r30, r16
     b62:	e8 5a       	subi	r30, 0xA8	; 168
     b64:	f9 4d       	sbci	r31, 0xD9	; 217
     b66:	8e e7       	ldi	r24, 0x7E	; 126
     b68:	80 83       	st	Z, r24
     b6a:	c8 01       	movw	r24, r16
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	18 16       	cp	r1, r24
     b70:	19 06       	cpc	r1, r25
     b72:	4c f4       	brge	.+18     	; 0xb86 <USART_SendPacket+0xb6>
     b74:	c8 e5       	ldi	r28, 0x58	; 88
     b76:	d6 e2       	ldi	r29, 0x26	; 38
     b78:	07 5a       	subi	r16, 0xA7	; 167
     b7a:	19 4d       	sbci	r17, 0xD9	; 217
     b7c:	89 91       	ld	r24, Y+
     b7e:	46 df       	rcall	.-372    	; 0xa0c <USART_WriteByte>
     b80:	c0 17       	cp	r28, r16
     b82:	d1 07       	cpc	r29, r17
     b84:	d9 f7       	brne	.-10     	; 0xb7c <USART_SendPacket+0xac>
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret

00000b90 <USART_SendMessage>:
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	c8 2f       	mov	r28, r24
     b96:	d9 2f       	mov	r29, r25
     b98:	49 e5       	ldi	r20, 0x59	; 89
     b9a:	55 e2       	ldi	r21, 0x25	; 37
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	06 c0       	rjmp	.+12     	; 0xbae <USART_SendMessage+0x1e>
     ba2:	69 91       	ld	r22, Y+
     ba4:	fa 01       	movw	r30, r20
     ba6:	61 93       	st	Z+, r22
     ba8:	af 01       	movw	r20, r30
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	e8 2f       	mov	r30, r24
     bb0:	f9 2f       	mov	r31, r25
     bb2:	df 01       	movw	r26, r30
     bb4:	0d 90       	ld	r0, X+
     bb6:	00 20       	and	r0, r0
     bb8:	e9 f7       	brne	.-6      	; 0xbb4 <USART_SendMessage+0x24>
     bba:	11 97       	sbiw	r26, 0x01	; 1
     bbc:	bd 01       	movw	r22, r26
     bbe:	6e 1b       	sub	r22, r30
     bc0:	7f 0b       	sbc	r23, r31
     bc2:	26 17       	cp	r18, r22
     bc4:	37 07       	cpc	r19, r23
     bc6:	68 f3       	brcs	.-38     	; 0xba2 <USART_SendMessage+0x12>
     bc8:	8d e4       	ldi	r24, 0x4D	; 77
     bca:	82 df       	rcall	.-252    	; 0xad0 <USART_SendPacket>
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <USART_SendValue>:
     bd2:	a8 2f       	mov	r26, r24
     bd4:	b9 2f       	mov	r27, r25
     bd6:	e9 e5       	ldi	r30, 0x59	; 89
     bd8:	f5 e2       	ldi	r31, 0x25	; 37
     bda:	8d e5       	ldi	r24, 0x5D	; 93
     bdc:	95 e2       	ldi	r25, 0x25	; 37
     bde:	2d 91       	ld	r18, X+
     be0:	21 93       	st	Z+, r18
     be2:	e8 17       	cp	r30, r24
     be4:	f9 07       	cpc	r31, r25
     be6:	d9 f7       	brne	.-10     	; 0xbde <USART_SendValue+0xc>
     be8:	64 e0       	ldi	r22, 0x04	; 4
     bea:	86 e5       	ldi	r24, 0x56	; 86
     bec:	71 cf       	rjmp	.-286    	; 0xad0 <USART_SendPacket>

00000bee <USART_DecodeMessageRxFIFO>:

uint8_t USART_DecodeMessageRxFIFO()
{
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
	
	// TODO: send to relevant party... the display for now
	TWI_send_string_fixed_length(S_ADRESS, msg, length);
	
	return 0;
}
     c0a:	ad b6       	in	r10, 0x3d	; 61
     c0c:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gRxFIFO, len))
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 91 08 11 	lds	r24, 0x1108
     c16:	90 91 09 11 	lds	r25, 0x1109
     c1a:	be da       	rcall	.-2692   	; 0x198 <FifoRead>
     c1c:	88 23       	and	r24, r24
     c1e:	31 f0       	breq	.+12     	; 0xc2c <USART_DecodeMessageRxFIFO+0x3e>
	{
		TWI_send_string(S_ADRESS, "RxFIFO MESSAGE ERROR: LEN MISSING");
     c20:	60 e1       	ldi	r22, 0x10	; 16
     c22:	71 e2       	ldi	r23, 0x21	; 33
     c24:	80 e4       	ldi	r24, 0x40	; 64
     c26:	2c dc       	rcall	.-1960   	; 0x480 <TWI_send_string>
		return 1; // error
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	43 c0       	rjmp	.+134    	; 0xcb2 <USART_DecodeMessageRxFIFO+0xc4>
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
     c2c:	c0 90 00 00 	lds	r12, 0x0000
     c30:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];
     c32:	96 01       	movw	r18, r12
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	c1 14       	cp	r12, r1
     c3e:	d1 04       	cpc	r13, r1
     c40:	11 f0       	breq	.+4      	; 0xc46 <USART_DecodeMessageRxFIFO+0x58>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t msg[length-1+ifzero];
     c46:	82 0f       	add	r24, r18
     c48:	93 1f       	adc	r25, r19
     c4a:	2d b7       	in	r18, 0x3d	; 61
     c4c:	3e b7       	in	r19, 0x3e	; 62
     c4e:	28 1b       	sub	r18, r24
     c50:	39 0b       	sbc	r19, r25
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	3e bf       	out	0x3e, r19	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	2d bf       	out	0x3d, r18	; 61
     c5c:	8d b7       	in	r24, 0x3d	; 61
     c5e:	9e b7       	in	r25, 0x3e	; 62
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	88 2e       	mov	r8, r24
     c64:	99 2e       	mov	r9, r25

	for(int i = 0; i < length; ++i)
     c66:	1c 14       	cp	r1, r12
     c68:	1d 04       	cpc	r1, r13
     c6a:	ec f4       	brge	.+58     	; 0xca6 <USART_DecodeMessageRxFIFO+0xb8>
     c6c:	e8 2e       	mov	r14, r24
     c6e:	f9 2e       	mov	r15, r25
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gRxFIFO, character))
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	80 91 08 11 	lds	r24, 0x1108
     c7c:	90 91 09 11 	lds	r25, 0x1109
     c80:	8b da       	rcall	.-2794   	; 0x198 <FifoRead>
     c82:	88 23       	and	r24, r24
     c84:	31 f0       	breq	.+12     	; 0xc92 <USART_DecodeMessageRxFIFO+0xa4>
		{
			TWI_send_string(S_ADRESS, "RxFIFO MESSAGE ERROR: DATA MISSING");
     c86:	62 e3       	ldi	r22, 0x32	; 50
     c88:	71 e2       	ldi	r23, 0x21	; 33
     c8a:	80 e4       	ldi	r24, 0x40	; 64
     c8c:	f9 db       	rcall	.-2062   	; 0x480 <TWI_send_string>
			return 1; // error
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	10 c0       	rjmp	.+32     	; 0xcb2 <USART_DecodeMessageRxFIFO+0xc4>
		}

		msg[i] = *character;
     c92:	80 91 00 00 	lds	r24, 0x0000
     c96:	f7 01       	movw	r30, r14
     c98:	81 93       	st	Z+, r24
     c9a:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	0c 15       	cp	r16, r12
     ca2:	1d 05       	cpc	r17, r13
     ca4:	3c f3       	brlt	.-50     	; 0xc74 <USART_DecodeMessageRxFIFO+0x86>
		msg[i] = *character;
	}
	
	
	// TODO: send to relevant party... the display for now
	TWI_send_string_fixed_length(S_ADRESS, msg, length);
     ca6:	a6 01       	movw	r20, r12
     ca8:	68 2d       	mov	r22, r8
     caa:	79 2d       	mov	r23, r9
     cac:	80 e4       	ldi	r24, 0x40	; 64
     cae:	2e dc       	rcall	.-1956   	; 0x50c <TWI_send_string_fixed_length>
	
	return 0;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
}
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	be be       	out	0x3e, r11	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	ad be       	out	0x3d, r10	; 61
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	9f 90       	pop	r9
     cd2:	8f 90       	pop	r8
     cd4:	08 95       	ret

00000cd6 <USART_DecodeCommandRxFIFO>:

uint8_t USART_DecodeCommandRxFIFO()
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
	uint8_t *len = 0;
	uint8_t *data = 0;
	
	if(FifoRead(gRxFIFO, len))
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 91 08 11 	lds	r24, 0x1108
     ce2:	90 91 09 11 	lds	r25, 0x1109
     ce6:	58 da       	rcall	.-2896   	; 0x198 <FifoRead>
     ce8:	88 23       	and	r24, r24
     cea:	31 f0       	breq	.+12     	; 0xcf8 <USART_DecodeCommandRxFIFO+0x22>
	{
		TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: LEN MISSING");
     cec:	65 e5       	ldi	r22, 0x55	; 85
     cee:	71 e2       	ldi	r23, 0x21	; 33
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	c6 db       	rcall	.-2164   	; 0x480 <TWI_send_string>
		return 1; // error
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	42 c0       	rjmp	.+132    	; 0xd7c <USART_DecodeCommandRxFIFO+0xa6>
	}
	
	int length = *len;
	uint8_t direction, rotation, speed;
	
	if(length == 3)
     cf8:	80 91 00 00 	lds	r24, 0x0000
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	09 f0       	breq	.+2      	; 0xd02 <USART_DecodeCommandRxFIFO+0x2c>
     d00:	38 c0       	rjmp	.+112    	; 0xd72 <USART_DecodeCommandRxFIFO+0x9c>
	{
		
			if(FifoRead(gRxFIFO, data))
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 91 08 11 	lds	r24, 0x1108
     d0a:	90 91 09 11 	lds	r25, 0x1109
     d0e:	44 da       	rcall	.-2936   	; 0x198 <FifoRead>
     d10:	88 23       	and	r24, r24
     d12:	31 f0       	breq	.+12     	; 0xd20 <USART_DecodeCommandRxFIFO+0x4a>
			{
				TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: DIRECTION MISSING");
     d14:	67 e7       	ldi	r22, 0x77	; 119
     d16:	71 e2       	ldi	r23, 0x21	; 33
     d18:	80 e4       	ldi	r24, 0x40	; 64
     d1a:	b2 db       	rcall	.-2204   	; 0x480 <TWI_send_string>
				return 1; // error
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	2e c0       	rjmp	.+92     	; 0xd7c <USART_DecodeCommandRxFIFO+0xa6>
			}
			direction = *data;
     d20:	c0 91 00 00 	lds	r28, 0x0000
			
			if(FifoRead(gRxFIFO, data))
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	80 91 08 11 	lds	r24, 0x1108
     d2c:	90 91 09 11 	lds	r25, 0x1109
     d30:	33 da       	rcall	.-2970   	; 0x198 <FifoRead>
     d32:	88 23       	and	r24, r24
     d34:	31 f0       	breq	.+12     	; 0xd42 <USART_DecodeCommandRxFIFO+0x6c>
			{
				TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: ROTATION MISSING");
     d36:	6f e9       	ldi	r22, 0x9F	; 159
     d38:	71 e2       	ldi	r23, 0x21	; 33
     d3a:	80 e4       	ldi	r24, 0x40	; 64
     d3c:	a1 db       	rcall	.-2238   	; 0x480 <TWI_send_string>
				return 1; // error
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	1d c0       	rjmp	.+58     	; 0xd7c <USART_DecodeCommandRxFIFO+0xa6>
			}
			
			rotation = *data;
     d42:	d0 91 00 00 	lds	r29, 0x0000
			
			if(FifoRead(gRxFIFO, data))
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 91 08 11 	lds	r24, 0x1108
     d4e:	90 91 09 11 	lds	r25, 0x1109
     d52:	22 da       	rcall	.-3004   	; 0x198 <FifoRead>
     d54:	88 23       	and	r24, r24
     d56:	31 f0       	breq	.+12     	; 0xd64 <USART_DecodeCommandRxFIFO+0x8e>
			{
				TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: SPEED MISSING");
     d58:	66 ec       	ldi	r22, 0xC6	; 198
     d5a:	71 e2       	ldi	r23, 0x21	; 33
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	90 db       	rcall	.-2272   	; 0x480 <TWI_send_string>
				return 1; // error
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0c c0       	rjmp	.+24     	; 0xd7c <USART_DecodeCommandRxFIFO+0xa6>
			}
			
			speed = *data;
		
		TWI_send_command(direction, rotation, speed);
     d64:	40 91 00 00 	lds	r20, 0x0000
     d68:	6d 2f       	mov	r22, r29
     d6a:	8c 2f       	mov	r24, r28
     d6c:	41 db       	rcall	.-2430   	; 0x3f0 <TWI_send_command>
	{
		TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
		return 1;
	}

	return 0;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <USART_DecodeCommandRxFIFO+0xa6>
		
		TWI_send_command(direction, rotation, speed);

	}else
	{
		TWI_send_string(S_ADRESS, "RxFIFO COMMAND ERROR: INCORRECT LENGTH");
     d72:	6a ee       	ldi	r22, 0xEA	; 234
     d74:	71 e2       	ldi	r23, 0x21	; 33
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	83 db       	rcall	.-2298   	; 0x480 <TWI_send_string>
		return 1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
	
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <USART_DecodeRxFIFO>:

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	while(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
     d82:	0d c0       	rjmp	.+26     	; 0xd9e <USART_DecodeRxFIFO+0x1c>
	{
		switch(*tag){
     d84:	80 91 00 00 	lds	r24, 0x0000
     d88:	83 34       	cpi	r24, 0x43	; 67
     d8a:	31 f0       	breq	.+12     	; 0xd98 <USART_DecodeRxFIFO+0x16>
     d8c:	8d 34       	cpi	r24, 0x4D	; 77
     d8e:	39 f4       	brne	.+14     	; 0xd9e <USART_DecodeRxFIFO+0x1c>
			case('M'): // if 'tag' is 'M'
			{
				if(USART_DecodeMessageRxFIFO()) // if decoding failed
     d90:	2e df       	rcall	.-420    	; 0xbee <USART_DecodeMessageRxFIFO>
     d92:	88 23       	and	r24, r24
     d94:	21 f0       	breq	.+8      	; 0xd9e <USART_DecodeRxFIFO+0x1c>
     d96:	08 95       	ret
				
				break;
			}
			case('C'): // 
			{
				if(USART_DecodeCommandRxFIFO())
     d98:	9e df       	rcall	.-196    	; 0xcd6 <USART_DecodeCommandRxFIFO>
     d9a:	81 11       	cpse	r24, r1
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <USART_DecodeRxFIFO+0x2e>

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	while(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	80 91 08 11 	lds	r24, 0x1108
     da6:	90 91 09 11 	lds	r25, 0x1109
     daa:	f6 d9       	rcall	.-3092   	; 0x198 <FifoRead>
     dac:	88 23       	and	r24, r24
     dae:	51 f3       	breq	.-44     	; 0xd84 <USART_DecodeRxFIFO+0x2>
     db0:	08 95       	ret

00000db2 <USART_Bounce>:



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
     db2:	60 91 55 23 	lds	r22, 0x2355
     db6:	26 2f       	mov	r18, r22
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	12 16       	cp	r1, r18
     dbc:	13 06       	cpc	r1, r19
     dbe:	64 f4       	brge	.+24     	; 0xdd8 <USART_Bounce+0x26>
     dc0:	a6 e5       	ldi	r26, 0x56	; 86
     dc2:	b3 e2       	ldi	r27, 0x23	; 35
     dc4:	e9 e5       	ldi	r30, 0x59	; 89
     dc6:	f5 e2       	ldi	r31, 0x25	; 37
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
	{
		gTxPayload[i] = gRxBuffer[i+2];
     dcc:	4d 91       	ld	r20, X+
     dce:	41 93       	st	Z+, r20



void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	82 17       	cp	r24, r18
     dd4:	93 07       	cpc	r25, r19
     dd6:	d4 f3       	brlt	.-12     	; 0xdcc <USART_Bounce+0x1a>
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
     dd8:	80 91 54 23 	lds	r24, 0x2354
     ddc:	79 ce       	rjmp	.-782    	; 0xad0 <USART_SendPacket>

00000dde <__vector_20>:
}


ISR (USART0_RX_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	0b b6       	in	r0, 0x3b	; 59
     dea:	0f 92       	push	r0
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
     e10:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
     e14:	2e 37       	cpi	r18, 0x7E	; 126
     e16:	09 f0       	breq	.+2      	; 0xe1a <__vector_20+0x3c>
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <__vector_20+0xba>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
     e1a:	80 91 26 22 	lds	r24, 0x2226
     e1e:	90 91 27 22 	lds	r25, 0x2227
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	91 05       	cpc	r25, r1
     e26:	40 f4       	brcc	.+16     	; 0xe38 <__vector_20+0x5a>
     e28:	20 91 55 23 	lds	r18, 0x2355
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	2c 5f       	subi	r18, 0xFC	; 252
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	59 f5       	brne	.+86     	; 0xe8e <__vector_20+0xb0>
		{
			if(gInvertNextFlag)
     e38:	80 91 24 22 	lds	r24, 0x2224
     e3c:	90 91 25 22 	lds	r25, 0x2225
     e40:	89 2b       	or	r24, r25
     e42:	21 f0       	breq	.+8      	; 0xe4c <__vector_20+0x6e>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
     e44:	10 92 25 22 	sts	0x2225, r1
     e48:	10 92 24 22 	sts	0x2224, r1
			}
			
			USART_Bounce();
     e4c:	b2 df       	rcall	.-156    	; 0xdb2 <USART_Bounce>
     e4e:	04 e5       	ldi	r16, 0x54	; 84
     e50:	13 e2       	ldi	r17, 0x23	; 35
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	0f 2e       	mov	r0, r31
     e58:	f5 e5       	ldi	r31, 0x55	; 85
     e5a:	ef 2e       	mov	r14, r31
     e5c:	f3 e2       	ldi	r31, 0x23	; 35
     e5e:	ff 2e       	mov	r15, r31
     e60:	f0 2d       	mov	r31, r0
			{
				if(FifoWrite(gRxFIFO, gRxBuffer[i]))
     e62:	f8 01       	movw	r30, r16
     e64:	61 91       	ld	r22, Z+
     e66:	8f 01       	movw	r16, r30
     e68:	80 91 08 11 	lds	r24, 0x1108
     e6c:	90 91 09 11 	lds	r25, 0x1109
     e70:	73 d9       	rcall	.-3354   	; 0x158 <FifoWrite>
     e72:	88 23       	and	r24, r24
     e74:	21 f0       	breq	.+8      	; 0xe7e <__vector_20+0xa0>
				{
					TWI_send_string(S_ADRESS,"U_FIFO-full");
     e76:	61 e1       	ldi	r22, 0x11	; 17
     e78:	72 e2       	ldi	r23, 0x22	; 34
     e7a:	80 e4       	ldi	r24, 0x40	; 64
     e7c:	01 db       	rcall	.-2558   	; 0x480 <TWI_send_string>
			}
			
			USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
     e7e:	21 96       	adiw	r28, 0x01	; 1
     e80:	f7 01       	movw	r30, r14
     e82:	80 81       	ld	r24, Z
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 96       	adiw	r24, 0x02	; 2
     e88:	c8 17       	cp	r28, r24
     e8a:	d9 07       	cpc	r29, r25
     e8c:	54 f3       	brlt	.-44     	; 0xe62 <__vector_20+0x84>
					TWI_send_string(S_ADRESS,"U_FIFO-full");
				}
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read
     e8e:	10 92 27 22 	sts	0x2227, r1
     e92:	10 92 26 22 	sts	0x2226, r1
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <__vector_20+0xe6>
		
	}else if(data == 0x7d)
     e98:	2d 37       	cpi	r18, 0x7D	; 125
     e9a:	39 f4       	brne	.+14     	; 0xeaa <__vector_20+0xcc>
	{
		gInvertNextFlag = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 25 22 	sts	0x2225, r25
     ea4:	80 93 24 22 	sts	0x2224, r24
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <__vector_20+0xe6>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
     eaa:	80 91 26 22 	lds	r24, 0x2226
     eae:	90 91 27 22 	lds	r25, 0x2227
     eb2:	fc 01       	movw	r30, r24
     eb4:	ec 5a       	subi	r30, 0xAC	; 172
     eb6:	fc 4d       	sbci	r31, 0xDC	; 220
     eb8:	20 83       	st	Z, r18
		++gRxBufferIndex;
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	90 93 27 22 	sts	0x2227, r25
     ec0:	80 93 26 22 	sts	0x2226, r24
	}
	
	
}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	0f 90       	pop	r0
     eea:	0b be       	out	0x3b, r0	; 59
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <__fixunssfsi>:
     ef6:	70 d0       	rcall	.+224    	; 0xfd8 <__fp_splitA>
     ef8:	88 f0       	brcs	.+34     	; 0xf1c <__fixunssfsi+0x26>
     efa:	9f 57       	subi	r25, 0x7F	; 127
     efc:	90 f0       	brcs	.+36     	; 0xf22 <__fixunssfsi+0x2c>
     efe:	b9 2f       	mov	r27, r25
     f00:	99 27       	eor	r25, r25
     f02:	b7 51       	subi	r27, 0x17	; 23
     f04:	a0 f0       	brcs	.+40     	; 0xf2e <__fixunssfsi+0x38>
     f06:	d1 f0       	breq	.+52     	; 0xf3c <__fixunssfsi+0x46>
     f08:	66 0f       	add	r22, r22
     f0a:	77 1f       	adc	r23, r23
     f0c:	88 1f       	adc	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	1a f0       	brmi	.+6      	; 0xf18 <__fixunssfsi+0x22>
     f12:	ba 95       	dec	r27
     f14:	c9 f7       	brne	.-14     	; 0xf08 <__fixunssfsi+0x12>
     f16:	12 c0       	rjmp	.+36     	; 0xf3c <__fixunssfsi+0x46>
     f18:	b1 30       	cpi	r27, 0x01	; 1
     f1a:	81 f0       	breq	.+32     	; 0xf3c <__fixunssfsi+0x46>
     f1c:	77 d0       	rcall	.+238    	; 0x100c <__fp_zero>
     f1e:	b1 e0       	ldi	r27, 0x01	; 1
     f20:	08 95       	ret
     f22:	74 c0       	rjmp	.+232    	; 0x100c <__fp_zero>
     f24:	67 2f       	mov	r22, r23
     f26:	78 2f       	mov	r23, r24
     f28:	88 27       	eor	r24, r24
     f2a:	b8 5f       	subi	r27, 0xF8	; 248
     f2c:	39 f0       	breq	.+14     	; 0xf3c <__fixunssfsi+0x46>
     f2e:	b9 3f       	cpi	r27, 0xF9	; 249
     f30:	cc f3       	brlt	.-14     	; 0xf24 <__fixunssfsi+0x2e>
     f32:	86 95       	lsr	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b3 95       	inc	r27
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <__fixunssfsi+0x3c>
     f3c:	3e f4       	brtc	.+14     	; 0xf4c <__fixunssfsi+0x56>
     f3e:	90 95       	com	r25
     f40:	80 95       	com	r24
     f42:	70 95       	com	r23
     f44:	61 95       	neg	r22
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	08 95       	ret

00000f4e <__floatunsisf>:
     f4e:	e8 94       	clt
     f50:	09 c0       	rjmp	.+18     	; 0xf64 <__floatsisf+0x12>

00000f52 <__floatsisf>:
     f52:	97 fb       	bst	r25, 7
     f54:	3e f4       	brtc	.+14     	; 0xf64 <__floatsisf+0x12>
     f56:	90 95       	com	r25
     f58:	80 95       	com	r24
     f5a:	70 95       	com	r23
     f5c:	61 95       	neg	r22
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	8f 4f       	sbci	r24, 0xFF	; 255
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	99 23       	and	r25, r25
     f66:	a9 f0       	breq	.+42     	; 0xf92 <__floatsisf+0x40>
     f68:	f9 2f       	mov	r31, r25
     f6a:	96 e9       	ldi	r25, 0x96	; 150
     f6c:	bb 27       	eor	r27, r27
     f6e:	93 95       	inc	r25
     f70:	f6 95       	lsr	r31
     f72:	87 95       	ror	r24
     f74:	77 95       	ror	r23
     f76:	67 95       	ror	r22
     f78:	b7 95       	ror	r27
     f7a:	f1 11       	cpse	r31, r1
     f7c:	f8 cf       	rjmp	.-16     	; 0xf6e <__floatsisf+0x1c>
     f7e:	fa f4       	brpl	.+62     	; 0xfbe <__floatsisf+0x6c>
     f80:	bb 0f       	add	r27, r27
     f82:	11 f4       	brne	.+4      	; 0xf88 <__floatsisf+0x36>
     f84:	60 ff       	sbrs	r22, 0
     f86:	1b c0       	rjmp	.+54     	; 0xfbe <__floatsisf+0x6c>
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8f 4f       	sbci	r24, 0xFF	; 255
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <__floatsisf+0x6c>
     f92:	88 23       	and	r24, r24
     f94:	11 f0       	breq	.+4      	; 0xf9a <__floatsisf+0x48>
     f96:	96 e9       	ldi	r25, 0x96	; 150
     f98:	11 c0       	rjmp	.+34     	; 0xfbc <__floatsisf+0x6a>
     f9a:	77 23       	and	r23, r23
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <__floatsisf+0x54>
     f9e:	9e e8       	ldi	r25, 0x8E	; 142
     fa0:	87 2f       	mov	r24, r23
     fa2:	76 2f       	mov	r23, r22
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <__floatsisf+0x5e>
     fa6:	66 23       	and	r22, r22
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <__floatsisf+0x74>
     faa:	96 e8       	ldi	r25, 0x86	; 134
     fac:	86 2f       	mov	r24, r22
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	2a f0       	brmi	.+10     	; 0xfbe <__floatsisf+0x6c>
     fb4:	9a 95       	dec	r25
     fb6:	66 0f       	add	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	da f7       	brpl	.-10     	; 0xfb4 <__floatsisf+0x62>
     fbe:	88 0f       	add	r24, r24
     fc0:	96 95       	lsr	r25
     fc2:	87 95       	ror	r24
     fc4:	97 f9       	bld	r25, 7
     fc6:	08 95       	ret

00000fc8 <__fp_split3>:
     fc8:	57 fd       	sbrc	r21, 7
     fca:	90 58       	subi	r25, 0x80	; 128
     fcc:	44 0f       	add	r20, r20
     fce:	55 1f       	adc	r21, r21
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <__fp_splitA+0x10>
     fd2:	5f 3f       	cpi	r21, 0xFF	; 255
     fd4:	71 f0       	breq	.+28     	; 0xff2 <__fp_splitA+0x1a>
     fd6:	47 95       	ror	r20

00000fd8 <__fp_splitA>:
     fd8:	88 0f       	add	r24, r24
     fda:	97 fb       	bst	r25, 7
     fdc:	99 1f       	adc	r25, r25
     fde:	61 f0       	breq	.+24     	; 0xff8 <__fp_splitA+0x20>
     fe0:	9f 3f       	cpi	r25, 0xFF	; 255
     fe2:	79 f0       	breq	.+30     	; 0x1002 <__fp_splitA+0x2a>
     fe4:	87 95       	ror	r24
     fe6:	08 95       	ret
     fe8:	12 16       	cp	r1, r18
     fea:	13 06       	cpc	r1, r19
     fec:	14 06       	cpc	r1, r20
     fee:	55 1f       	adc	r21, r21
     ff0:	f2 cf       	rjmp	.-28     	; 0xfd6 <__fp_split3+0xe>
     ff2:	46 95       	lsr	r20
     ff4:	f1 df       	rcall	.-30     	; 0xfd8 <__fp_splitA>
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <__fp_splitA+0x30>
     ff8:	16 16       	cp	r1, r22
     ffa:	17 06       	cpc	r1, r23
     ffc:	18 06       	cpc	r1, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	f1 cf       	rjmp	.-30     	; 0xfe4 <__fp_splitA+0xc>
    1002:	86 95       	lsr	r24
    1004:	71 05       	cpc	r23, r1
    1006:	61 05       	cpc	r22, r1
    1008:	08 94       	sec
    100a:	08 95       	ret

0000100c <__fp_zero>:
    100c:	e8 94       	clt

0000100e <__fp_szero>:
    100e:	bb 27       	eor	r27, r27
    1010:	66 27       	eor	r22, r22
    1012:	77 27       	eor	r23, r23
    1014:	cb 01       	movw	r24, r22
    1016:	97 f9       	bld	r25, 7
    1018:	08 95       	ret

0000101a <__mulsf3>:
    101a:	0b d0       	rcall	.+22     	; 0x1032 <__mulsf3x>
    101c:	78 c0       	rjmp	.+240    	; 0x110e <__fp_round>
    101e:	69 d0       	rcall	.+210    	; 0x10f2 <__fp_pscA>
    1020:	28 f0       	brcs	.+10     	; 0x102c <__mulsf3+0x12>
    1022:	6e d0       	rcall	.+220    	; 0x1100 <__fp_pscB>
    1024:	18 f0       	brcs	.+6      	; 0x102c <__mulsf3+0x12>
    1026:	95 23       	and	r25, r21
    1028:	09 f0       	breq	.+2      	; 0x102c <__mulsf3+0x12>
    102a:	5a c0       	rjmp	.+180    	; 0x10e0 <__fp_inf>
    102c:	5f c0       	rjmp	.+190    	; 0x10ec <__fp_nan>
    102e:	11 24       	eor	r1, r1
    1030:	ee cf       	rjmp	.-36     	; 0x100e <__fp_szero>

00001032 <__mulsf3x>:
    1032:	ca df       	rcall	.-108    	; 0xfc8 <__fp_split3>
    1034:	a0 f3       	brcs	.-24     	; 0x101e <__mulsf3+0x4>

00001036 <__mulsf3_pse>:
    1036:	95 9f       	mul	r25, r21
    1038:	d1 f3       	breq	.-12     	; 0x102e <__mulsf3+0x14>
    103a:	95 0f       	add	r25, r21
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	55 1f       	adc	r21, r21
    1040:	62 9f       	mul	r22, r18
    1042:	f0 01       	movw	r30, r0
    1044:	72 9f       	mul	r23, r18
    1046:	bb 27       	eor	r27, r27
    1048:	f0 0d       	add	r31, r0
    104a:	b1 1d       	adc	r27, r1
    104c:	63 9f       	mul	r22, r19
    104e:	aa 27       	eor	r26, r26
    1050:	f0 0d       	add	r31, r0
    1052:	b1 1d       	adc	r27, r1
    1054:	aa 1f       	adc	r26, r26
    1056:	64 9f       	mul	r22, r20
    1058:	66 27       	eor	r22, r22
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	66 1f       	adc	r22, r22
    1060:	82 9f       	mul	r24, r18
    1062:	22 27       	eor	r18, r18
    1064:	b0 0d       	add	r27, r0
    1066:	a1 1d       	adc	r26, r1
    1068:	62 1f       	adc	r22, r18
    106a:	73 9f       	mul	r23, r19
    106c:	b0 0d       	add	r27, r0
    106e:	a1 1d       	adc	r26, r1
    1070:	62 1f       	adc	r22, r18
    1072:	83 9f       	mul	r24, r19
    1074:	a0 0d       	add	r26, r0
    1076:	61 1d       	adc	r22, r1
    1078:	22 1f       	adc	r18, r18
    107a:	74 9f       	mul	r23, r20
    107c:	33 27       	eor	r19, r19
    107e:	a0 0d       	add	r26, r0
    1080:	61 1d       	adc	r22, r1
    1082:	23 1f       	adc	r18, r19
    1084:	84 9f       	mul	r24, r20
    1086:	60 0d       	add	r22, r0
    1088:	21 1d       	adc	r18, r1
    108a:	82 2f       	mov	r24, r18
    108c:	76 2f       	mov	r23, r22
    108e:	6a 2f       	mov	r22, r26
    1090:	11 24       	eor	r1, r1
    1092:	9f 57       	subi	r25, 0x7F	; 127
    1094:	50 40       	sbci	r21, 0x00	; 0
    1096:	8a f0       	brmi	.+34     	; 0x10ba <__mulsf3_pse+0x84>
    1098:	e1 f0       	breq	.+56     	; 0x10d2 <__mulsf3_pse+0x9c>
    109a:	88 23       	and	r24, r24
    109c:	4a f0       	brmi	.+18     	; 0x10b0 <__mulsf3_pse+0x7a>
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	bb 1f       	adc	r27, r27
    10a4:	66 1f       	adc	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	91 50       	subi	r25, 0x01	; 1
    10ac:	50 40       	sbci	r21, 0x00	; 0
    10ae:	a9 f7       	brne	.-22     	; 0x109a <__mulsf3_pse+0x64>
    10b0:	9e 3f       	cpi	r25, 0xFE	; 254
    10b2:	51 05       	cpc	r21, r1
    10b4:	70 f0       	brcs	.+28     	; 0x10d2 <__mulsf3_pse+0x9c>
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <__fp_inf>
    10b8:	aa cf       	rjmp	.-172    	; 0x100e <__fp_szero>
    10ba:	5f 3f       	cpi	r21, 0xFF	; 255
    10bc:	ec f3       	brlt	.-6      	; 0x10b8 <__mulsf3_pse+0x82>
    10be:	98 3e       	cpi	r25, 0xE8	; 232
    10c0:	dc f3       	brlt	.-10     	; 0x10b8 <__mulsf3_pse+0x82>
    10c2:	86 95       	lsr	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	b7 95       	ror	r27
    10ca:	f7 95       	ror	r31
    10cc:	e7 95       	ror	r30
    10ce:	9f 5f       	subi	r25, 0xFF	; 255
    10d0:	c1 f7       	brne	.-16     	; 0x10c2 <__mulsf3_pse+0x8c>
    10d2:	fe 2b       	or	r31, r30
    10d4:	88 0f       	add	r24, r24
    10d6:	91 1d       	adc	r25, r1
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	97 f9       	bld	r25, 7
    10de:	08 95       	ret

000010e0 <__fp_inf>:
    10e0:	97 f9       	bld	r25, 7
    10e2:	9f 67       	ori	r25, 0x7F	; 127
    10e4:	80 e8       	ldi	r24, 0x80	; 128
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	08 95       	ret

000010ec <__fp_nan>:
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	80 ec       	ldi	r24, 0xC0	; 192
    10f0:	08 95       	ret

000010f2 <__fp_pscA>:
    10f2:	00 24       	eor	r0, r0
    10f4:	0a 94       	dec	r0
    10f6:	16 16       	cp	r1, r22
    10f8:	17 06       	cpc	r1, r23
    10fa:	18 06       	cpc	r1, r24
    10fc:	09 06       	cpc	r0, r25
    10fe:	08 95       	ret

00001100 <__fp_pscB>:
    1100:	00 24       	eor	r0, r0
    1102:	0a 94       	dec	r0
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	14 06       	cpc	r1, r20
    110a:	05 06       	cpc	r0, r21
    110c:	08 95       	ret

0000110e <__fp_round>:
    110e:	09 2e       	mov	r0, r25
    1110:	03 94       	inc	r0
    1112:	00 0c       	add	r0, r0
    1114:	11 f4       	brne	.+4      	; 0x111a <__fp_round+0xc>
    1116:	88 23       	and	r24, r24
    1118:	52 f0       	brmi	.+20     	; 0x112e <__fp_round+0x20>
    111a:	bb 0f       	add	r27, r27
    111c:	40 f4       	brcc	.+16     	; 0x112e <__fp_round+0x20>
    111e:	bf 2b       	or	r27, r31
    1120:	11 f4       	brne	.+4      	; 0x1126 <__fp_round+0x18>
    1122:	60 ff       	sbrs	r22, 0
    1124:	04 c0       	rjmp	.+8      	; 0x112e <__fp_round+0x20>
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	08 95       	ret

00001130 <_exit>:
    1130:	f8 94       	cli

00001132 <__stop_program>:
    1132:	ff cf       	rjmp	.-2      	; 0x1132 <__stop_program>
