
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000103e  00800100  0000094a  000009de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  0080113e  0080113e  00001a1c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001f8  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001897  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006e4  00000000  00000000  00003c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011f7  00000000  00000000  00004321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005c8  00000000  00000000  00005518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052d  00000000  00000000  00005ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001197  00000000  00000000  0000600d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c8  00000000  00000000  000071a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2f c2       	rjmp	.+1118   	; 0x4b0 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	a8 c2       	rjmp	.+1360   	; 0x5ba <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e1       	ldi	r17, 0x11	; 17
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e4       	ldi	r30, 0x4A	; 74
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e1       	ldi	r18, 0x17	; 23
  b4:	ae e3       	ldi	r26, 0x3E	; 62
  b6:	b1 e1       	ldi	r27, 0x11	; 17
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 37       	cpi	r26, 0x7F	; 127
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c6 d1       	rcall	.+908    	; 0x450 <main>
  c4:	40 c4       	rjmp	.+2176   	; 0x946 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
  c8:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
  ca:	90 81       	ld	r25, Z
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	22 81       	ldd	r18, Z+2	; 0x02
  d2:	82 1b       	sub	r24, r18
};
  d4:	89 23       	and	r24, r25
  d6:	08 95       	ret

000000d8 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
  e2:	f2 df       	rcall	.-28     	; 0xc8 <FifoDataLength>
  e4:	28 81       	ld	r18, Y
  e6:	39 81       	ldd	r19, Y+1	; 0x01
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	82 17       	cp	r24, r18
  f0:	93 07       	cpc	r25, r19
  f2:	69 f0       	breq	.+26     	; 0x10e <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	9d 81       	ldd	r25, Y+5	; 0x05
  f8:	fe 01       	movw	r30, r28
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	28 23       	and	r18, r24
 104:	39 23       	and	r19, r25
 106:	3d 83       	std	Y+5, r19	; 0x05
 108:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
 124:	d1 df       	rcall	.-94     	; 0xc8 <FifoDataLength>
 126:	88 23       	and	r24, r24
 128:	a1 f0       	breq	.+40     	; 0x152 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
 12a:	ea 81       	ldd	r30, Y+2	; 0x02
 12c:	fb 81       	ldd	r31, Y+3	; 0x03
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	f8 01       	movw	r30, r16
 136:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
 138:	28 81       	ld	r18, Y
 13a:	39 81       	ldd	r19, Y+1	; 0x01
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	31 09       	sbc	r19, r1
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	9b 81       	ldd	r25, Y+3	; 0x03
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	82 23       	and	r24, r18
 148:	93 23       	and	r25, r19
 14a:	9b 83       	std	Y+3, r25	; 0x03
 14c:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	01 c0       	rjmp	.+2      	; 0x154 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <init>:
	{
		gTxPayload[i] = msg[i];
	}
	
	USART_SendPacket('S', strlen(msg));
}
 15e:	81 b1       	in	r24, 0x01	; 1
 160:	83 60       	ori	r24, 0x03	; 3
 162:	81 b9       	out	0x01, r24	; 1
 164:	10 92 4f 16 	sts	0x164F, r1
 168:	10 92 4e 16 	sts	0x164E, r1
 16c:	08 95       	ret

0000016e <USART_init>:
 16e:	10 92 c5 00 	sts	0x00C5, r1
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	80 93 c4 00 	sts	0x00C4, r24
 178:	88 e9       	ldi	r24, 0x98	; 152
 17a:	80 93 c1 00 	sts	0x00C1, r24
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	80 93 c2 00 	sts	0x00C2, r24
 184:	08 95       	ret

00000186 <USART_CheckTxReady>:
 186:	80 91 c0 00 	lds	r24, 0x00C0
 18a:	80 72       	andi	r24, 0x20	; 32
 18c:	08 95       	ret

0000018e <USART_WriteByte>:
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
 192:	f9 df       	rcall	.-14     	; 0x186 <USART_CheckTxReady>
 194:	88 23       	and	r24, r24
 196:	e9 f3       	breq	.-6      	; 0x192 <USART_WriteByte+0x4>
 198:	c0 93 c6 00 	sts	0x00C6, r28
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <USART_crc16>:
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	66 23       	and	r22, r22
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <USART_crc16+0x16>
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <USART_crc16+0x92>
 1b6:	06 2f       	mov	r16, r22
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	4f ef       	ldi	r20, 0xFF	; 255
 1bc:	5f ef       	ldi	r21, 0xFF	; 255
 1be:	ee ef       	ldi	r30, 0xFE	; 254
 1c0:	ff ef       	ldi	r31, 0xFF	; 255
 1c2:	c6 2e       	mov	r12, r22
 1c4:	d1 2c       	mov	r13, r1
 1c6:	e8 2e       	mov	r14, r24
 1c8:	f1 2c       	mov	r15, r1
 1ca:	c8 e0       	ldi	r28, 0x08	; 8
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	ee 3f       	cpi	r30, 0xFE	; 254
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	f6 07       	cpc	r31, r22
 1d4:	19 f4       	brne	.+6      	; 0x1dc <USART_crc16+0x3c>
 1d6:	8e 2d       	mov	r24, r14
 1d8:	9f 2d       	mov	r25, r15
 1da:	30 c0       	rjmp	.+96     	; 0x23c <USART_crc16+0x9c>
 1dc:	ef 3f       	cpi	r30, 0xFF	; 255
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	f8 07       	cpc	r31, r24
 1e2:	19 f4       	brne	.+6      	; 0x1ea <USART_crc16+0x4a>
 1e4:	8c 2d       	mov	r24, r12
 1e6:	9d 2d       	mov	r25, r13
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <USART_crc16+0x9c>
 1ea:	df 01       	movw	r26, r30
 1ec:	a6 5b       	subi	r26, 0xB6	; 182
 1ee:	bc 4e       	sbci	r27, 0xEC	; 236
 1f0:	8c 91       	ld	r24, X
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	23 c0       	rjmp	.+70     	; 0x23c <USART_crc16+0x9c>
 1f6:	ba 01       	movw	r22, r20
 1f8:	68 27       	eor	r22, r24
 1fa:	79 27       	eor	r23, r25
 1fc:	60 ff       	sbrs	r22, 0
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <USART_crc16+0x6e>
 200:	56 95       	lsr	r21
 202:	47 95       	ror	r20
 204:	68 e0       	ldi	r22, 0x08	; 8
 206:	46 27       	eor	r20, r22
 208:	64 e8       	ldi	r22, 0x84	; 132
 20a:	56 27       	eor	r21, r22
 20c:	02 c0       	rjmp	.+4      	; 0x212 <USART_crc16+0x72>
 20e:	56 95       	lsr	r21
 210:	47 95       	ror	r20
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
 21a:	69 f7       	brne	.-38     	; 0x1f6 <USART_crc16+0x56>
 21c:	31 96       	adiw	r30, 0x01	; 1
 21e:	e0 17       	cp	r30, r16
 220:	f1 07       	cpc	r31, r17
 222:	a9 f6       	brne	.-86     	; 0x1ce <USART_crc16+0x2e>
 224:	9a 01       	movw	r18, r20
 226:	20 95       	com	r18
 228:	30 95       	com	r19
 22a:	32 27       	eor	r19, r18
 22c:	23 27       	eor	r18, r19
 22e:	32 27       	eor	r19, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <USART_crc16+0x96>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	82 2f       	mov	r24, r18
 238:	93 2f       	mov	r25, r19
 23a:	02 c0       	rjmp	.+4      	; 0x240 <USART_crc16+0xa0>
 23c:	9e 01       	movw	r18, r28
 23e:	db cf       	rjmp	.-74     	; 0x1f6 <USART_crc16+0x56>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	08 95       	ret

00000252 <USART_SendPacket>:
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	9e e7       	ldi	r25, 0x7E	; 126
 25c:	90 93 49 14 	sts	0x1449, r25
 260:	80 93 4a 14 	sts	0x144A, r24
 264:	60 93 4b 14 	sts	0x144B, r22
 268:	26 2f       	mov	r18, r22
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	12 16       	cp	r1, r18
 26e:	13 06       	cpc	r1, r19
 270:	4c f5       	brge	.+82     	; 0x2c4 <USART_SendPacket+0x72>
 272:	ea e4       	ldi	r30, 0x4A	; 74
 274:	f3 e1       	ldi	r31, 0x13	; 19
 276:	03 e0       	ldi	r16, 0x03	; 3
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	7d e7       	ldi	r23, 0x7D	; 125
 280:	50 e2       	ldi	r21, 0x20	; 32
 282:	90 81       	ld	r25, Z
 284:	49 2f       	mov	r20, r25
 286:	4d 57       	subi	r20, 0x7D	; 125
 288:	42 30       	cpi	r20, 0x02	; 2
 28a:	80 f4       	brcc	.+32     	; 0x2ac <USART_SendPacket+0x5a>
 28c:	d8 01       	movw	r26, r16
 28e:	a7 5b       	subi	r26, 0xB7	; 183
 290:	bb 4e       	sbci	r27, 0xEB	; 235
 292:	ac 0f       	add	r26, r28
 294:	bd 1f       	adc	r27, r29
 296:	7c 93       	st	X, r23
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	d8 01       	movw	r26, r16
 29e:	a7 5b       	subi	r26, 0xB7	; 183
 2a0:	bb 4e       	sbci	r27, 0xEB	; 235
 2a2:	ac 0f       	add	r26, r28
 2a4:	bd 1f       	adc	r27, r29
 2a6:	95 27       	eor	r25, r21
 2a8:	9c 93       	st	X, r25
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <USART_SendPacket+0x66>
 2ac:	d8 01       	movw	r26, r16
 2ae:	a7 5b       	subi	r26, 0xB7	; 183
 2b0:	bb 4e       	sbci	r27, 0xEB	; 235
 2b2:	ac 0f       	add	r26, r28
 2b4:	bd 1f       	adc	r27, r29
 2b6:	9c 93       	st	X, r25
 2b8:	21 96       	adiw	r28, 0x01	; 1
 2ba:	31 96       	adiw	r30, 0x01	; 1
 2bc:	c2 17       	cp	r28, r18
 2be:	d3 07       	cpc	r29, r19
 2c0:	01 f7       	brne	.-64     	; 0x282 <USART_SendPacket+0x30>
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <USART_SendPacket+0x7a>
 2c4:	03 e0       	ldi	r16, 0x03	; 3
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	69 df       	rcall	.-302    	; 0x1a0 <USART_crc16>
 2ce:	f8 01       	movw	r30, r16
 2d0:	e7 5b       	subi	r30, 0xB7	; 183
 2d2:	fb 4e       	sbci	r31, 0xEB	; 235
 2d4:	ec 0f       	add	r30, r28
 2d6:	fd 1f       	adc	r31, r29
 2d8:	90 83       	st	Z, r25
 2da:	81 83       	std	Z+1, r24	; 0x01
 2dc:	22 96       	adiw	r28, 0x02	; 2
 2de:	0c 0f       	add	r16, r28
 2e0:	1d 1f       	adc	r17, r29
 2e2:	f8 01       	movw	r30, r16
 2e4:	e7 5b       	subi	r30, 0xB7	; 183
 2e6:	fb 4e       	sbci	r31, 0xEB	; 235
 2e8:	8e e7       	ldi	r24, 0x7E	; 126
 2ea:	80 83       	st	Z, r24
 2ec:	c8 01       	movw	r24, r16
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	18 16       	cp	r1, r24
 2f2:	19 06       	cpc	r1, r25
 2f4:	4c f4       	brge	.+18     	; 0x308 <USART_SendPacket+0xb6>
 2f6:	c9 e4       	ldi	r28, 0x49	; 73
 2f8:	d4 e1       	ldi	r29, 0x14	; 20
 2fa:	06 5b       	subi	r16, 0xB6	; 182
 2fc:	1b 4e       	sbci	r17, 0xEB	; 235
 2fe:	89 91       	ld	r24, Y+
 300:	46 df       	rcall	.-372    	; 0x18e <USART_WriteByte>
 302:	c0 17       	cp	r28, r16
 304:	d1 07       	cpc	r29, r17
 306:	d9 f7       	brne	.-10     	; 0x2fe <USART_SendPacket+0xac>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <USART_SendSensors>:
	
void USART_SendSensors()
{
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	0a e4       	ldi	r16, 0x4A	; 74
 31c:	13 e1       	ldi	r17, 0x13	; 19
	for(int i = 0; i < 7; i++)
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	d0 e0       	ldi	r29, 0x00	; 0
	{
		gTxPayload[i] = get_sensor(i);
 322:	ce 01       	movw	r24, r28
 324:	f5 d2       	rcall	.+1514   	; 0x910 <get_sensor>
 326:	f8 01       	movw	r30, r16
 328:	81 93       	st	Z+, r24
 32a:	8f 01       	movw	r16, r30
	USART_SendPacket('S', strlen(msg));
}
	
void USART_SendSensors()
{
	for(int i = 0; i < 7; i++)
 32c:	21 96       	adiw	r28, 0x01	; 1
 32e:	c7 30       	cpi	r28, 0x07	; 7
 330:	d1 05       	cpc	r29, r1
 332:	b9 f7       	brne	.-18     	; 0x322 <USART_SendSensors+0x10>
	{
		gTxPayload[i] = get_sensor(i);
	}
	
	USART_SendPacket('S', 7);
 334:	67 e0       	ldi	r22, 0x07	; 7
 336:	83 e5       	ldi	r24, 0x53	; 83
 338:	8c df       	rcall	.-232    	; 0x252 <USART_SendPacket>
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <USART_DecodeMessageRxFIFO>:

uint8_t USART_DecodeMessageRxFIFO()
{
 344:	8f 92       	push	r8
 346:	9f 92       	push	r9
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
	
	
	// TODO: send to relevant party... the display for now
	send_string_fixed_length(S_ADRESS, msg, length);
	return 0;
}
 360:	ad b6       	in	r10, 0x3d	; 61
 362:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gRxFIFO, len))
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 91 00 01 	lds	r24, 0x0100
 36c:	90 91 01 01 	lds	r25, 0x0101
 370:	d3 de       	rcall	.-602    	; 0x118 <FifoRead>
 372:	88 23       	and	r24, r24
 374:	39 f0       	breq	.+14     	; 0x384 <USART_DecodeMessageRxFIFO+0x40>
	{
		send_string(S_ADRESS, "RxFIFO ERROR: LEN MISSING");
 376:	68 e0       	ldi	r22, 0x08	; 8
 378:	71 e1       	ldi	r23, 0x11	; 17
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	e0 d1       	rcall	.+960    	; 0x740 <send_string>
		return 1; // error
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	45 c0       	rjmp	.+138    	; 0x40e <USART_DecodeMessageRxFIFO+0xca>
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
 384:	c0 90 00 00 	lds	r12, 0x0000
 388:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];
 38a:	96 01       	movw	r18, r12
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	c1 14       	cp	r12, r1
 396:	d1 04       	cpc	r13, r1
 398:	11 f0       	breq	.+4      	; 0x39e <USART_DecodeMessageRxFIFO+0x5a>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t msg[length-1+ifzero];
 39e:	82 0f       	add	r24, r18
 3a0:	93 1f       	adc	r25, r19
 3a2:	2d b7       	in	r18, 0x3d	; 61
 3a4:	3e b7       	in	r19, 0x3e	; 62
 3a6:	28 1b       	sub	r18, r24
 3a8:	39 0b       	sbc	r19, r25
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	3e bf       	out	0x3e, r19	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	2d bf       	out	0x3d, r18	; 61
 3b4:	8d b7       	in	r24, 0x3d	; 61
 3b6:	9e b7       	in	r25, 0x3e	; 62
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	88 2e       	mov	r8, r24
 3bc:	99 2e       	mov	r9, r25

	for(int i = 0; i < length; ++i)
 3be:	1c 14       	cp	r1, r12
 3c0:	1d 04       	cpc	r1, r13
 3c2:	f4 f4       	brge	.+60     	; 0x400 <USART_DecodeMessageRxFIFO+0xbc>
 3c4:	e8 2e       	mov	r14, r24
 3c6:	f9 2e       	mov	r15, r25
 3c8:	00 e0       	ldi	r16, 0x00	; 0
 3ca:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gRxFIFO, character))
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 91 00 01 	lds	r24, 0x0100
 3d4:	90 91 01 01 	lds	r25, 0x0101
 3d8:	9f de       	rcall	.-706    	; 0x118 <FifoRead>
 3da:	88 23       	and	r24, r24
 3dc:	39 f0       	breq	.+14     	; 0x3ec <USART_DecodeMessageRxFIFO+0xa8>
		{
			send_string(S_ADRESS, "RxFIFO ERROR: DATA MISSING");
 3de:	62 e2       	ldi	r22, 0x22	; 34
 3e0:	71 e1       	ldi	r23, 0x11	; 17
 3e2:	80 e4       	ldi	r24, 0x40	; 64
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	ac d1       	rcall	.+856    	; 0x740 <send_string>
			return 1; // error
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	11 c0       	rjmp	.+34     	; 0x40e <USART_DecodeMessageRxFIFO+0xca>
		}

		msg[i] = *character;
 3ec:	80 91 00 00 	lds	r24, 0x0000
 3f0:	f7 01       	movw	r30, r14
 3f2:	81 93       	st	Z+, r24
 3f4:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	uint8_t msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
 3f6:	0f 5f       	subi	r16, 0xFF	; 255
 3f8:	1f 4f       	sbci	r17, 0xFF	; 255
 3fa:	0c 15       	cp	r16, r12
 3fc:	1d 05       	cpc	r17, r13
 3fe:	34 f3       	brlt	.-52     	; 0x3cc <USART_DecodeMessageRxFIFO+0x88>
		msg[i] = *character;
	}
	
	
	// TODO: send to relevant party... the display for now
	send_string_fixed_length(S_ADRESS, msg, length);
 400:	a6 01       	movw	r20, r12
 402:	68 2d       	mov	r22, r8
 404:	79 2d       	mov	r23, r9
 406:	80 e4       	ldi	r24, 0x40	; 64
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	e8 d1       	rcall	.+976    	; 0x7dc <send_string_fixed_length>
	return 0;
 40c:	80 e0       	ldi	r24, 0x00	; 0
}
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	be be       	out	0x3e, r11	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	ad be       	out	0x3d, r10	; 61
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	08 95       	ret

00000432 <USART_DecodeRxFIFO>:

void USART_DecodeRxFIFO()
{
	uint8_t *tag = 0;
	
	if(!(FifoRead(gRxFIFO, tag))) // if the buffer is NOT empty
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	80 91 00 01 	lds	r24, 0x0100
 43a:	90 91 01 01 	lds	r25, 0x0101
 43e:	6c de       	rcall	.-808    	; 0x118 <FifoRead>
 440:	81 11       	cpse	r24, r1
 442:	05 c0       	rjmp	.+10     	; 0x44e <USART_DecodeRxFIFO+0x1c>
	{
		switch(*tag){
 444:	80 91 00 00 	lds	r24, 0x0000
 448:	8d 34       	cpi	r24, 0x4D	; 77
 44a:	09 f4       	brne	.+2      	; 0x44e <USART_DecodeRxFIFO+0x1c>
			case('M'): // if 'tag' is 'M'
			{
				if(USART_DecodeMessageRxFIFO()) // if decoding failed
 44c:	7b cf       	rjmp	.-266    	; 0x344 <USART_DecodeMessageRxFIFO>
 44e:	08 95       	ret

00000450 <main>:



int main(void)
{
	init();
 450:	86 de       	rcall	.-756    	; 0x15e <init>
	USART_init();
 452:	8d de       	rcall	.-742    	; 0x16e <USART_init>
	
	// init TWI
	my_adress = C_ADRESS;
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 49 13 	sts	0x1349, r25
 45c:	80 93 48 13 	sts	0x1348, r24
	init_TWI(my_adress);
 460:	1b d1       	rcall	.+566    	; 0x698 <init_TWI>
	
	sei();
 462:	78 94       	sei

	
	while(1)
	{
		PORTA ^= (1<<PORTA0);
 464:	c1 e0       	ldi	r28, 0x01	; 1
 466:	82 b1       	in	r24, 0x02	; 2
 468:	8c 27       	eor	r24, r28
 46a:	82 b9       	out	0x02, r24	; 2
		
		USART_DecodeRxFIFO();
 46c:	e2 df       	rcall	.-60     	; 0x432 <USART_DecodeRxFIFO>
		USART_SendSensors();
 46e:	51 df       	rcall	.-350    	; 0x312 <USART_SendSensors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	8f e3       	ldi	r24, 0x3F	; 63
 474:	98 e3       	ldi	r25, 0x38	; 56
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <main+0x26>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <main+0x30>
 480:	00 00       	nop
 482:	f1 cf       	rjmp	.-30     	; 0x466 <main+0x16>

00000484 <USART_Bounce>:
	}
}

void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 484:	60 91 41 11 	lds	r22, 0x1141
 488:	26 2f       	mov	r18, r22
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	12 16       	cp	r1, r18
 48e:	13 06       	cpc	r1, r19
 490:	64 f4       	brge	.+24     	; 0x4aa <USART_Bounce+0x26>
 492:	a2 e4       	ldi	r26, 0x42	; 66
 494:	b1 e1       	ldi	r27, 0x11	; 17
 496:	ea e4       	ldi	r30, 0x4A	; 74
 498:	f3 e1       	ldi	r31, 0x13	; 19
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
	{
		gTxPayload[i] = gRxBuffer[i+2];
 49e:	4d 91       	ld	r20, X+
 4a0:	41 93       	st	Z+, r20
	}
}

void USART_Bounce()
{
	for(int i = 0; i < gRxBuffer[1]; i++)
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	82 17       	cp	r24, r18
 4a6:	93 07       	cpc	r25, r19
 4a8:	d4 f3       	brlt	.-12     	; 0x49e <USART_Bounce+0x1a>
	{
		gTxPayload[i] = gRxBuffer[i+2];
	}
	USART_SendPacket(gRxBuffer[0], gRxBuffer[1]);
 4aa:	80 91 40 11 	lds	r24, 0x1140
 4ae:	d1 ce       	rjmp	.-606    	; 0x252 <USART_SendPacket>

000004b0 <__vector_20>:


// -- Interrupts -- 

ISR (USART0_RX_vect)
{
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	0b b6       	in	r0, 0x3b	; 59
 4bc:	0f 92       	push	r0
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
 4e2:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
 4e6:	2e 37       	cpi	r18, 0x7E	; 126
 4e8:	c9 f5       	brne	.+114    	; 0x55c <__vector_20+0xac>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
 4ea:	80 91 4e 16 	lds	r24, 0x164E
 4ee:	90 91 4f 16 	lds	r25, 0x164F
 4f2:	84 30       	cpi	r24, 0x04	; 4
 4f4:	91 05       	cpc	r25, r1
 4f6:	40 f4       	brcc	.+16     	; 0x508 <__vector_20+0x58>
 4f8:	20 91 41 11 	lds	r18, 0x1141
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	2c 5f       	subi	r18, 0xFC	; 252
 500:	3f 4f       	sbci	r19, 0xFF	; 255
 502:	82 17       	cp	r24, r18
 504:	93 07       	cpc	r25, r19
 506:	29 f5       	brne	.+74     	; 0x552 <__vector_20+0xa2>
		{
			if(gInvertNextFlag)
 508:	80 91 3e 11 	lds	r24, 0x113E
 50c:	90 91 3f 11 	lds	r25, 0x113F
 510:	89 2b       	or	r24, r25
 512:	21 f0       	breq	.+8      	; 0x51c <__vector_20+0x6c>
			{
				data = (1<<5)^data;
				gInvertNextFlag = 0;
 514:	10 92 3f 11 	sts	0x113F, r1
 518:	10 92 3e 11 	sts	0x113E, r1
			}
			
			USART_Bounce();
 51c:	b3 df       	rcall	.-154    	; 0x484 <USART_Bounce>
 51e:	00 e4       	ldi	r16, 0x40	; 64
 520:	11 e1       	ldi	r17, 0x11	; 17
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 522:	c0 e0       	ldi	r28, 0x00	; 0
 524:	d0 e0       	ldi	r29, 0x00	; 0
 526:	0f 2e       	mov	r0, r31
 528:	f1 e4       	ldi	r31, 0x41	; 65
 52a:	ef 2e       	mov	r14, r31
 52c:	f1 e1       	ldi	r31, 0x11	; 17
 52e:	ff 2e       	mov	r15, r31
 530:	f0 2d       	mov	r31, r0
			{
				FifoWrite(gRxFIFO, gRxBuffer[i]);
 532:	f8 01       	movw	r30, r16
 534:	61 91       	ld	r22, Z+
 536:	8f 01       	movw	r16, r30
 538:	80 91 00 01 	lds	r24, 0x0100
 53c:	90 91 01 01 	lds	r25, 0x0101
 540:	cb dd       	rcall	.-1130   	; 0xd8 <FifoWrite>
			}
			
			USART_Bounce();
			
			// Add packet (no crc) to fifo-buffer to cue it for decoding
			for(int i = 0; i < gRxBuffer[1] + 2; ++i)
 542:	21 96       	adiw	r28, 0x01	; 1
 544:	f7 01       	movw	r30, r14
 546:	80 81       	ld	r24, Z
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 96       	adiw	r24, 0x02	; 2
 54c:	c8 17       	cp	r28, r24
 54e:	d9 07       	cpc	r29, r25
 550:	84 f3       	brlt	.-32     	; 0x532 <__vector_20+0x82>
			{
				FifoWrite(gRxFIFO, gRxBuffer[i]);
			}
		}
		
		gRxBufferIndex = 0; // always reset buffer index when frame delimiter (0x7e) is read 
 552:	10 92 4f 16 	sts	0x164F, r1
 556:	10 92 4e 16 	sts	0x164E, r1
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__vector_20+0xd8>
		
	}else if(data == 0x7d)
 55c:	2d 37       	cpi	r18, 0x7D	; 125
 55e:	39 f4       	brne	.+14     	; 0x56e <__vector_20+0xbe>
	{
		gInvertNextFlag = 1;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 3f 11 	sts	0x113F, r25
 568:	80 93 3e 11 	sts	0x113E, r24
 56c:	0d c0       	rjmp	.+26     	; 0x588 <__vector_20+0xd8>
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
 56e:	80 91 4e 16 	lds	r24, 0x164E
 572:	90 91 4f 16 	lds	r25, 0x164F
 576:	fc 01       	movw	r30, r24
 578:	e0 5c       	subi	r30, 0xC0	; 192
 57a:	fe 4e       	sbci	r31, 0xEE	; 238
 57c:	20 83       	st	Z, r18
		++gRxBufferIndex;
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	90 93 4f 16 	sts	0x164F, r25
 584:	80 93 4e 16 	sts	0x164E, r24
	}
		
	
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	0f 90       	pop	r0
 5ae:	0b be       	out	0x3b, r0	; 59
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_26>:
	reset_TWI();
}
*/

ISR(TWI_vect)
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	0b b6       	in	r0, 0x3b	; 59
 5c6:	0f 92       	push	r0
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	4f 93       	push	r20
 5ce:	5f 93       	push	r21
 5d0:	6f 93       	push	r22
 5d2:	7f 93       	push	r23
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
	cli();
 5e0:	f8 94       	cli
	if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
 5e2:	80 91 b9 00 	lds	r24, 0x00B9
 5e6:	88 7f       	andi	r24, 0xF8	; 248
 5e8:	80 36       	cpi	r24, 0x60	; 96
 5ea:	29 f0       	breq	.+10     	; 0x5f6 <__vector_26+0x3c>
 5ec:	80 91 b9 00 	lds	r24, 0x00B9
 5f0:	88 7f       	andi	r24, 0xF8	; 248
 5f2:	88 36       	cpi	r24, 0x68	; 104
 5f4:	21 f4       	brne	.+8      	; 0x5fe <__vector_26+0x44>
	{
		instruction = true;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	80 93 47 13 	sts	0x1347, r24
 5fc:	34 c0       	rjmp	.+104    	; 0x666 <__vector_26+0xac>
		
	}
	else if(CONTROL == DATA_SLAW)
 5fe:	80 91 b9 00 	lds	r24, 0x00B9
 602:	88 7f       	andi	r24, 0xF8	; 248
 604:	80 38       	cpi	r24, 0x80	; 128
 606:	d1 f4       	brne	.+52     	; 0x63c <__vector_26+0x82>
	{
		if(instruction)
 608:	80 91 47 13 	lds	r24, 0x1347
 60c:	88 23       	and	r24, r24
 60e:	41 f0       	breq	.+16     	; 0x620 <__vector_26+0x66>
		{
			current_instruction = get_data();
 610:	89 d0       	rcall	.+274    	; 0x724 <get_data>
 612:	90 93 46 13 	sts	0x1346, r25
 616:	80 93 45 13 	sts	0x1345, r24
			instruction = false;
 61a:	10 92 47 13 	sts	0x1347, r1
 61e:	23 c0       	rjmp	.+70     	; 0x666 <__vector_26+0xac>
		}
		else
		{
			switch(current_instruction)
 620:	80 91 45 13 	lds	r24, 0x1345
 624:	90 91 46 13 	lds	r25, 0x1346
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	91 05       	cpc	r25, r1
 62c:	19 f0       	breq	.+6      	; 0x634 <__vector_26+0x7a>
 62e:	49 97       	sbiw	r24, 0x19	; 25
 630:	d1 f4       	brne	.+52     	; 0x666 <__vector_26+0xac>
 632:	02 c0       	rjmp	.+4      	; 0x638 <__vector_26+0x7e>
			{
				case(I_SETTINGS):
				{
					get_settings_from_bus();
 634:	19 d1       	rcall	.+562    	; 0x868 <get_settings_from_bus>
					break;
 636:	17 c0       	rjmp	.+46     	; 0x666 <__vector_26+0xac>
				}
				case(I_STRING):
				{
					get_char_from_bus();
 638:	22 d1       	rcall	.+580    	; 0x87e <get_char_from_bus>
					break;
 63a:	15 c0       	rjmp	.+42     	; 0x666 <__vector_26+0xac>
				}
			}
		}
	}
	else if (CONTROL == DATA_GENERAL)
 63c:	80 91 b9 00 	lds	r24, 0x00B9
 640:	88 7f       	andi	r24, 0xF8	; 248
 642:	80 39       	cpi	r24, 0x90	; 144
 644:	19 f4       	brne	.+6      	; 0x64c <__vector_26+0x92>
	{
		//temp
		PORTA |= (1<<PORTA1); // turn on/off led
 646:	11 9a       	sbi	0x02, 1	; 2
		//temp
		
		get_sensor_from_bus();
 648:	34 d1       	rcall	.+616    	; 0x8b2 <get_sensor_from_bus>
 64a:	0d c0       	rjmp	.+26     	; 0x666 <__vector_26+0xac>
	}
	else if (CONTROL == STOP)
 64c:	80 91 b9 00 	lds	r24, 0x00B9
 650:	88 7f       	andi	r24, 0xF8	; 248
 652:	80 3a       	cpi	r24, 0xA0	; 160
 654:	41 f4       	brne	.+16     	; 0x666 <__vector_26+0xac>
	{
		switch(current_instruction)
 656:	80 91 45 13 	lds	r24, 0x1345
 65a:	90 91 46 13 	lds	r25, 0x1346
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	09 f4       	brne	.+2      	; 0x664 <__vector_26+0xaa>
		{
			case(I_SETTINGS):
			{
				get_settings();
 662:	08 d1       	rcall	.+528    	; 0x874 <get_settings>
			{
				//get_char(1);
				break;
			}
		}
		stop_twi();
 664:	5d d1       	rcall	.+698    	; 0x920 <stop_twi>
	}
	reset_TWI();
 666:	69 d1       	rcall	.+722    	; 0x93a <reset_TWI>
	sei();
 668:	78 94       	sei
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	0f 90       	pop	r0
 684:	0b be       	out	0x3b, r0	; 59
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <set_twi_reciever_enable>:
}

int get_sweep()
{
	return sweep;
}
 690:	85 e4       	ldi	r24, 0x45	; 69
 692:	80 93 bc 00 	sts	0x00BC, r24
 696:	08 95       	ret

00000698 <init_TWI>:
 698:	90 93 49 13 	sts	0x1349, r25
 69c:	80 93 48 13 	sts	0x1348, r24
 6a0:	80 34       	cpi	r24, 0x40	; 64
 6a2:	91 05       	cpc	r25, r1
 6a4:	81 f0       	breq	.+32     	; 0x6c6 <init_TWI+0x2e>
 6a6:	80 38       	cpi	r24, 0x80	; 128
 6a8:	91 05       	cpc	r25, r1
 6aa:	19 f0       	breq	.+6      	; 0x6b2 <init_TWI+0x1a>
 6ac:	80 97       	sbiw	r24, 0x20	; 32
 6ae:	d1 f4       	brne	.+52     	; 0x6e4 <init_TWI+0x4c>
 6b0:	12 c0       	rjmp	.+36     	; 0x6d6 <init_TWI+0x3e>
 6b2:	83 e0       	ldi	r24, 0x03	; 3
 6b4:	88 b9       	out	0x08, r24	; 8
 6b6:	ec df       	rcall	.-40     	; 0x690 <set_twi_reciever_enable>
 6b8:	8b e1       	ldi	r24, 0x1B	; 27
 6ba:	80 93 b8 00 	sts	0x00B8, r24
 6be:	81 e8       	ldi	r24, 0x81	; 129
 6c0:	80 93 ba 00 	sts	0x00BA, r24
 6c4:	08 95       	ret
 6c6:	87 e1       	ldi	r24, 0x17	; 23
 6c8:	80 93 b8 00 	sts	0x00B8, r24
 6cc:	e1 df       	rcall	.-62     	; 0x690 <set_twi_reciever_enable>
 6ce:	80 e4       	ldi	r24, 0x40	; 64
 6d0:	80 93 ba 00 	sts	0x00BA, r24
 6d4:	08 95       	ret
 6d6:	87 e1       	ldi	r24, 0x17	; 23
 6d8:	80 93 b8 00 	sts	0x00B8, r24
 6dc:	d9 df       	rcall	.-78     	; 0x690 <set_twi_reciever_enable>
 6de:	81 e2       	ldi	r24, 0x21	; 33
 6e0:	80 93 ba 00 	sts	0x00BA, r24
 6e4:	08 95       	ret

000006e6 <clear_int>:
 6e6:	81 ec       	ldi	r24, 0xC1	; 193
 6e8:	80 93 bc 00 	sts	0x00BC, r24
 6ec:	08 95       	ret

000006ee <start_bus>:
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	8f e9       	ldi	r24, 0x9F	; 159
 6f2:	95 e0       	ldi	r25, 0x05	; 5
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <start_bus+0x6>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <start_bus+0x10>
 6fe:	00 00       	nop
 700:	84 ea       	ldi	r24, 0xA4	; 164
 702:	80 93 bc 00 	sts	0x00BC, r24
 706:	08 95       	ret

00000708 <stop_bus>:
 708:	85 ed       	ldi	r24, 0xD5	; 213
 70a:	80 93 bc 00 	sts	0x00BC, r24
 70e:	08 95       	ret

00000710 <Error>:
 710:	80 91 b9 00 	lds	r24, 0x00B9
 714:	88 7f       	andi	r24, 0xF8	; 248
 716:	88 33       	cpi	r24, 0x38	; 56
 718:	09 f0       	breq	.+2      	; 0x71c <Error+0xc>
 71a:	f6 cf       	rjmp	.-20     	; 0x708 <stop_bus>
 71c:	e4 cf       	rjmp	.-56     	; 0x6e6 <clear_int>

0000071e <set_data>:
 71e:	80 93 bb 00 	sts	0x00BB, r24
 722:	08 95       	ret

00000724 <get_data>:
 724:	80 91 bb 00 	lds	r24, 0x00BB
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	08 95       	ret

0000072c <send_bus>:
 72c:	84 e8       	ldi	r24, 0x84	; 132
 72e:	80 93 bc 00 	sts	0x00BC, r24
 732:	08 95       	ret

00000734 <wait_for_bus>:
 734:	ec eb       	ldi	r30, 0xBC	; 188
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	88 23       	and	r24, r24
 73c:	ec f7       	brge	.-6      	; 0x738 <wait_for_bus+0x4>
 73e:	08 95       	ret

00000740 <send_string>:
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	ec 01       	movw	r28, r24
 74e:	e6 2e       	mov	r14, r22
 750:	f7 2e       	mov	r15, r23
 752:	cd df       	rcall	.-102    	; 0x6ee <start_bus>
 754:	ef df       	rcall	.-34     	; 0x734 <wait_for_bus>
 756:	80 91 b9 00 	lds	r24, 0x00B9
 75a:	88 7f       	andi	r24, 0xF8	; 248
 75c:	88 30       	cpi	r24, 0x08	; 8
 75e:	19 f0       	breq	.+6      	; 0x766 <send_string+0x26>
 760:	d7 df       	rcall	.-82     	; 0x710 <Error>
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	34 c0       	rjmp	.+104    	; 0x7ce <send_string+0x8e>
 766:	ce 01       	movw	r24, r28
 768:	da df       	rcall	.-76     	; 0x71e <set_data>
 76a:	e0 df       	rcall	.-64     	; 0x72c <send_bus>
 76c:	e3 df       	rcall	.-58     	; 0x734 <wait_for_bus>
 76e:	80 91 b9 00 	lds	r24, 0x00B9
 772:	88 7f       	andi	r24, 0xF8	; 248
 774:	88 31       	cpi	r24, 0x18	; 24
 776:	19 f0       	breq	.+6      	; 0x77e <send_string+0x3e>
 778:	cb df       	rcall	.-106    	; 0x710 <Error>
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	28 c0       	rjmp	.+80     	; 0x7ce <send_string+0x8e>
 77e:	89 e1       	ldi	r24, 0x19	; 25
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	cd df       	rcall	.-102    	; 0x71e <set_data>
 784:	d3 df       	rcall	.-90     	; 0x72c <send_bus>
 786:	d6 df       	rcall	.-84     	; 0x734 <wait_for_bus>
 788:	80 91 b9 00 	lds	r24, 0x00B9
 78c:	88 7f       	andi	r24, 0xF8	; 248
 78e:	88 32       	cpi	r24, 0x28	; 40
 790:	29 f4       	brne	.+10     	; 0x79c <send_string+0x5c>
 792:	0e 2d       	mov	r16, r14
 794:	1f 2d       	mov	r17, r15
 796:	c0 e0       	ldi	r28, 0x00	; 0
 798:	d0 e0       	ldi	r29, 0x00	; 0
 79a:	0b c0       	rjmp	.+22     	; 0x7b2 <send_string+0x72>
 79c:	b9 df       	rcall	.-142    	; 0x710 <Error>
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	16 c0       	rjmp	.+44     	; 0x7ce <send_string+0x8e>
 7a2:	f8 01       	movw	r30, r16
 7a4:	81 91       	ld	r24, Z+
 7a6:	8f 01       	movw	r16, r30
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	b9 df       	rcall	.-142    	; 0x71e <set_data>
 7ac:	bf df       	rcall	.-130    	; 0x72c <send_bus>
 7ae:	c2 df       	rcall	.-124    	; 0x734 <wait_for_bus>
 7b0:	21 96       	adiw	r28, 0x01	; 1
 7b2:	ee 2d       	mov	r30, r14
 7b4:	ff 2d       	mov	r31, r15
 7b6:	df 01       	movw	r26, r30
 7b8:	0d 90       	ld	r0, X+
 7ba:	00 20       	and	r0, r0
 7bc:	e9 f7       	brne	.-6      	; 0x7b8 <send_string+0x78>
 7be:	11 97       	sbiw	r26, 0x01	; 1
 7c0:	ae 1b       	sub	r26, r30
 7c2:	bf 0b       	sbc	r27, r31
 7c4:	ca 17       	cp	r28, r26
 7c6:	db 07       	cpc	r29, r27
 7c8:	60 f3       	brcs	.-40     	; 0x7a2 <send_string+0x62>
 7ca:	9e df       	rcall	.-196    	; 0x708 <stop_bus>
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	08 95       	ret

000007dc <send_string_fixed_length>:
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	ec 01       	movw	r28, r24
 7ea:	e6 2e       	mov	r14, r22
 7ec:	f7 2e       	mov	r15, r23
 7ee:	8a 01       	movw	r16, r20
 7f0:	7e df       	rcall	.-260    	; 0x6ee <start_bus>
 7f2:	a0 df       	rcall	.-192    	; 0x734 <wait_for_bus>
 7f4:	80 91 b9 00 	lds	r24, 0x00B9
 7f8:	88 7f       	andi	r24, 0xF8	; 248
 7fa:	88 30       	cpi	r24, 0x08	; 8
 7fc:	19 f0       	breq	.+6      	; 0x804 <send_string_fixed_length+0x28>
 7fe:	88 df       	rcall	.-240    	; 0x710 <Error>
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	2b c0       	rjmp	.+86     	; 0x85a <send_string_fixed_length+0x7e>
 804:	ce 01       	movw	r24, r28
 806:	8b df       	rcall	.-234    	; 0x71e <set_data>
 808:	91 df       	rcall	.-222    	; 0x72c <send_bus>
 80a:	94 df       	rcall	.-216    	; 0x734 <wait_for_bus>
 80c:	80 91 b9 00 	lds	r24, 0x00B9
 810:	88 7f       	andi	r24, 0xF8	; 248
 812:	88 31       	cpi	r24, 0x18	; 24
 814:	19 f0       	breq	.+6      	; 0x81c <send_string_fixed_length+0x40>
 816:	7c df       	rcall	.-264    	; 0x710 <Error>
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	1f c0       	rjmp	.+62     	; 0x85a <send_string_fixed_length+0x7e>
 81c:	89 e1       	ldi	r24, 0x19	; 25
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	7e df       	rcall	.-260    	; 0x71e <set_data>
 822:	84 df       	rcall	.-248    	; 0x72c <send_bus>
 824:	87 df       	rcall	.-242    	; 0x734 <wait_for_bus>
 826:	80 91 b9 00 	lds	r24, 0x00B9
 82a:	88 7f       	andi	r24, 0xF8	; 248
 82c:	88 32       	cpi	r24, 0x28	; 40
 82e:	21 f4       	brne	.+8      	; 0x838 <send_string_fixed_length+0x5c>
 830:	10 16       	cp	r1, r16
 832:	11 06       	cpc	r1, r17
 834:	24 f0       	brlt	.+8      	; 0x83e <send_string_fixed_length+0x62>
 836:	0f c0       	rjmp	.+30     	; 0x856 <send_string_fixed_length+0x7a>
 838:	6b df       	rcall	.-298    	; 0x710 <Error>
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	0e c0       	rjmp	.+28     	; 0x85a <send_string_fixed_length+0x7e>
 83e:	ce 2d       	mov	r28, r14
 840:	df 2d       	mov	r29, r15
 842:	0c 0f       	add	r16, r28
 844:	1d 1f       	adc	r17, r29
 846:	89 91       	ld	r24, Y+
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	69 df       	rcall	.-302    	; 0x71e <set_data>
 84c:	6f df       	rcall	.-290    	; 0x72c <send_bus>
 84e:	72 df       	rcall	.-284    	; 0x734 <wait_for_bus>
 850:	c0 17       	cp	r28, r16
 852:	d1 07       	cpc	r29, r17
 854:	c1 f7       	brne	.-16     	; 0x846 <send_string_fixed_length+0x6a>
 856:	58 df       	rcall	.-336    	; 0x708 <stop_bus>
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	ff 90       	pop	r15
 864:	ef 90       	pop	r14
 866:	08 95       	ret

00000868 <get_settings_from_bus>:
 868:	5d df       	rcall	.-326    	; 0x724 <get_data>
 86a:	90 93 53 16 	sts	0x1653, r25
 86e:	80 93 52 16 	sts	0x1652, r24
 872:	08 95       	ret

00000874 <get_settings>:
 874:	80 91 52 16 	lds	r24, 0x1652
 878:	90 91 53 16 	lds	r25, 0x1653
 87c:	08 95       	ret

0000087e <get_char_from_bus>:
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	c0 91 69 17 	lds	r28, 0x1769
 886:	d0 91 6a 17 	lds	r29, 0x176A
 88a:	4c df       	rcall	.-360    	; 0x724 <get_data>
 88c:	c6 5a       	subi	r28, 0xA6	; 166
 88e:	d9 4e       	sbci	r29, 0xE9	; 233
 890:	88 83       	st	Y, r24
 892:	80 91 69 17 	lds	r24, 0x1769
 896:	90 91 6a 17 	lds	r25, 0x176A
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	90 93 6a 17 	sts	0x176A, r25
 8a0:	80 93 69 17 	sts	0x1769, r24
 8a4:	90 93 51 16 	sts	0x1651, r25
 8a8:	80 93 50 16 	sts	0x1650, r24
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <get_sensor_from_bus>:
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	c0 91 6f 17 	lds	r28, 0x176F
 8ba:	d0 91 70 17 	lds	r29, 0x1770
 8be:	c7 30       	cpi	r28, 0x07	; 7
 8c0:	d1 05       	cpc	r29, r1
 8c2:	99 f4       	brne	.+38     	; 0x8ea <get_sensor_from_bus+0x38>
 8c4:	eb e5       	ldi	r30, 0x5B	; 91
 8c6:	f7 e1       	ldi	r31, 0x17	; 23
 8c8:	a1 e7       	ldi	r26, 0x71	; 113
 8ca:	b7 e1       	ldi	r27, 0x17	; 23
 8cc:	29 e6       	ldi	r18, 0x69	; 105
 8ce:	37 e1       	ldi	r19, 0x17	; 23
 8d0:	81 91       	ld	r24, Z+
 8d2:	91 91       	ld	r25, Z+
 8d4:	8d 93       	st	X+, r24
 8d6:	9d 93       	st	X+, r25
 8d8:	e2 17       	cp	r30, r18
 8da:	f3 07       	cpc	r31, r19
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <get_sensor_from_bus+0x1e>
 8de:	22 df       	rcall	.-444    	; 0x724 <get_data>
 8e0:	90 93 6c 17 	sts	0x176C, r25
 8e4:	80 93 6b 17 	sts	0x176B, r24
 8e8:	10 c0       	rjmp	.+32     	; 0x90a <get_sensor_from_bus+0x58>
 8ea:	1c df       	rcall	.-456    	; 0x724 <get_data>
 8ec:	cc 0f       	add	r28, r28
 8ee:	dd 1f       	adc	r29, r29
 8f0:	c5 5a       	subi	r28, 0xA5	; 165
 8f2:	d8 4e       	sbci	r29, 0xE8	; 232
 8f4:	99 83       	std	Y+1, r25	; 0x01
 8f6:	88 83       	st	Y, r24
 8f8:	80 91 6f 17 	lds	r24, 0x176F
 8fc:	90 91 70 17 	lds	r25, 0x1770
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	90 93 70 17 	sts	0x1770, r25
 906:	80 93 6f 17 	sts	0x176F, r24
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	08 95       	ret

00000910 <get_sensor>:
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	fc 01       	movw	r30, r24
 916:	ef 58       	subi	r30, 0x8F	; 143
 918:	f8 4e       	sbci	r31, 0xE8	; 232
 91a:	80 81       	ld	r24, Z
 91c:	91 81       	ldd	r25, Z+1	; 0x01
 91e:	08 95       	ret

00000920 <stop_twi>:

void stop_twi()
{
	current_command = 0;
 920:	10 92 5a 17 	sts	0x175A, r1
 924:	10 92 59 17 	sts	0x1759, r1
	sensor = 0;
 928:	10 92 70 17 	sts	0x1770, r1
 92c:	10 92 6f 17 	sts	0x176F, r1
	message_counter = 0;
 930:	10 92 6a 17 	sts	0x176A, r1
 934:	10 92 69 17 	sts	0x1769, r1
 938:	08 95       	ret

0000093a <reset_TWI>:
}

void reset_TWI()
{
	TWCR |= (1<<TWINT) | (1<<TWEA);
 93a:	ec eb       	ldi	r30, 0xBC	; 188
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	80 6c       	ori	r24, 0xC0	; 192
 942:	80 83       	st	Z, r24
 944:	08 95       	ret

00000946 <_exit>:
 946:	f8 94       	cli

00000948 <__stop_program>:
 948:	ff cf       	rjmp	.-2      	; 0x948 <__stop_program>
