
sensormodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001036  00800100  00001b54  00001be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000216  00801136  00801136  00002c1e  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000932  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000599a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002e0  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000029a6  00000000  00000000  00005ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b63  00000000  00000000  0000864f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ed2  00000000  00000000  000091b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000904  00000000  00000000  0000b084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008be  00000000  00000000  0000b988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000205c  00000000  00000000  0000c246  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  0000e2a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_4>
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c1       	rjmp	.+1020   	; 0x422 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	cb c1       	rjmp	.+918    	; 0x3cc <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c5       	rjmp	.+2628   	; 0xaa6 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_26>
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e1       	ldi	r17, 0x11	; 17
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e5       	ldi	r30, 0x54	; 84
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 33       	cpi	r26, 0x36	; 54
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e1       	ldi	r18, 0x13	; 19
      b4:	a6 e3       	ldi	r26, 0x36	; 54
      b6:	b1 e1       	ldi	r27, 0x11	; 17
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 34       	cpi	r26, 0x4C	; 76
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	64 d1       	rcall	.+712    	; 0x38c <main>
      c4:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <set_counter_1>:
	TCNT2 = 0;
}

void set_counter_1(uint16_t delay)
{
	delay = 15.625 * delay;
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a e7       	ldi	r20, 0x7A	; 122
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__mulsf3>
      e0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixunssfsi>
	OCR1A = delay;
      e4:	70 93 89 00 	sts	0x0089, r23
      e8:	60 93 88 00 	sts	0x0088, r22
      ec:	08 95       	ret

000000ee <set_counter_2>:
}

void set_counter_2(uint16_t delay)
{
	delay = 15.625 * delay;
      ee:	bc 01       	movw	r22, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__floatunsisf>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	51 e4       	ldi	r21, 0x41	; 65
     100:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__mulsf3>
     104:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixunssfsi>
	// ------------------ OBS ändrade detta för att testa om det är fel, vet inte... -----------------------------
	OCR1B = delay;
     108:	70 93 8b 00 	sts	0x008B, r23
     10c:	60 93 8a 00 	sts	0x008A, r22
     110:	08 95       	ret

00000112 <init_counters>:

//---------------------------------------COUNTERS/TIMERS-----------
void init_counters()
{
	// WGMn3:0 = 4 (OCRnA) or 12 (OCRn), where top value is read from.
	TCCR1B |= 0b00000101; // clock 1, prescaler 1024
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	85 60       	ori	r24, 0x05	; 5
     11a:	80 83       	st	Z, r24
	TCCR2B |= 0b00000101; // clock 2, prescaler 1024
     11c:	e1 eb       	ldi	r30, 0xB1	; 177
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	85 60       	ori	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	
	// standardvalue for interrupt is 1000ms
	set_counter_1(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	cf df       	rcall	.-98     	; 0xca <set_counter_1>
	set_counter_2(1000);
     12c:	88 ee       	ldi	r24, 0xE8	; 232
     12e:	93 e0       	ldi	r25, 0x03	; 3
     130:	de df       	rcall	.-68     	; 0xee <set_counter_2>
	
	TIMSK1 |= 0b00000010; // Enable interrupts when OCF1A, in TIFR1, is set.
     132:	ef e6       	ldi	r30, 0x6F	; 111
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 60       	ori	r24, 0x02	; 2
     13a:	80 83       	st	Z, r24
	TIMSK2 |= 0b00000010; // Enable interrupts when OCF2A, in TIFR2, is set.
     13c:	e0 e7       	ldi	r30, 0x70	; 112
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
	// OCF1A (or ICFn) Flag, in TIFR1, can be used to generate interrupts.
	TCNT1 = 0;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	TCNT2 = 0;
     14e:	10 92 b2 00 	sts	0x00B2, r1
     152:	08 95       	ret

00000154 <toggle_enable>:
		} else 
		{
			print_int(value);
		}
	}
}
     154:	5e 9a       	sbi	0x0b, 6	; 11
     156:	8f e3       	ldi	r24, 0x3F	; 63
     158:	9c e9       	ldi	r25, 0x9C	; 156
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <toggle_enable+0x6>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <toggle_enable+0xc>
     160:	00 00       	nop
     162:	8b b1       	in	r24, 0x0b	; 11
     164:	1b b8       	out	0x0b, r1	; 11
     166:	08 95       	ret

00000168 <display_init>:
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	84 b9       	out	0x04, r24	; 4
     16c:	8a b1       	in	r24, 0x0a	; 10
     16e:	80 6e       	ori	r24, 0xE0	; 224
     170:	8a b9       	out	0x0a, r24	; 10
     172:	8b b1       	in	r24, 0x0b	; 11
     174:	1b b8       	out	0x0b, r1	; 11
     176:	2f e7       	ldi	r18, 0x7F	; 127
     178:	83 e8       	ldi	r24, 0x83	; 131
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	80 40       	sbci	r24, 0x00	; 0
     180:	90 40       	sbci	r25, 0x00	; 0
     182:	e1 f7       	brne	.-8      	; 0x17c <display_init+0x14>
     184:	00 c0       	rjmp	.+0      	; 0x186 <display_init+0x1e>
     186:	00 00       	nop
     188:	88 e3       	ldi	r24, 0x38	; 56
     18a:	85 b9       	out	0x05, r24	; 5
     18c:	e3 df       	rcall	.-58     	; 0x154 <toggle_enable>
     18e:	25 ed       	ldi	r18, 0xD5	; 213
     190:	2a 95       	dec	r18
     192:	f1 f7       	brne	.-4      	; 0x190 <display_init+0x28>
     194:	00 00       	nop
     196:	8f e0       	ldi	r24, 0x0F	; 15
     198:	85 b9       	out	0x05, r24	; 5
     19a:	dc df       	rcall	.-72     	; 0x154 <toggle_enable>
     19c:	85 ed       	ldi	r24, 0xD5	; 213
     19e:	8a 95       	dec	r24
     1a0:	f1 f7       	brne	.-4      	; 0x19e <display_init+0x36>
     1a2:	00 00       	nop
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	85 b9       	out	0x05, r24	; 5
     1a8:	d5 df       	rcall	.-86     	; 0x154 <toggle_enable>
     1aa:	8f e3       	ldi	r24, 0x3F	; 63
     1ac:	9f e1       	ldi	r25, 0x1F	; 31
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <display_init+0x46>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <display_init+0x4c>
     1b4:	00 00       	nop
     1b6:	86 e0       	ldi	r24, 0x06	; 6
     1b8:	85 b9       	out	0x05, r24	; 5
     1ba:	cc cf       	rjmp	.-104    	; 0x154 <toggle_enable>

000001bc <display_set_pos>:
     1bc:	2b b1       	in	r18, 0x0b	; 11
     1be:	1b b8       	out	0x0b, r1	; 11
     1c0:	82 30       	cpi	r24, 0x02	; 2
     1c2:	91 05       	cpc	r25, r1
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <display_set_pos+0x1a>
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	91 05       	cpc	r25, r1
     1ca:	41 f0       	breq	.+16     	; 0x1dc <display_set_pos+0x20>
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	49 f0       	breq	.+18     	; 0x1e2 <display_set_pos+0x26>
     1d0:	80 e8       	ldi	r24, 0x80	; 128
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <display_set_pos+0x2a>
     1d6:	80 e9       	ldi	r24, 0x90	; 144
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <display_set_pos+0x2a>
     1dc:	80 ed       	ldi	r24, 0xD0	; 208
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <display_set_pos+0x2a>
     1e2:	80 ec       	ldi	r24, 0xC0	; 192
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	68 0f       	add	r22, r24
     1e8:	79 1f       	adc	r23, r25
     1ea:	65 b9       	out	0x05, r22	; 5
     1ec:	b3 cf       	rjmp	.-154    	; 0x154 <toggle_enable>

000001ee <display_char>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	d8 2f       	mov	r29, r24
     1f4:	cf ef       	ldi	r28, 0xFF	; 255
     1f6:	15 b8       	out	0x05, r1	; 5
     1f8:	14 b8       	out	0x04, r1	; 4
     1fa:	5d 98       	cbi	0x0b, 5	; 11
     1fc:	5f 9a       	sbi	0x0b, 7	; 11
     1fe:	85 e3       	ldi	r24, 0x35	; 53
     200:	8a 95       	dec	r24
     202:	f1 f7       	brne	.-4      	; 0x200 <display_char+0x12>
     204:	00 00       	nop
     206:	a6 df       	rcall	.-180    	; 0x154 <toggle_enable>
     208:	1f 9b       	sbis	0x03, 7	; 3
     20a:	03 c0       	rjmp	.+6      	; 0x212 <display_char+0x24>
     20c:	5f 98       	cbi	0x0b, 7	; 11
     20e:	c4 b9       	out	0x04, r28	; 4
     210:	f2 cf       	rjmp	.-28     	; 0x1f6 <display_char+0x8>
     212:	5f 98       	cbi	0x0b, 7	; 11
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	c4 b9       	out	0x04, r28	; 4
     218:	5d 9a       	sbi	0x0b, 5	; 11
     21a:	d5 b9       	out	0x05, r29	; 5
     21c:	9b df       	rcall	.-202    	; 0x154 <toggle_enable>
     21e:	15 b8       	out	0x05, r1	; 5
     220:	14 b8       	out	0x04, r1	; 4
     222:	5d 98       	cbi	0x0b, 5	; 11
     224:	5f 9a       	sbi	0x0b, 7	; 11
     226:	85 e3       	ldi	r24, 0x35	; 53
     228:	8a 95       	dec	r24
     22a:	f1 f7       	brne	.-4      	; 0x228 <display_char+0x3a>
     22c:	00 00       	nop
     22e:	92 df       	rcall	.-220    	; 0x154 <toggle_enable>
     230:	83 b1       	in	r24, 0x03	; 3
     232:	c4 b9       	out	0x04, r28	; 4
     234:	5d 9a       	sbi	0x0b, 5	; 11
     236:	80 32       	cpi	r24, 0x20	; 32
     238:	a9 f0       	breq	.+42     	; 0x264 <display_char+0x76>
     23a:	18 f4       	brcc	.+6      	; 0x242 <display_char+0x54>
     23c:	80 31       	cpi	r24, 0x10	; 16
     23e:	e9 f4       	brne	.+58     	; 0x27a <display_char+0x8c>
     240:	05 c0       	rjmp	.+10     	; 0x24c <display_char+0x5e>
     242:	80 35       	cpi	r24, 0x50	; 80
     244:	49 f0       	breq	.+18     	; 0x258 <display_char+0x6a>
     246:	80 36       	cpi	r24, 0x60	; 96
     248:	c1 f4       	brne	.+48     	; 0x27a <display_char+0x8c>
     24a:	12 c0       	rjmp	.+36     	; 0x270 <display_char+0x82>
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	b3 df       	rcall	.-154    	; 0x1bc <display_set_pos>
     256:	11 c0       	rjmp	.+34     	; 0x27a <display_char+0x8c>
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	ad df       	rcall	.-166    	; 0x1bc <display_set_pos>
     262:	0b c0       	rjmp	.+22     	; 0x27a <display_char+0x8c>
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	a7 df       	rcall	.-178    	; 0x1bc <display_set_pos>
     26e:	05 c0       	rjmp	.+10     	; 0x27a <display_char+0x8c>
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a1 df       	rcall	.-190    	; 0x1bc <display_set_pos>
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <display_text_fixed_length>:
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
{
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
	for(int i = 0; i < length; ++i)
     288:	16 16       	cp	r1, r22
     28a:	17 06       	cpc	r1, r23
     28c:	54 f4       	brge	.+20     	; 0x2a2 <display_text_fixed_length+0x22>
     28e:	c8 2f       	mov	r28, r24
     290:	d9 2f       	mov	r29, r25
	{
		display_char(text[i]);
	}
}

void display_text_fixed_length(char text[], int length)
     292:	8e 01       	movw	r16, r28
     294:	06 0f       	add	r16, r22
     296:	17 1f       	adc	r17, r23
{
	for(int i = 0; i < length; ++i)
	{
		display_char(text[i]);
     298:	89 91       	ld	r24, Y+
     29a:	a9 df       	rcall	.-174    	; 0x1ee <display_char>
	}
}

void display_text_fixed_length(char text[], int length)
{
	for(int i = 0; i < length; ++i)
     29c:	c0 17       	cp	r28, r16
     29e:	d1 07       	cpc	r29, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <display_text_fixed_length+0x18>
	{
		display_char(text[i]);
	}
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	08 95       	ret

000002ac <display_text>:
		return 0;
	}
}

void display_text(char text[])
{
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	e8 2e       	mov	r14, r24
     2ba:	f9 2e       	mov	r15, r25
     2bc:	08 2f       	mov	r16, r24
     2be:	19 2f       	mov	r17, r25
	for(int i = 0; i < strlen(text); ++i)
     2c0:	c0 e0       	ldi	r28, 0x00	; 0
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <display_text+0x24>
	{
		display_char(text[i]);
     2c6:	f8 01       	movw	r30, r16
     2c8:	81 91       	ld	r24, Z+
     2ca:	8f 01       	movw	r16, r30
     2cc:	90 df       	rcall	.-224    	; 0x1ee <display_char>
	}
}

void display_text(char text[])
{
	for(int i = 0; i < strlen(text); ++i)
     2ce:	21 96       	adiw	r28, 0x01	; 1
     2d0:	ee 2d       	mov	r30, r14
     2d2:	ff 2d       	mov	r31, r15
     2d4:	df 01       	movw	r26, r30
     2d6:	0d 90       	ld	r0, X+
     2d8:	00 20       	and	r0, r0
     2da:	e9 f7       	brne	.-6      	; 0x2d6 <display_text+0x2a>
     2dc:	11 97       	sbiw	r26, 0x01	; 1
     2de:	ae 1b       	sub	r26, r30
     2e0:	bf 0b       	sbc	r27, r31
     2e2:	ca 17       	cp	r28, r26
     2e4:	db 07       	cpc	r29, r27
     2e6:	78 f3       	brcs	.-34     	; 0x2c6 <display_text+0x1a>
	{
		display_char(text[i]);
	}
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	08 95       	ret

000002f6 <FifoDataLength>:

#include <avr/io.h>
#include "fifo.h"

uint8_t FifoDataLength (struct fifo *fifo)
{
     2f6:	fc 01       	movw	r30, r24
	return (fifo->write - fifo->read) & (fifo->size -1);
     2f8:	90 81       	ld	r25, Z
     2fa:	91 50       	subi	r25, 0x01	; 1
     2fc:	84 81       	ldd	r24, Z+4	; 0x04
     2fe:	22 81       	ldd	r18, Z+2	; 0x02
     300:	82 1b       	sub	r24, r18
};
     302:	89 23       	and	r24, r25
     304:	08 95       	ret

00000306 <FifoWrite>:

uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	ec 01       	movw	r28, r24
     30e:	16 2f       	mov	r17, r22
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
     310:	f2 df       	rcall	.-28     	; 0x2f6 <FifoDataLength>
     312:	28 81       	ld	r18, Y
     314:	39 81       	ldd	r19, Y+1	; 0x01
     316:	21 50       	subi	r18, 0x01	; 1
     318:	31 09       	sbc	r19, r1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	82 17       	cp	r24, r18
     31e:	93 07       	cpc	r25, r19
     320:	69 f0       	breq	.+26     	; 0x33c <FifoWrite+0x36>
	{
		return 1;
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
     322:	8c 81       	ldd	r24, Y+4	; 0x04
     324:	9d 81       	ldd	r25, Y+5	; 0x05
     326:	fe 01       	movw	r30, r28
     328:	e8 0f       	add	r30, r24
     32a:	f9 1f       	adc	r31, r25
     32c:	16 83       	std	Z+6, r17	; 0x06
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	28 23       	and	r18, r24
     332:	39 23       	and	r19, r25
     334:	3d 83       	std	Y+5, r19	; 0x05
     336:	2c 83       	std	Y+4, r18	; 0x04
	return 0;
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	01 c0       	rjmp	.+2      	; 0x33e <FifoWrite+0x38>
uint8_t FifoWrite (struct fifo *fifo, unsigned char data)
{
	// fifo full : error
	if (FifoDataLength(fifo) == (fifo->size - 1))
	{
		return 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
	}
	// write data & increment write pointer
	fifo->buffer[fifo->write] = data;
	fifo->write = (fifo->write + 1) & (fifo->size - 1);
	return 0;
};
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	08 95       	ret

00000346 <FifoRead>:


uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
     350:	8b 01       	movw	r16, r22
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
     352:	d1 df       	rcall	.-94     	; 0x2f6 <FifoDataLength>
     354:	88 23       	and	r24, r24
     356:	a1 f0       	breq	.+40     	; 0x380 <FifoRead+0x3a>
	{
		return 1;
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
     358:	ea 81       	ldd	r30, Y+2	; 0x02
     35a:	fb 81       	ldd	r31, Y+3	; 0x03
     35c:	ec 0f       	add	r30, r28
     35e:	fd 1f       	adc	r31, r29
     360:	86 81       	ldd	r24, Z+6	; 0x06
     362:	f8 01       	movw	r30, r16
     364:	80 83       	st	Z, r24
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
     366:	28 81       	ld	r18, Y
     368:	39 81       	ldd	r19, Y+1	; 0x01
     36a:	21 50       	subi	r18, 0x01	; 1
     36c:	31 09       	sbc	r19, r1
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	9b 81       	ldd	r25, Y+3	; 0x03
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	82 23       	and	r24, r18
     376:	93 23       	and	r25, r19
     378:	9b 83       	std	Y+3, r25	; 0x03
     37a:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	01 c0       	rjmp	.+2      	; 0x382 <FifoRead+0x3c>
uint8_t FifoRead (struct fifo *fifo, unsigned char *data)
{
	// fifo empty : error
	if (FifoDataLength(fifo) == 0)
	{
		return 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
	}
	// read data & increment read pointer
	*data = fifo->buffer[fifo->read];
	fifo->read = (fifo->read + 1) & (fifo->size - 1);
	return 0;
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <main>:
char displayBuffer[64][20];
int bufferSize = 0;

int main(void)
{	
	display_init();
     38c:	ed de       	rcall	.-550    	; 0x168 <display_init>
	sensors_init();
     38e:	a5 d0       	rcall	.+330    	; 0x4da <sensors_init>
	
	// init TWI
	TWI_init(S_ADRESS);
     390:	80 e4       	ldi	r24, 0x40	; 64
     392:	29 d7       	rcall	.+3666   	; 0x11e6 <TWI_init>
	init_counters();
     394:	be de       	rcall	.-644    	; 0x112 <init_counters>
	
	set_counter_1(500);
     396:	84 ef       	ldi	r24, 0xF4	; 244
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	97 de       	rcall	.-722    	; 0xca <set_counter_1>
	set_counter_2(2000);
     39c:	80 ed       	ldi	r24, 0xD0	; 208
     39e:	97 e0       	ldi	r25, 0x07	; 7
     3a0:	a6 de       	rcall	.-692    	; 0xee <set_counter_2>
	
	// Activate interrupts
	sei();
     3a2:	78 94       	sei
	
	display_text("Hello");
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	91 e1       	ldi	r25, 0x11	; 17
     3a8:	81 df       	rcall	.-254    	; 0x2ac <display_text>
	
	while(1)
	{	
		if(sensors_sampling_done())
     3aa:	74 d3       	rcall	.+1768   	; 0xa94 <sensors_sampling_done>
     3ac:	88 23       	and	r24, r24
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <main+0x2c>
		{
			sensors_reset_flag();
     3b0:	74 d3       	rcall	.+1768   	; 0xa9a <sensors_reset_flag>
			TWI_send_sensors(sensors_get_data(), 0);
     3b2:	76 d3       	rcall	.+1772   	; 0xaa0 <sensors_get_data>
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	3a d7       	rcall	.+3700   	; 0x122c <TWI_send_sensors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	2f ef       	ldi	r18, 0xFF	; 255
     3ba:	89 e6       	ldi	r24, 0x69	; 105
     3bc:	98 e1       	ldi	r25, 0x18	; 24
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x32>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x3c>
     3c8:	00 00       	nop
     3ca:	ef cf       	rjmp	.-34     	; 0x3aa <main+0x1e>

000003cc <__vector_13>:
}

//---------------------------------------COUNTERS/TIMERS interrupt vectors-----------

ISR(TIMER1_COMPA_vect)
{
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	0b b6       	in	r0, 0x3b	; 59
     3d8:	0f 92       	push	r0
     3da:	2f 93       	push	r18
     3dc:	3f 93       	push	r19
     3de:	4f 93       	push	r20
     3e0:	5f 93       	push	r21
     3e2:	6f 93       	push	r22
     3e4:	7f 93       	push	r23
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	af 93       	push	r26
     3ec:	bf 93       	push	r27
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
	//display_char('C');
	sensors_start_sample();
     3f2:	4c d3       	rcall	.+1688   	; 0xa8c <sensors_start_sample>
	TCNT1 = 0;
     3f4:	10 92 85 00 	sts	0x0085, r1
     3f8:	10 92 84 00 	sts	0x0084, r1
}
     3fc:	ff 91       	pop	r31
     3fe:	ef 91       	pop	r30
     400:	bf 91       	pop	r27
     402:	af 91       	pop	r26
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	7f 91       	pop	r23
     40a:	6f 91       	pop	r22
     40c:	5f 91       	pop	r21
     40e:	4f 91       	pop	r20
     410:	3f 91       	pop	r19
     412:	2f 91       	pop	r18
     414:	0f 90       	pop	r0
     416:	0b be       	out	0x3b, r0	; 59
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	if(decode_message_TwiFIFO())
     448:	23 d7       	rcall	.+3654   	; 0x1290 <decode_message_TwiFIFO>
		//set_counter_2(3000);
	} else {
		//display_char('B');
		//set_counter_2(5000);
	}
	TCNT2 = 0;
     44a:	10 92 b2 00 	sts	0x00B2, r1
}
     44e:	ff 91       	pop	r31
     450:	ef 91       	pop	r30
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0b be       	out	0x3b, r0	; 59
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <adc_start>:
	display_text("6: ");
	display_value(gSensorBuffer[6]);
	
	display_set_pos(3,8);
	display_text("7: ");
	display_value(gSensorBuffer[7]);
     474:	ea e7       	ldi	r30, 0x7A	; 122
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	80 64       	ori	r24, 0x40	; 64
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <select_sensor>:
     480:	80 93 16 12 	sts	0x1216, r24
     484:	22 b1       	in	r18, 0x02	; 2
     486:	21 7e       	andi	r18, 0xE1	; 225
     488:	22 b9       	out	0x02, r18	; 2
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	91 05       	cpc	r25, r1
     48e:	b9 f0       	breq	.+46     	; 0x4be <select_sensor+0x3e>
     490:	3c f4       	brge	.+14     	; 0x4a0 <select_sensor+0x20>
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	91 05       	cpc	r25, r1
     496:	69 f0       	breq	.+26     	; 0x4b2 <select_sensor+0x32>
     498:	74 f4       	brge	.+28     	; 0x4b6 <select_sensor+0x36>
     49a:	89 2b       	or	r24, r25
     49c:	41 f0       	breq	.+16     	; 0x4ae <select_sensor+0x2e>
     49e:	08 95       	ret
     4a0:	85 30       	cpi	r24, 0x05	; 5
     4a2:	91 05       	cpc	r25, r1
     4a4:	91 f0       	breq	.+36     	; 0x4ca <select_sensor+0x4a>
     4a6:	6c f0       	brlt	.+26     	; 0x4c2 <select_sensor+0x42>
     4a8:	06 97       	sbiw	r24, 0x06	; 6
     4aa:	b1 f4       	brne	.+44     	; 0x4d8 <select_sensor+0x58>
     4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <select_sensor+0x52>
     4ae:	11 9a       	sbi	0x02, 1	; 2
     4b0:	08 95       	ret
     4b2:	12 9a       	sbi	0x02, 2	; 2
     4b4:	08 95       	ret
     4b6:	82 b1       	in	r24, 0x02	; 2
     4b8:	86 60       	ori	r24, 0x06	; 6
     4ba:	82 b9       	out	0x02, r24	; 2
     4bc:	08 95       	ret
     4be:	13 9a       	sbi	0x02, 3	; 2
     4c0:	08 95       	ret
     4c2:	82 b1       	in	r24, 0x02	; 2
     4c4:	8a 60       	ori	r24, 0x0A	; 10
     4c6:	82 b9       	out	0x02, r24	; 2
     4c8:	08 95       	ret
     4ca:	82 b1       	in	r24, 0x02	; 2
     4cc:	8c 60       	ori	r24, 0x0C	; 12
     4ce:	82 b9       	out	0x02, r24	; 2
     4d0:	08 95       	ret
     4d2:	82 b1       	in	r24, 0x02	; 2
     4d4:	8e 60       	ori	r24, 0x0E	; 14
     4d6:	82 b9       	out	0x02, r24	; 2
     4d8:	08 95       	ret

000004da <sensors_init>:
     4da:	4f 92       	push	r4
     4dc:	5f 92       	push	r5
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	8f 92       	push	r8
     4e4:	9f 92       	push	r9
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	8f e8       	ldi	r24, 0x8F	; 143
     4f8:	80 93 7a 00 	sts	0x007A, r24
     4fc:	80 e6       	ldi	r24, 0x60	; 96
     4fe:	80 93 7c 00 	sts	0x007C, r24
     502:	8a e9       	ldi	r24, 0x9A	; 154
     504:	99 e9       	ldi	r25, 0x99	; 153
     506:	a9 e4       	ldi	r26, 0x49	; 73
     508:	b0 e4       	ldi	r27, 0x40	; 64
     50a:	80 93 36 11 	sts	0x1136, r24
     50e:	90 93 37 11 	sts	0x1137, r25
     512:	a0 93 38 11 	sts	0x1138, r26
     516:	b0 93 39 11 	sts	0x1139, r27
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a0 ec       	ldi	r26, 0xC0	; 192
     520:	b0 e4       	ldi	r27, 0x40	; 64
     522:	80 93 3a 11 	sts	0x113A, r24
     526:	90 93 3b 11 	sts	0x113B, r25
     52a:	a0 93 3c 11 	sts	0x113C, r26
     52e:	b0 93 3d 11 	sts	0x113D, r27
     532:	82 e5       	ldi	r24, 0x52	; 82
     534:	98 eb       	ldi	r25, 0xB8	; 184
     536:	ae e3       	ldi	r26, 0x3E	; 62
     538:	b0 e4       	ldi	r27, 0x40	; 64
     53a:	80 93 3e 11 	sts	0x113E, r24
     53e:	90 93 3f 11 	sts	0x113F, r25
     542:	a0 93 40 11 	sts	0x1140, r26
     546:	b0 93 41 11 	sts	0x1141, r27
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a0 ee       	ldi	r26, 0xE0	; 224
     550:	b0 e4       	ldi	r27, 0x40	; 64
     552:	80 93 42 11 	sts	0x1142, r24
     556:	90 93 43 11 	sts	0x1143, r25
     55a:	a0 93 44 11 	sts	0x1144, r26
     55e:	b0 93 45 11 	sts	0x1145, r27
     562:	00 e0       	ldi	r16, 0x00	; 0
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	20 e3       	ldi	r18, 0x30	; 48
     568:	30 e4       	ldi	r19, 0x40	; 64
     56a:	00 93 46 11 	sts	0x1146, r16
     56e:	10 93 47 11 	sts	0x1147, r17
     572:	20 93 48 11 	sts	0x1148, r18
     576:	30 93 49 11 	sts	0x1149, r19
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b1 e4       	ldi	r27, 0x41	; 65
     582:	80 93 4a 11 	sts	0x114A, r24
     586:	90 93 4b 11 	sts	0x114B, r25
     58a:	a0 93 4c 11 	sts	0x114C, r26
     58e:	b0 93 4d 11 	sts	0x114D, r27
     592:	8a e0       	ldi	r24, 0x0A	; 10
     594:	97 ed       	ldi	r25, 0xD7	; 215
     596:	a3 e1       	ldi	r26, 0x13	; 19
     598:	b0 e4       	ldi	r27, 0x40	; 64
     59a:	80 93 4e 11 	sts	0x114E, r24
     59e:	90 93 4f 11 	sts	0x114F, r25
     5a2:	a0 93 50 11 	sts	0x1150, r26
     5a6:	b0 93 51 11 	sts	0x1151, r27
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a0 e2       	ldi	r26, 0x20	; 32
     5b0:	b1 e4       	ldi	r27, 0x41	; 65
     5b2:	80 93 52 11 	sts	0x1152, r24
     5b6:	90 93 53 11 	sts	0x1153, r25
     5ba:	a0 93 54 11 	sts	0x1154, r26
     5be:	b0 93 55 11 	sts	0x1155, r27
     5c2:	85 e8       	ldi	r24, 0x85	; 133
     5c4:	9b ee       	ldi	r25, 0xEB	; 235
     5c6:	a1 ed       	ldi	r26, 0xD1	; 209
     5c8:	bf e3       	ldi	r27, 0x3F	; 63
     5ca:	80 93 56 11 	sts	0x1156, r24
     5ce:	90 93 57 11 	sts	0x1157, r25
     5d2:	a0 93 58 11 	sts	0x1158, r26
     5d6:	b0 93 59 11 	sts	0x1159, r27
     5da:	0f 2e       	mov	r0, r31
     5dc:	41 2c       	mov	r4, r1
     5de:	51 2c       	mov	r5, r1
     5e0:	f0 e7       	ldi	r31, 0x70	; 112
     5e2:	6f 2e       	mov	r6, r31
     5e4:	f1 e4       	ldi	r31, 0x41	; 65
     5e6:	7f 2e       	mov	r7, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	40 92 5a 11 	sts	0x115A, r4
     5ee:	50 92 5b 11 	sts	0x115B, r5
     5f2:	60 92 5c 11 	sts	0x115C, r6
     5f6:	70 92 5d 11 	sts	0x115D, r7
     5fa:	84 e1       	ldi	r24, 0x14	; 20
     5fc:	9e ea       	ldi	r25, 0xAE	; 174
     5fe:	a7 ea       	ldi	r26, 0xA7	; 167
     600:	bf e3       	ldi	r27, 0x3F	; 63
     602:	80 93 5e 11 	sts	0x115E, r24
     606:	90 93 5f 11 	sts	0x115F, r25
     60a:	a0 93 60 11 	sts	0x1160, r26
     60e:	b0 93 61 11 	sts	0x1161, r27
     612:	0f 2e       	mov	r0, r31
     614:	81 2c       	mov	r8, r1
     616:	91 2c       	mov	r9, r1
     618:	f0 ea       	ldi	r31, 0xA0	; 160
     61a:	af 2e       	mov	r10, r31
     61c:	f1 e4       	ldi	r31, 0x41	; 65
     61e:	bf 2e       	mov	r11, r31
     620:	f0 2d       	mov	r31, r0
     622:	80 92 62 11 	sts	0x1162, r8
     626:	90 92 63 11 	sts	0x1163, r9
     62a:	a0 92 64 11 	sts	0x1164, r10
     62e:	b0 92 65 11 	sts	0x1165, r11
     632:	81 e7       	ldi	r24, 0x71	; 113
     634:	9d e3       	ldi	r25, 0x3D	; 61
     636:	aa e8       	ldi	r26, 0x8A	; 138
     638:	bf e3       	ldi	r27, 0x3F	; 63
     63a:	80 93 66 11 	sts	0x1166, r24
     63e:	90 93 67 11 	sts	0x1167, r25
     642:	a0 93 68 11 	sts	0x1168, r26
     646:	b0 93 69 11 	sts	0x1169, r27
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	a8 ec       	ldi	r26, 0xC8	; 200
     650:	b1 e4       	ldi	r27, 0x41	; 65
     652:	80 93 6a 11 	sts	0x116A, r24
     656:	90 93 6b 11 	sts	0x116B, r25
     65a:	a0 93 6c 11 	sts	0x116C, r26
     65e:	b0 93 6d 11 	sts	0x116D, r27
     662:	8f e1       	ldi	r24, 0x1F	; 31
     664:	95 e8       	ldi	r25, 0x85	; 133
     666:	ab e6       	ldi	r26, 0x6B	; 107
     668:	bf e3       	ldi	r27, 0x3F	; 63
     66a:	80 93 6e 11 	sts	0x116E, r24
     66e:	90 93 6f 11 	sts	0x116F, r25
     672:	a0 93 70 11 	sts	0x1170, r26
     676:	b0 93 71 11 	sts	0x1171, r27
     67a:	0f 2e       	mov	r0, r31
     67c:	c1 2c       	mov	r12, r1
     67e:	d1 2c       	mov	r13, r1
     680:	f0 ef       	ldi	r31, 0xF0	; 240
     682:	ef 2e       	mov	r14, r31
     684:	f1 e4       	ldi	r31, 0x41	; 65
     686:	ff 2e       	mov	r15, r31
     688:	f0 2d       	mov	r31, r0
     68a:	c0 92 72 11 	sts	0x1172, r12
     68e:	d0 92 73 11 	sts	0x1173, r13
     692:	e0 92 74 11 	sts	0x1174, r14
     696:	f0 92 75 11 	sts	0x1175, r15
     69a:	84 ea       	ldi	r24, 0xA4	; 164
     69c:	90 e7       	ldi	r25, 0x70	; 112
     69e:	ad e3       	ldi	r26, 0x3D	; 61
     6a0:	bf e3       	ldi	r27, 0x3F	; 63
     6a2:	80 93 76 11 	sts	0x1176, r24
     6a6:	90 93 77 11 	sts	0x1177, r25
     6aa:	a0 93 78 11 	sts	0x1178, r26
     6ae:	b0 93 79 11 	sts	0x1179, r27
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	a0 e2       	ldi	r26, 0x20	; 32
     6b8:	b2 e4       	ldi	r27, 0x42	; 66
     6ba:	80 93 7a 11 	sts	0x117A, r24
     6be:	90 93 7b 11 	sts	0x117B, r25
     6c2:	a0 93 7c 11 	sts	0x117C, r26
     6c6:	b0 93 7d 11 	sts	0x117D, r27
     6ca:	86 ef       	ldi	r24, 0xF6	; 246
     6cc:	98 e2       	ldi	r25, 0x28	; 40
     6ce:	ac e1       	ldi	r26, 0x1C	; 28
     6d0:	bf e3       	ldi	r27, 0x3F	; 63
     6d2:	80 93 7e 11 	sts	0x117E, r24
     6d6:	90 93 7f 11 	sts	0x117F, r25
     6da:	a0 93 80 11 	sts	0x1180, r26
     6de:	b0 93 81 11 	sts	0x1181, r27
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	28 e4       	ldi	r18, 0x48	; 72
     6e8:	32 e4       	ldi	r19, 0x42	; 66
     6ea:	00 93 82 11 	sts	0x1182, r16
     6ee:	10 93 83 11 	sts	0x1183, r17
     6f2:	20 93 84 11 	sts	0x1184, r18
     6f6:	30 93 85 11 	sts	0x1185, r19
     6fa:	8c e5       	ldi	r24, 0x5C	; 92
     6fc:	9f e8       	ldi	r25, 0x8F	; 143
     6fe:	a2 e0       	ldi	r26, 0x02	; 2
     700:	bf e3       	ldi	r27, 0x3F	; 63
     702:	80 93 86 11 	sts	0x1186, r24
     706:	90 93 87 11 	sts	0x1187, r25
     70a:	a0 93 88 11 	sts	0x1188, r26
     70e:	b0 93 89 11 	sts	0x1189, r27
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a0 e7       	ldi	r26, 0x70	; 112
     718:	b2 e4       	ldi	r27, 0x42	; 66
     71a:	80 93 8a 11 	sts	0x118A, r24
     71e:	90 93 8b 11 	sts	0x118B, r25
     722:	a0 93 8c 11 	sts	0x118C, r26
     726:	b0 93 8d 11 	sts	0x118D, r27
     72a:	06 e6       	ldi	r16, 0x66	; 102
     72c:	16 e6       	ldi	r17, 0x66	; 102
     72e:	26 ee       	ldi	r18, 0xE6	; 230
     730:	3e e3       	ldi	r19, 0x3E	; 62
     732:	00 93 8e 11 	sts	0x118E, r16
     736:	10 93 8f 11 	sts	0x118F, r17
     73a:	20 93 90 11 	sts	0x1190, r18
     73e:	30 93 91 11 	sts	0x1191, r19
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	6c e8       	ldi	r22, 0x8C	; 140
     748:	72 e4       	ldi	r23, 0x42	; 66
     74a:	40 93 92 11 	sts	0x1192, r20
     74e:	50 93 93 11 	sts	0x1193, r21
     752:	60 93 94 11 	sts	0x1194, r22
     756:	70 93 95 11 	sts	0x1195, r23
     75a:	85 e8       	ldi	r24, 0x85	; 133
     75c:	9b ee       	ldi	r25, 0xEB	; 235
     75e:	a1 ed       	ldi	r26, 0xD1	; 209
     760:	be e3       	ldi	r27, 0x3E	; 62
     762:	80 93 96 11 	sts	0x1196, r24
     766:	90 93 97 11 	sts	0x1197, r25
     76a:	a0 93 98 11 	sts	0x1198, r26
     76e:	b0 93 99 11 	sts	0x1199, r27
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	a0 ea       	ldi	r26, 0xA0	; 160
     778:	b2 e4       	ldi	r27, 0x42	; 66
     77a:	80 93 9a 11 	sts	0x119A, r24
     77e:	90 93 9b 11 	sts	0x119B, r25
     782:	a0 93 9c 11 	sts	0x119C, r26
     786:	b0 93 9d 11 	sts	0x119D, r27
     78a:	00 e0       	ldi	r16, 0x00	; 0
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	20 e3       	ldi	r18, 0x30	; 48
     790:	30 e4       	ldi	r19, 0x40	; 64
     792:	00 93 9e 11 	sts	0x119E, r16
     796:	10 93 9f 11 	sts	0x119F, r17
     79a:	20 93 a0 11 	sts	0x11A0, r18
     79e:	30 93 a1 11 	sts	0x11A1, r19
     7a2:	40 92 a2 11 	sts	0x11A2, r4
     7a6:	50 92 a3 11 	sts	0x11A3, r5
     7aa:	60 92 a4 11 	sts	0x11A4, r6
     7ae:	70 92 a5 11 	sts	0x11A5, r7
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f3 e3       	ldi	r31, 0x33	; 51
     7b6:	4f 2e       	mov	r4, r31
     7b8:	54 2c       	mov	r5, r4
     7ba:	f3 e2       	ldi	r31, 0x23	; 35
     7bc:	6f 2e       	mov	r6, r31
     7be:	f0 e4       	ldi	r31, 0x40	; 64
     7c0:	7f 2e       	mov	r7, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	40 92 a6 11 	sts	0x11A6, r4
     7c8:	50 92 a7 11 	sts	0x11A7, r5
     7cc:	60 92 a8 11 	sts	0x11A8, r6
     7d0:	70 92 a9 11 	sts	0x11A9, r7
     7d4:	80 92 aa 11 	sts	0x11AA, r8
     7d8:	90 92 ab 11 	sts	0x11AB, r9
     7dc:	a0 92 ac 11 	sts	0x11AC, r10
     7e0:	b0 92 ad 11 	sts	0x11AD, r11
     7e4:	81 2c       	mov	r8, r1
     7e6:	91 2c       	mov	r9, r1
     7e8:	54 01       	movw	r10, r8
     7ea:	68 94       	set
     7ec:	b6 f8       	bld	r11, 6
     7ee:	80 92 ae 11 	sts	0x11AE, r8
     7f2:	90 92 af 11 	sts	0x11AF, r9
     7f6:	a0 92 b0 11 	sts	0x11B0, r10
     7fa:	b0 92 b1 11 	sts	0x11B1, r11
     7fe:	c0 92 b2 11 	sts	0x11B2, r12
     802:	d0 92 b3 11 	sts	0x11B3, r13
     806:	e0 92 b4 11 	sts	0x11B4, r14
     80a:	f0 92 b5 11 	sts	0x11B5, r15
     80e:	0f 2e       	mov	r0, r31
     810:	f6 e6       	ldi	r31, 0x66	; 102
     812:	cf 2e       	mov	r12, r31
     814:	dc 2c       	mov	r13, r12
     816:	f6 ec       	ldi	r31, 0xC6	; 198
     818:	ef 2e       	mov	r14, r31
     81a:	ff e3       	ldi	r31, 0x3F	; 63
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
     820:	c0 92 b6 11 	sts	0x11B6, r12
     824:	d0 92 b7 11 	sts	0x11B7, r13
     828:	e0 92 b8 11 	sts	0x11B8, r14
     82c:	f0 92 b9 11 	sts	0x11B9, r15
     830:	00 e0       	ldi	r16, 0x00	; 0
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	20 e2       	ldi	r18, 0x20	; 32
     836:	32 e4       	ldi	r19, 0x42	; 66
     838:	00 93 ba 11 	sts	0x11BA, r16
     83c:	10 93 bb 11 	sts	0x11BB, r17
     840:	20 93 bc 11 	sts	0x11BC, r18
     844:	30 93 bd 11 	sts	0x11BD, r19
     848:	00 e0       	ldi	r16, 0x00	; 0
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	20 ea       	ldi	r18, 0xA0	; 160
     84e:	3f e3       	ldi	r19, 0x3F	; 63
     850:	00 93 be 11 	sts	0x11BE, r16
     854:	10 93 bf 11 	sts	0x11BF, r17
     858:	20 93 c0 11 	sts	0x11C0, r18
     85c:	30 93 c1 11 	sts	0x11C1, r19
     860:	00 e0       	ldi	r16, 0x00	; 0
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	28 e4       	ldi	r18, 0x48	; 72
     866:	32 e4       	ldi	r19, 0x42	; 66
     868:	00 93 c2 11 	sts	0x11C2, r16
     86c:	10 93 c3 11 	sts	0x11C3, r17
     870:	20 93 c4 11 	sts	0x11C4, r18
     874:	30 93 c5 11 	sts	0x11C5, r19
     878:	03 ec       	ldi	r16, 0xC3	; 195
     87a:	15 ef       	ldi	r17, 0xF5	; 245
     87c:	28 e8       	ldi	r18, 0x88	; 136
     87e:	3f e3       	ldi	r19, 0x3F	; 63
     880:	00 93 c6 11 	sts	0x11C6, r16
     884:	10 93 c7 11 	sts	0x11C7, r17
     888:	20 93 c8 11 	sts	0x11C8, r18
     88c:	30 93 c9 11 	sts	0x11C9, r19
     890:	00 e0       	ldi	r16, 0x00	; 0
     892:	10 e0       	ldi	r17, 0x00	; 0
     894:	20 e7       	ldi	r18, 0x70	; 112
     896:	32 e4       	ldi	r19, 0x42	; 66
     898:	00 93 ca 11 	sts	0x11CA, r16
     89c:	10 93 cb 11 	sts	0x11CB, r17
     8a0:	20 93 cc 11 	sts	0x11CC, r18
     8a4:	30 93 cd 11 	sts	0x11CD, r19
     8a8:	0a e9       	ldi	r16, 0x9A	; 154
     8aa:	19 e9       	ldi	r17, 0x99	; 153
     8ac:	29 e5       	ldi	r18, 0x59	; 89
     8ae:	3f e3       	ldi	r19, 0x3F	; 63
     8b0:	00 93 ce 11 	sts	0x11CE, r16
     8b4:	10 93 cf 11 	sts	0x11CF, r17
     8b8:	20 93 d0 11 	sts	0x11D0, r18
     8bc:	30 93 d1 11 	sts	0x11D1, r19
     8c0:	40 93 d2 11 	sts	0x11D2, r20
     8c4:	50 93 d3 11 	sts	0x11D3, r21
     8c8:	60 93 d4 11 	sts	0x11D4, r22
     8cc:	70 93 d5 11 	sts	0x11D5, r23
     8d0:	4d ec       	ldi	r20, 0xCD	; 205
     8d2:	5c ec       	ldi	r21, 0xCC	; 204
     8d4:	6c e4       	ldi	r22, 0x4C	; 76
     8d6:	7f e3       	ldi	r23, 0x3F	; 63
     8d8:	40 93 d6 11 	sts	0x11D6, r20
     8dc:	50 93 d7 11 	sts	0x11D7, r21
     8e0:	60 93 d8 11 	sts	0x11D8, r22
     8e4:	70 93 d9 11 	sts	0x11D9, r23
     8e8:	80 93 da 11 	sts	0x11DA, r24
     8ec:	90 93 db 11 	sts	0x11DB, r25
     8f0:	a0 93 dc 11 	sts	0x11DC, r26
     8f4:	b0 93 dd 11 	sts	0x11DD, r27
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e4       	ldi	r26, 0x40	; 64
     8fe:	bf e3       	ldi	r27, 0x3F	; 63
     900:	80 93 de 11 	sts	0x11DE, r24
     904:	90 93 df 11 	sts	0x11DF, r25
     908:	a0 93 e0 11 	sts	0x11E0, r26
     90c:	b0 93 e1 11 	sts	0x11E1, r27
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a4 eb       	ldi	r26, 0xB4	; 180
     916:	b2 e4       	ldi	r27, 0x42	; 66
     918:	80 93 e2 11 	sts	0x11E2, r24
     91c:	90 93 e3 11 	sts	0x11E3, r25
     920:	a0 93 e4 11 	sts	0x11E4, r26
     924:	b0 93 e5 11 	sts	0x11E5, r27
     928:	86 e6       	ldi	r24, 0x66	; 102
     92a:	96 e6       	ldi	r25, 0x66	; 102
     92c:	a6 e2       	ldi	r26, 0x26	; 38
     92e:	bf e3       	ldi	r27, 0x3F	; 63
     930:	80 93 e6 11 	sts	0x11E6, r24
     934:	90 93 e7 11 	sts	0x11E7, r25
     938:	a0 93 e8 11 	sts	0x11E8, r26
     93c:	b0 93 e9 11 	sts	0x11E9, r27
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	a8 ec       	ldi	r26, 0xC8	; 200
     946:	b2 e4       	ldi	r27, 0x42	; 66
     948:	80 93 ea 11 	sts	0x11EA, r24
     94c:	90 93 eb 11 	sts	0x11EB, r25
     950:	a0 93 ec 11 	sts	0x11EC, r26
     954:	b0 93 ed 11 	sts	0x11ED, r27
     958:	8a e9       	ldi	r24, 0x9A	; 154
     95a:	99 e9       	ldi	r25, 0x99	; 153
     95c:	a9 e1       	ldi	r26, 0x19	; 25
     95e:	bf e3       	ldi	r27, 0x3F	; 63
     960:	80 93 ee 11 	sts	0x11EE, r24
     964:	90 93 ef 11 	sts	0x11EF, r25
     968:	a0 93 f0 11 	sts	0x11F0, r26
     96c:	b0 93 f1 11 	sts	0x11F1, r27
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	ac ed       	ldi	r26, 0xDC	; 220
     976:	b2 e4       	ldi	r27, 0x42	; 66
     978:	80 93 f2 11 	sts	0x11F2, r24
     97c:	90 93 f3 11 	sts	0x11F3, r25
     980:	a0 93 f4 11 	sts	0x11F4, r26
     984:	b0 93 f5 11 	sts	0x11F5, r27
     988:	8d ec       	ldi	r24, 0xCD	; 205
     98a:	9c ec       	ldi	r25, 0xCC	; 204
     98c:	ac e0       	ldi	r26, 0x0C	; 12
     98e:	bf e3       	ldi	r27, 0x3F	; 63
     990:	80 93 f6 11 	sts	0x11F6, r24
     994:	90 93 f7 11 	sts	0x11F7, r25
     998:	a0 93 f8 11 	sts	0x11F8, r26
     99c:	b0 93 f9 11 	sts	0x11F9, r27
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 ef       	ldi	r26, 0xF0	; 240
     9a6:	b2 e4       	ldi	r27, 0x42	; 66
     9a8:	80 93 fa 11 	sts	0x11FA, r24
     9ac:	90 93 fb 11 	sts	0x11FB, r25
     9b0:	a0 93 fc 11 	sts	0x11FC, r26
     9b4:	b0 93 fd 11 	sts	0x11FD, r27
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	bf e3       	ldi	r27, 0x3F	; 63
     9c0:	80 93 fe 11 	sts	0x11FE, r24
     9c4:	90 93 ff 11 	sts	0x11FF, r25
     9c8:	a0 93 00 12 	sts	0x1200, r26
     9cc:	b0 93 01 12 	sts	0x1201, r27
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a2 e0       	ldi	r26, 0x02	; 2
     9d6:	b3 e4       	ldi	r27, 0x43	; 67
     9d8:	80 93 02 12 	sts	0x1202, r24
     9dc:	90 93 03 12 	sts	0x1203, r25
     9e0:	a0 93 04 12 	sts	0x1204, r26
     9e4:	b0 93 05 12 	sts	0x1205, r27
     9e8:	86 e6       	ldi	r24, 0x66	; 102
     9ea:	96 e6       	ldi	r25, 0x66	; 102
     9ec:	a6 ee       	ldi	r26, 0xE6	; 230
     9ee:	be e3       	ldi	r27, 0x3E	; 62
     9f0:	80 93 06 12 	sts	0x1206, r24
     9f4:	90 93 07 12 	sts	0x1207, r25
     9f8:	a0 93 08 12 	sts	0x1208, r26
     9fc:	b0 93 09 12 	sts	0x1209, r27
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	ac e0       	ldi	r26, 0x0C	; 12
     a06:	b3 e4       	ldi	r27, 0x43	; 67
     a08:	80 93 0a 12 	sts	0x120A, r24
     a0c:	90 93 0b 12 	sts	0x120B, r25
     a10:	a0 93 0c 12 	sts	0x120C, r26
     a14:	b0 93 0d 12 	sts	0x120D, r27
     a18:	8d e3       	ldi	r24, 0x3D	; 61
     a1a:	9a e0       	ldi	r25, 0x0A	; 10
     a1c:	a7 ed       	ldi	r26, 0xD7	; 215
     a1e:	be e3       	ldi	r27, 0x3E	; 62
     a20:	80 93 0e 12 	sts	0x120E, r24
     a24:	90 93 0f 12 	sts	0x120F, r25
     a28:	a0 93 10 12 	sts	0x1210, r26
     a2c:	b0 93 11 12 	sts	0x1211, r27
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a6 e1       	ldi	r26, 0x16	; 22
     a36:	b3 e4       	ldi	r27, 0x43	; 67
     a38:	80 93 12 12 	sts	0x1212, r24
     a3c:	90 93 13 12 	sts	0x1213, r25
     a40:	a0 93 14 12 	sts	0x1214, r26
     a44:	b0 93 15 12 	sts	0x1215, r27
     a48:	81 b1       	in	r24, 0x01	; 1
     a4a:	8e 63       	ori	r24, 0x3E	; 62
     a4c:	81 b9       	out	0x01, r24	; 1
     a4e:	08 98       	cbi	0x01, 0	; 1
     a50:	15 98       	cbi	0x02, 5	; 2
     a52:	82 b1       	in	r24, 0x02	; 2
     a54:	81 7e       	andi	r24, 0xE1	; 225
     a56:	82 b9       	out	0x02, r24	; 2
     a58:	50 9a       	sbi	0x0a, 0	; 10
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 68 00 	sts	0x0068, r24
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	80 93 6b 00 	sts	0x006B, r24
     a66:	0f 9a       	sbi	0x01, 7	; 1
     a68:	0e 98       	cbi	0x01, 6	; 1
     a6a:	85 e0       	ldi	r24, 0x05	; 5
     a6c:	85 bd       	out	0x25, r24	; 37
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	7f 90       	pop	r7
     a84:	6f 90       	pop	r6
     a86:	5f 90       	pop	r5
     a88:	4f 90       	pop	r4
     a8a:	08 95       	ret

00000a8c <sensors_start_sample>:
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	f7 dc       	rcall	.-1554   	; 0x480 <select_sensor>
     a92:	f0 cc       	rjmp	.-1568   	; 0x474 <adc_start>

00000a94 <sensors_sampling_done>:
}

bool sensors_sampling_done()
{
	return sensorDataFlag;
}
     a94:	80 91 1f 12 	lds	r24, 0x121F
     a98:	08 95       	ret

00000a9a <sensors_reset_flag>:

void sensors_reset_flag()
{
	sensorDataFlag = false;
     a9a:	10 92 1f 12 	sts	0x121F, r1
     a9e:	08 95       	ret

00000aa0 <sensors_get_data>:
}

uint8_t* sensors_get_data()
{
	return gSensorBuffer;
}
     aa0:	87 e1       	ldi	r24, 0x17	; 23
     aa2:	92 e1       	ldi	r25, 0x12	; 18
     aa4:	08 95       	ret

00000aa6 <__vector_24>:

ISR(ADC_vect)
{
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	0b b6       	in	r0, 0x3b	; 59
     ab2:	0f 92       	push	r0
     ab4:	2f 92       	push	r2
     ab6:	3f 92       	push	r3
     ab8:	4f 92       	push	r4
     aba:	5f 92       	push	r5
     abc:	6f 92       	push	r6
     abe:	7f 92       	push	r7
     ac0:	8f 92       	push	r8
     ac2:	9f 92       	push	r9
     ac4:	af 92       	push	r10
     ac6:	bf 92       	push	r11
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	2d 97       	sbiw	r28, 0x0d	; 13
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	cd bf       	out	0x3d, r28	; 61
	cli();
     afa:	f8 94       	cli
	uint8_t adcValue = ADCH;
     afc:	60 91 79 00 	lds	r22, 0x0079
	float vin = adcValue * 5.0 / 256.0;
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	e6 d6       	rcall	.+3532   	; 0x18d4 <__floatsisf>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 ea       	ldi	r20, 0xA0	; 160
     b0e:	50 e4       	ldi	r21, 0x40	; 64
     b10:	95 d7       	rcall	.+3882   	; 0x1a3c <__mulsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e8       	ldi	r20, 0x80	; 128
     b18:	5b e3       	ldi	r21, 0x3B	; 59
     b1a:	90 d7       	rcall	.+3872   	; 0x1a3c <__mulsf3>
     b1c:	6d 83       	std	Y+5, r22	; 0x05
     b1e:	7e 83       	std	Y+6, r23	; 0x06
     b20:	8f 83       	std	Y+7, r24	; 0x07
     b22:	98 87       	std	Y+8, r25	; 0x08
     b24:	56 2e       	mov	r5, r22
     b26:	47 2e       	mov	r4, r23
     b28:	38 2e       	mov	r3, r24
     b2a:	29 2e       	mov	r2, r25
	if(gSelectedSensor == 4)
     b2c:	20 91 16 12 	lds	r18, 0x1216
     b30:	29 87       	std	Y+9, r18	; 0x09
     b32:	24 30       	cpi	r18, 0x04	; 4
     b34:	09 f0       	breq	.+2      	; 0xb38 <__vector_24+0x92>
     b36:	2d c1       	rjmp	.+602    	; 0xd92 <__vector_24+0x2ec>
	return 0;
}

int voltage_to_mm_long(float voltage)
{
	if(voltage >= IRLong[0][0])
     b38:	c0 90 9e 11 	lds	r12, 0x119E
     b3c:	d0 90 9f 11 	lds	r13, 0x119F
     b40:	e0 90 a0 11 	lds	r14, 0x11A0
     b44:	f0 90 a1 11 	lds	r15, 0x11A1
     b48:	a7 01       	movw	r20, r14
     b4a:	96 01       	movw	r18, r12
     b4c:	73 d7       	rcall	.+3814   	; 0x1a34 <__gesf2>
     b4e:	88 23       	and	r24, r24
     b50:	84 f0       	brlt	.+32     	; 0xb72 <__vector_24+0xcc>
	{
		return IRLong[0][1]*10;
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e2       	ldi	r20, 0x20	; 32
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	60 91 a2 11 	lds	r22, 0x11A2
     b5e:	70 91 a3 11 	lds	r23, 0x11A3
     b62:	80 91 a4 11 	lds	r24, 0x11A4
     b66:	90 91 a5 11 	lds	r25, 0x11A5
     b6a:	68 d7       	rcall	.+3792   	; 0x1a3c <__mulsf3>
     b6c:	80 d6       	rcall	.+3328   	; 0x186e <__fixsfsi>
     b6e:	cb 01       	movw	r24, r22
     b70:	0a c1       	rjmp	.+532    	; 0xd86 <__vector_24+0x2e0>
	} else if(voltage <= IRLong[14][0])
     b72:	20 91 0e 12 	lds	r18, 0x120E
     b76:	30 91 0f 12 	lds	r19, 0x120F
     b7a:	40 91 10 12 	lds	r20, 0x1210
     b7e:	50 91 11 12 	lds	r21, 0x1211
     b82:	bd 81       	ldd	r27, Y+5	; 0x05
     b84:	ae 81       	ldd	r26, Y+6	; 0x06
     b86:	1f 81       	ldd	r17, Y+7	; 0x07
     b88:	08 85       	ldd	r16, Y+8	; 0x08
     b8a:	6b 2f       	mov	r22, r27
     b8c:	7a 2f       	mov	r23, r26
     b8e:	81 2f       	mov	r24, r17
     b90:	90 2f       	mov	r25, r16
     b92:	01 d6       	rcall	.+3074   	; 0x1796 <__cmpsf2>
     b94:	18 16       	cp	r1, r24
     b96:	a4 f4       	brge	.+40     	; 0xbc0 <__vector_24+0x11a>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     b98:	80 90 a6 11 	lds	r8, 0x11A6
     b9c:	90 90 a7 11 	lds	r9, 0x11A7
     ba0:	a0 90 a8 11 	lds	r10, 0x11A8
     ba4:	b0 90 a9 11 	lds	r11, 0x11A9
		if(next == voltage)
     ba8:	a5 01       	movw	r20, r10
     baa:	94 01       	movw	r18, r8
     bac:	bd 81       	ldd	r27, Y+5	; 0x05
     bae:	ae 81       	ldd	r26, Y+6	; 0x06
     bb0:	6b 2f       	mov	r22, r27
     bb2:	7a 2f       	mov	r23, r26
     bb4:	81 2f       	mov	r24, r17
     bb6:	90 2f       	mov	r25, r16
     bb8:	ee d5       	rcall	.+3036   	; 0x1796 <__cmpsf2>
     bba:	81 11       	cpse	r24, r1
     bbc:	4c c0       	rjmp	.+152    	; 0xc56 <__vector_24+0x1b0>
     bbe:	32 c0       	rjmp	.+100    	; 0xc24 <__vector_24+0x17e>
	if(voltage >= IRLong[0][0])
	{
		return IRLong[0][1]*10;
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e2       	ldi	r20, 0x20	; 32
     bc6:	51 e4       	ldi	r21, 0x41	; 65
     bc8:	60 91 12 12 	lds	r22, 0x1212
     bcc:	70 91 13 12 	lds	r23, 0x1213
     bd0:	80 91 14 12 	lds	r24, 0x1214
     bd4:	90 91 15 12 	lds	r25, 0x1215
     bd8:	31 d7       	rcall	.+3682   	; 0x1a3c <__mulsf3>
     bda:	49 d6       	rcall	.+3218   	; 0x186e <__fixsfsi>
     bdc:	cb 01       	movw	r24, r22
     bde:	d3 c0       	rjmp	.+422    	; 0xd86 <__vector_24+0x2e0>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
     be0:	d3 01       	movw	r26, r6
     be2:	8d 91       	ld	r24, X+
     be4:	9d 91       	ld	r25, X+
     be6:	0d 90       	ld	r0, X+
     be8:	bc 91       	ld	r27, X
     bea:	a0 2d       	mov	r26, r0
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	9a 83       	std	Y+2, r25	; 0x02
     bf0:	ab 83       	std	Y+3, r26	; 0x03
     bf2:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRLong[i+1][0];
     bf4:	78 01       	movw	r14, r16
     bf6:	bf ef       	ldi	r27, 0xFF	; 255
     bf8:	eb 1a       	sub	r14, r27
     bfa:	fb 0a       	sbc	r15, r27
     bfc:	e8 e0       	ldi	r30, 0x08	; 8
     bfe:	6e 0e       	add	r6, r30
     c00:	71 1c       	adc	r7, r1
     c02:	d3 01       	movw	r26, r6
     c04:	8d 90       	ld	r8, X+
     c06:	9d 90       	ld	r9, X+
     c08:	ad 90       	ld	r10, X+
     c0a:	bc 90       	ld	r11, X
     c0c:	1b 87       	std	Y+11, r17	; 0x0b
     c0e:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     c10:	a5 01       	movw	r20, r10
     c12:	94 01       	movw	r18, r8
     c14:	6d 2d       	mov	r22, r13
     c16:	7c 2d       	mov	r23, r12
     c18:	83 2d       	mov	r24, r3
     c1a:	92 2d       	mov	r25, r2
     c1c:	bc d5       	rcall	.+2936   	; 0x1796 <__cmpsf2>
     c1e:	81 11       	cpse	r24, r1
     c20:	2b c0       	rjmp	.+86     	; 0xc78 <__vector_24+0x1d2>
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <__vector_24+0x184>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     c24:	ee 24       	eor	r14, r14
     c26:	e3 94       	inc	r14
     c28:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
     c2a:	c7 01       	movw	r24, r14
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	82 56       	subi	r24, 0x62	; 98
     c3a:	9e 4e       	sbci	r25, 0xEE	; 238
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e2       	ldi	r20, 0x20	; 32
     c42:	51 e4       	ldi	r21, 0x41	; 65
     c44:	fc 01       	movw	r30, r24
     c46:	64 81       	ldd	r22, Z+4	; 0x04
     c48:	75 81       	ldd	r23, Z+5	; 0x05
     c4a:	86 81       	ldd	r24, Z+6	; 0x06
     c4c:	97 81       	ldd	r25, Z+7	; 0x07
     c4e:	f6 d6       	rcall	.+3564   	; 0x1a3c <__mulsf3>
     c50:	0e d6       	rcall	.+3100   	; 0x186e <__fixsfsi>
     c52:	cb 01       	movw	r24, r22
     c54:	98 c0       	rjmp	.+304    	; 0xd86 <__vector_24+0x2e0>
     c56:	0f 2e       	mov	r0, r31
     c58:	f6 ea       	ldi	r31, 0xA6	; 166
     c5a:	6f 2e       	mov	r6, r31
     c5c:	f1 e1       	ldi	r31, 0x11	; 17
     c5e:	7f 2e       	mov	r7, r31
     c60:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     c62:	01 e0       	ldi	r16, 0x01	; 1
     c64:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     c66:	1b 86       	std	Y+11, r1	; 0x0b
     c68:	1a 86       	std	Y+10, r1	; 0x0a
     c6a:	c9 82       	std	Y+1, r12	; 0x01
     c6c:	da 82       	std	Y+2, r13	; 0x02
     c6e:	eb 82       	std	Y+3, r14	; 0x03
     c70:	fc 82       	std	Y+4, r15	; 0x04
     c72:	d5 2c       	mov	r13, r5
     c74:	c4 2c       	mov	r12, r4
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <__vector_24+0x1d4>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRLong[i][0];
		float next = IRLong[i+1][0];
     c78:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     c7a:	29 81       	ldd	r18, Y+1	; 0x01
     c7c:	3a 81       	ldd	r19, Y+2	; 0x02
     c7e:	4b 81       	ldd	r20, Y+3	; 0x03
     c80:	5c 81       	ldd	r21, Y+4	; 0x04
     c82:	6d 2d       	mov	r22, r13
     c84:	7c 2d       	mov	r23, r12
     c86:	83 2d       	mov	r24, r3
     c88:	92 2d       	mov	r25, r2
     c8a:	85 d5       	rcall	.+2826   	; 0x1796 <__cmpsf2>
     c8c:	88 23       	and	r24, r24
     c8e:	0c f0       	brlt	.+2      	; 0xc92 <__vector_24+0x1ec>
     c90:	74 c0       	rjmp	.+232    	; 0xd7a <__vector_24+0x2d4>
     c92:	a5 01       	movw	r20, r10
     c94:	94 01       	movw	r18, r8
     c96:	6d 2d       	mov	r22, r13
     c98:	7c 2d       	mov	r23, r12
     c9a:	83 2d       	mov	r24, r3
     c9c:	92 2d       	mov	r25, r2
     c9e:	ca d6       	rcall	.+3476   	; 0x1a34 <__gesf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	0c f0       	brlt	.+2      	; 0xca6 <__vector_24+0x200>
     ca4:	6a c0       	rjmp	.+212    	; 0xd7a <__vector_24+0x2d4>
     ca6:	c9 80       	ldd	r12, Y+1	; 0x01
     ca8:	da 80       	ldd	r13, Y+2	; 0x02
     caa:	eb 80       	ldd	r14, Y+3	; 0x03
     cac:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRLong[i][1]*10;
     cae:	ea 85       	ldd	r30, Y+10	; 0x0a
     cb0:	fb 85       	ldd	r31, Y+11	; 0x0b
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e2 56       	subi	r30, 0x62	; 98
     cc0:	fe 4e       	sbci	r31, 0xEE	; 238
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e2       	ldi	r20, 0x20	; 32
     cc8:	51 e4       	ldi	r21, 0x41	; 65
     cca:	64 81       	ldd	r22, Z+4	; 0x04
     ccc:	75 81       	ldd	r23, Z+5	; 0x05
     cce:	86 81       	ldd	r24, Z+6	; 0x06
     cd0:	97 81       	ldd	r25, Z+7	; 0x07
     cd2:	b4 d6       	rcall	.+3432   	; 0x1a3c <__mulsf3>
     cd4:	cc d5       	rcall	.+2968   	; 0x186e <__fixsfsi>
     cd6:	1b 01       	movw	r2, r22
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     cd8:	88 27       	eor	r24, r24
     cda:	77 fd       	sbrc	r23, 7
     cdc:	80 95       	com	r24
     cde:	98 2f       	mov	r25, r24
     ce0:	f9 d5       	rcall	.+3058   	; 0x18d4 <__floatsisf>
     ce2:	2b 01       	movw	r4, r22
     ce4:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     ce6:	7d 81       	ldd	r23, Y+5	; 0x05
     ce8:	6e 81       	ldd	r22, Y+6	; 0x06
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	88 85       	ldd	r24, Y+8	; 0x08
     cee:	27 2f       	mov	r18, r23
     cf0:	36 2f       	mov	r19, r22
     cf2:	49 2f       	mov	r20, r25
     cf4:	58 2f       	mov	r21, r24
     cf6:	c7 01       	movw	r24, r14
     cf8:	b6 01       	movw	r22, r12
     cfa:	e8 d4       	rcall	.+2512   	; 0x16cc <__subsf3>
     cfc:	69 83       	std	Y+1, r22	; 0x01
     cfe:	7a 83       	std	Y+2, r23	; 0x02
     d00:	8b 83       	std	Y+3, r24	; 0x03
     d02:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRLong[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
     d04:	f8 01       	movw	r30, r16
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	e2 56       	subi	r30, 0x62	; 98
     d14:	fe 4e       	sbci	r31, 0xEE	; 238
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	64 81       	ldd	r22, Z+4	; 0x04
     d20:	75 81       	ldd	r23, Z+5	; 0x05
     d22:	86 81       	ldd	r24, Z+6	; 0x06
     d24:	97 81       	ldd	r25, Z+7	; 0x07
     d26:	8a d6       	rcall	.+3348   	; 0x1a3c <__mulsf3>
     d28:	a2 d5       	rcall	.+2884   	; 0x186e <__fixsfsi>
			int diff = high - low;
     d2a:	91 01       	movw	r18, r2
     d2c:	26 1b       	sub	r18, r22
     d2e:	37 0b       	sbc	r19, r23
     d30:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     d32:	88 27       	eor	r24, r24
     d34:	77 fd       	sbrc	r23, 7
     d36:	80 95       	com	r24
     d38:	98 2f       	mov	r25, r24
     d3a:	cc d5       	rcall	.+2968   	; 0x18d4 <__floatsisf>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	69 81       	ldd	r22, Y+1	; 0x01
     d42:	7a 81       	ldd	r23, Y+2	; 0x02
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	79 d6       	rcall	.+3314   	; 0x1a3c <__mulsf3>
     d4a:	69 83       	std	Y+1, r22	; 0x01
     d4c:	7a 83       	std	Y+2, r23	; 0x02
     d4e:	8b 83       	std	Y+3, r24	; 0x03
     d50:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRLong[i][1]*10;
			int low = IRLong[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     d52:	a5 01       	movw	r20, r10
     d54:	94 01       	movw	r18, r8
     d56:	c7 01       	movw	r24, r14
     d58:	b6 01       	movw	r22, r12
     d5a:	b8 d4       	rcall	.+2416   	; 0x16cc <__subsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     d60:	69 81       	ldd	r22, Y+1	; 0x01
     d62:	7a 81       	ldd	r23, Y+2	; 0x02
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	1a d5       	rcall	.+2612   	; 0x179e <__divsf3>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
     d6e:	c3 01       	movw	r24, r6
     d70:	b2 01       	movw	r22, r4
     d72:	ac d4       	rcall	.+2392   	; 0x16cc <__subsf3>
     d74:	7c d5       	rcall	.+2808   	; 0x186e <__fixsfsi>
     d76:	cb 01       	movw	r24, r22
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <__vector_24+0x2e0>
	} else if(voltage <= IRLong[14][0])
	{
		return IRLong[14][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     d7a:	0d 30       	cpi	r16, 0x0D	; 13
     d7c:	11 05       	cpc	r17, r1
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_24+0x2dc>
     d80:	2f cf       	rjmp	.-418    	; 0xbe0 <__vector_24+0x13a>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return 0;
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
	cli();
	uint8_t adcValue = ADCH;
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
     d86:	6a e0       	ldi	r22, 0x0A	; 10
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	bb d6       	rcall	.+3446   	; 0x1b02 <__divmodhi4>
     d8c:	60 93 1b 12 	sts	0x121B, r22
     d90:	3f c1       	rjmp	.+638    	; 0x1010 <__vector_24+0x56a>
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     d92:	99 85       	ldd	r25, Y+9	; 0x09
     d94:	89 2f       	mov	r24, r25
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9d 87       	std	Y+13, r25	; 0x0d
     d9a:	8c 87       	std	Y+12, r24	; 0x0c
	IRLong[14][1] = 150;
}

int voltage_to_mm_short(float voltage)
{
	if(voltage >= IRShort[0][0])
     d9c:	c0 90 36 11 	lds	r12, 0x1136
     da0:	d0 90 37 11 	lds	r13, 0x1137
     da4:	e0 90 38 11 	lds	r14, 0x1138
     da8:	f0 90 39 11 	lds	r15, 0x1139
     dac:	a7 01       	movw	r20, r14
     dae:	96 01       	movw	r18, r12
     db0:	bd 81       	ldd	r27, Y+5	; 0x05
     db2:	ae 81       	ldd	r26, Y+6	; 0x06
     db4:	1f 81       	ldd	r17, Y+7	; 0x07
     db6:	08 85       	ldd	r16, Y+8	; 0x08
     db8:	6b 2f       	mov	r22, r27
     dba:	7a 2f       	mov	r23, r26
     dbc:	81 2f       	mov	r24, r17
     dbe:	90 2f       	mov	r25, r16
     dc0:	39 d6       	rcall	.+3186   	; 0x1a34 <__gesf2>
     dc2:	88 23       	and	r24, r24
     dc4:	84 f0       	brlt	.+32     	; 0xde6 <__vector_24+0x340>
	{
		return IRShort[0][1]*10;
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	60 91 3a 11 	lds	r22, 0x113A
     dd2:	70 91 3b 11 	lds	r23, 0x113B
     dd6:	80 91 3c 11 	lds	r24, 0x113C
     dda:	90 91 3d 11 	lds	r25, 0x113D
     dde:	2e d6       	rcall	.+3164   	; 0x1a3c <__mulsf3>
     de0:	46 d5       	rcall	.+2700   	; 0x186e <__fixsfsi>
     de2:	cb 01       	movw	r24, r22
     de4:	0a c1       	rjmp	.+532    	; 0xffa <__vector_24+0x554>
	} else if(voltage <= IRShort[12][0])
     de6:	20 91 96 11 	lds	r18, 0x1196
     dea:	30 91 97 11 	lds	r19, 0x1197
     dee:	40 91 98 11 	lds	r20, 0x1198
     df2:	50 91 99 11 	lds	r21, 0x1199
     df6:	bd 81       	ldd	r27, Y+5	; 0x05
     df8:	ae 81       	ldd	r26, Y+6	; 0x06
     dfa:	1f 81       	ldd	r17, Y+7	; 0x07
     dfc:	08 85       	ldd	r16, Y+8	; 0x08
     dfe:	6b 2f       	mov	r22, r27
     e00:	7a 2f       	mov	r23, r26
     e02:	81 2f       	mov	r24, r17
     e04:	90 2f       	mov	r25, r16
     e06:	c7 d4       	rcall	.+2446   	; 0x1796 <__cmpsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	a4 f4       	brge	.+40     	; 0xe34 <__vector_24+0x38e>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     e0c:	80 90 3e 11 	lds	r8, 0x113E
     e10:	90 90 3f 11 	lds	r9, 0x113F
     e14:	a0 90 40 11 	lds	r10, 0x1140
     e18:	b0 90 41 11 	lds	r11, 0x1141
		if(next == voltage)
     e1c:	a5 01       	movw	r20, r10
     e1e:	94 01       	movw	r18, r8
     e20:	bd 81       	ldd	r27, Y+5	; 0x05
     e22:	ae 81       	ldd	r26, Y+6	; 0x06
     e24:	6b 2f       	mov	r22, r27
     e26:	7a 2f       	mov	r23, r26
     e28:	81 2f       	mov	r24, r17
     e2a:	90 2f       	mov	r25, r16
     e2c:	b4 d4       	rcall	.+2408   	; 0x1796 <__cmpsf2>
     e2e:	81 11       	cpse	r24, r1
     e30:	4c c0       	rjmp	.+152    	; 0xeca <__vector_24+0x424>
     e32:	32 c0       	rjmp	.+100    	; 0xe98 <__vector_24+0x3f2>
	if(voltage >= IRShort[0][0])
	{
		return IRShort[0][1]*10;
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	60 91 9a 11 	lds	r22, 0x119A
     e40:	70 91 9b 11 	lds	r23, 0x119B
     e44:	80 91 9c 11 	lds	r24, 0x119C
     e48:	90 91 9d 11 	lds	r25, 0x119D
     e4c:	f7 d5       	rcall	.+3054   	; 0x1a3c <__mulsf3>
     e4e:	0f d5       	rcall	.+2590   	; 0x186e <__fixsfsi>
     e50:	cb 01       	movw	r24, r22
     e52:	d3 c0       	rjmp	.+422    	; 0xffa <__vector_24+0x554>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
     e54:	d3 01       	movw	r26, r6
     e56:	8d 91       	ld	r24, X+
     e58:	9d 91       	ld	r25, X+
     e5a:	0d 90       	ld	r0, X+
     e5c:	bc 91       	ld	r27, X
     e5e:	a0 2d       	mov	r26, r0
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	ab 83       	std	Y+3, r26	; 0x03
     e66:	bc 83       	std	Y+4, r27	; 0x04
		float next = IRShort[i+1][0];
     e68:	78 01       	movw	r14, r16
     e6a:	bf ef       	ldi	r27, 0xFF	; 255
     e6c:	eb 1a       	sub	r14, r27
     e6e:	fb 0a       	sbc	r15, r27
     e70:	e8 e0       	ldi	r30, 0x08	; 8
     e72:	6e 0e       	add	r6, r30
     e74:	71 1c       	adc	r7, r1
     e76:	d3 01       	movw	r26, r6
     e78:	8d 90       	ld	r8, X+
     e7a:	9d 90       	ld	r9, X+
     e7c:	ad 90       	ld	r10, X+
     e7e:	bc 90       	ld	r11, X
     e80:	1b 87       	std	Y+11, r17	; 0x0b
     e82:	0a 87       	std	Y+10, r16	; 0x0a
		if(next == voltage)
     e84:	a5 01       	movw	r20, r10
     e86:	94 01       	movw	r18, r8
     e88:	6d 2d       	mov	r22, r13
     e8a:	7c 2d       	mov	r23, r12
     e8c:	83 2d       	mov	r24, r3
     e8e:	92 2d       	mov	r25, r2
     e90:	82 d4       	rcall	.+2308   	; 0x1796 <__cmpsf2>
     e92:	81 11       	cpse	r24, r1
     e94:	2b c0       	rjmp	.+86     	; 0xeec <__vector_24+0x446>
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <__vector_24+0x3f8>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     e98:	ee 24       	eor	r14, r14
     e9a:	e3 94       	inc	r14
     e9c:	f1 2c       	mov	r15, r1
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
     e9e:	c7 01       	movw	r24, r14
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	8a 5c       	subi	r24, 0xCA	; 202
     eae:	9e 4e       	sbci	r25, 0xEE	; 238
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	fc 01       	movw	r30, r24
     eba:	64 81       	ldd	r22, Z+4	; 0x04
     ebc:	75 81       	ldd	r23, Z+5	; 0x05
     ebe:	86 81       	ldd	r24, Z+6	; 0x06
     ec0:	97 81       	ldd	r25, Z+7	; 0x07
     ec2:	bc d5       	rcall	.+2936   	; 0x1a3c <__mulsf3>
     ec4:	d4 d4       	rcall	.+2472   	; 0x186e <__fixsfsi>
     ec6:	cb 01       	movw	r24, r22
     ec8:	98 c0       	rjmp	.+304    	; 0xffa <__vector_24+0x554>
     eca:	0f 2e       	mov	r0, r31
     ecc:	fe e3       	ldi	r31, 0x3E	; 62
     ece:	6f 2e       	mov	r6, r31
     ed0:	f1 e1       	ldi	r31, 0x11	; 17
     ed2:	7f 2e       	mov	r7, r31
     ed4:	f0 2d       	mov	r31, r0
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     ed6:	01 e0       	ldi	r16, 0x01	; 1
     ed8:	10 e0       	ldi	r17, 0x00	; 0
		if(next == voltage)
     eda:	1b 86       	std	Y+11, r1	; 0x0b
     edc:	1a 86       	std	Y+10, r1	; 0x0a
     ede:	c9 82       	std	Y+1, r12	; 0x01
     ee0:	da 82       	std	Y+2, r13	; 0x02
     ee2:	eb 82       	std	Y+3, r14	; 0x03
     ee4:	fc 82       	std	Y+4, r15	; 0x04
     ee6:	d5 2c       	mov	r13, r5
     ee8:	c4 2c       	mov	r12, r4
     eea:	01 c0       	rjmp	.+2      	; 0xeee <__vector_24+0x448>
	}
	
	for(int i = 0; i < 13; ++i)
	{
		float prev = IRShort[i][0];
		float next = IRShort[i+1][0];
     eec:	87 01       	movw	r16, r14
		if(next == voltage)
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	3a 81       	ldd	r19, Y+2	; 0x02
     ef2:	4b 81       	ldd	r20, Y+3	; 0x03
     ef4:	5c 81       	ldd	r21, Y+4	; 0x04
     ef6:	6d 2d       	mov	r22, r13
     ef8:	7c 2d       	mov	r23, r12
     efa:	83 2d       	mov	r24, r3
     efc:	92 2d       	mov	r25, r2
     efe:	4b d4       	rcall	.+2198   	; 0x1796 <__cmpsf2>
     f00:	88 23       	and	r24, r24
     f02:	0c f0       	brlt	.+2      	; 0xf06 <__vector_24+0x460>
     f04:	74 c0       	rjmp	.+232    	; 0xfee <__vector_24+0x548>
     f06:	a5 01       	movw	r20, r10
     f08:	94 01       	movw	r18, r8
     f0a:	6d 2d       	mov	r22, r13
     f0c:	7c 2d       	mov	r23, r12
     f0e:	83 2d       	mov	r24, r3
     f10:	92 2d       	mov	r25, r2
     f12:	90 d5       	rcall	.+2848   	; 0x1a34 <__gesf2>
     f14:	18 16       	cp	r1, r24
     f16:	0c f0       	brlt	.+2      	; 0xf1a <__vector_24+0x474>
     f18:	6a c0       	rjmp	.+212    	; 0xfee <__vector_24+0x548>
     f1a:	c9 80       	ldd	r12, Y+1	; 0x01
     f1c:	da 80       	ldd	r13, Y+2	; 0x02
     f1e:	eb 80       	ldd	r14, Y+3	; 0x03
     f20:	fc 80       	ldd	r15, Y+4	; 0x04
		{
			int high = IRShort[i][1]*10;
     f22:	ea 85       	ldd	r30, Y+10	; 0x0a
     f24:	fb 85       	ldd	r31, Y+11	; 0x0b
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ea 5c       	subi	r30, 0xCA	; 202
     f34:	fe 4e       	sbci	r31, 0xEE	; 238
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e2       	ldi	r20, 0x20	; 32
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	64 81       	ldd	r22, Z+4	; 0x04
     f40:	75 81       	ldd	r23, Z+5	; 0x05
     f42:	86 81       	ldd	r24, Z+6	; 0x06
     f44:	97 81       	ldd	r25, Z+7	; 0x07
     f46:	7a d5       	rcall	.+2804   	; 0x1a3c <__mulsf3>
     f48:	92 d4       	rcall	.+2340   	; 0x186e <__fixsfsi>
     f4a:	1b 01       	movw	r2, r22
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     f4c:	88 27       	eor	r24, r24
     f4e:	77 fd       	sbrc	r23, 7
     f50:	80 95       	com	r24
     f52:	98 2f       	mov	r25, r24
     f54:	bf d4       	rcall	.+2430   	; 0x18d4 <__floatsisf>
     f56:	2b 01       	movw	r4, r22
     f58:	3c 01       	movw	r6, r24
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
     f5a:	7d 81       	ldd	r23, Y+5	; 0x05
     f5c:	6e 81       	ldd	r22, Y+6	; 0x06
     f5e:	9f 81       	ldd	r25, Y+7	; 0x07
     f60:	88 85       	ldd	r24, Y+8	; 0x08
     f62:	27 2f       	mov	r18, r23
     f64:	36 2f       	mov	r19, r22
     f66:	49 2f       	mov	r20, r25
     f68:	58 2f       	mov	r21, r24
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	ae d3       	rcall	.+1884   	; 0x16cc <__subsf3>
     f70:	69 83       	std	Y+1, r22	; 0x01
     f72:	7a 83       	std	Y+2, r23	; 0x02
     f74:	8b 83       	std	Y+3, r24	; 0x03
     f76:	9c 83       	std	Y+4, r25	; 0x04
		{
			return IRShort[i+1][1]*10;
		} else if(prev > voltage && next < voltage)
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
     f78:	f8 01       	movw	r30, r16
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ea 5c       	subi	r30, 0xCA	; 202
     f88:	fe 4e       	sbci	r31, 0xEE	; 238
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	64 81       	ldd	r22, Z+4	; 0x04
     f94:	75 81       	ldd	r23, Z+5	; 0x05
     f96:	86 81       	ldd	r24, Z+6	; 0x06
     f98:	97 81       	ldd	r25, Z+7	; 0x07
     f9a:	50 d5       	rcall	.+2720   	; 0x1a3c <__mulsf3>
     f9c:	68 d4       	rcall	.+2256   	; 0x186e <__fixsfsi>
			int diff = high - low;
     f9e:	91 01       	movw	r18, r2
     fa0:	26 1b       	sub	r18, r22
     fa2:	37 0b       	sbc	r19, r23
     fa4:	b9 01       	movw	r22, r18
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
     fa6:	88 27       	eor	r24, r24
     fa8:	77 fd       	sbrc	r23, 7
     faa:	80 95       	com	r24
     fac:	98 2f       	mov	r25, r24
     fae:	92 d4       	rcall	.+2340   	; 0x18d4 <__floatsisf>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	69 81       	ldd	r22, Y+1	; 0x01
     fb6:	7a 81       	ldd	r23, Y+2	; 0x02
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	3f d5       	rcall	.+2686   	; 0x1a3c <__mulsf3>
     fbe:	69 83       	std	Y+1, r22	; 0x01
     fc0:	7a 83       	std	Y+2, r23	; 0x02
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	9c 83       	std	Y+4, r25	; 0x04
		{
			int high = IRShort[i][1]*10;
			int low = IRShort[i+1][1]*10;
			int diff = high - low;
			float diff_to_prev = prev - voltage;
			float volt_diff = prev - next;
     fc6:	a5 01       	movw	r20, r10
     fc8:	94 01       	movw	r18, r8
     fca:	c7 01       	movw	r24, r14
     fcc:	b6 01       	movw	r22, r12
     fce:	7e d3       	rcall	.+1788   	; 0x16cc <__subsf3>
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
			return (int) (high - diff * diff_to_prev / volt_diff);
     fd4:	69 81       	ldd	r22, Y+1	; 0x01
     fd6:	7a 81       	ldd	r23, Y+2	; 0x02
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	e0 d3       	rcall	.+1984   	; 0x179e <__divsf3>
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	c3 01       	movw	r24, r6
     fe4:	b2 01       	movw	r22, r4
     fe6:	72 d3       	rcall	.+1764   	; 0x16cc <__subsf3>
     fe8:	42 d4       	rcall	.+2180   	; 0x186e <__fixsfsi>
     fea:	cb 01       	movw	r24, r22
     fec:	06 c0       	rjmp	.+12     	; 0xffa <__vector_24+0x554>
	} else if(voltage <= IRShort[12][0])
	{
		return IRShort[12][1]*10;
	}
	
	for(int i = 0; i < 13; ++i)
     fee:	0d 30       	cpi	r16, 0x0D	; 13
     ff0:	11 05       	cpc	r17, r1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <__vector_24+0x550>
     ff4:	2f cf       	rjmp	.-418    	; 0xe54 <__vector_24+0x3ae>
			float volt_diff = prev - next;
			return (int) (high - diff * diff_to_prev / volt_diff);
		}
	}
	
	return 0;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
	float vin = adcValue * 5.0 / 256.0;
	if(gSelectedSensor == 4)
	{
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_long(vin)/10;
		} else {
		gSensorBuffer[gSelectedSensor] = voltage_to_mm_short(vin)/10;
     ffa:	ec 85       	ldd	r30, Y+12	; 0x0c
     ffc:	fd 85       	ldd	r31, Y+13	; 0x0d
     ffe:	e9 5e       	subi	r30, 0xE9	; 233
    1000:	fd 4e       	sbci	r31, 0xED	; 237
    1002:	6a e0       	ldi	r22, 0x0A	; 10
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	7d d5       	rcall	.+2810   	; 0x1b02 <__divmodhi4>
    1008:	60 83       	st	Z, r22
	}
	
	if(gSelectedSensor < 6)
    100a:	39 85       	ldd	r19, Y+9	; 0x09
    100c:	36 30       	cpi	r19, 0x06	; 6
    100e:	38 f4       	brcc	.+14     	; 0x101e <__vector_24+0x578>
	{
		// Not last sensor
		select_sensor(gSelectedSensor + 1);
    1010:	a9 85       	ldd	r26, Y+9	; 0x09
    1012:	8a 2f       	mov	r24, r26
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	33 da       	rcall	.-2970   	; 0x480 <select_sensor>
		adc_start();
    101a:	2c da       	rcall	.-2984   	; 0x474 <adc_start>
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <__vector_24+0x58a>
		} else {
		select_sensor(0);
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	2e da       	rcall	.-2980   	; 0x480 <select_sensor>
	}
}

void start_ul_sensor()
{
	TCNT0 = 0;
    1024:	16 bc       	out	0x26, r1	; 38
	PORTA |= (1<<PORTA7);
    1026:	17 9a       	sbi	0x02, 7	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1028:	b0 e5       	ldi	r27, 0x50	; 80
    102a:	ba 95       	dec	r27
    102c:	f1 f7       	brne	.-4      	; 0x102a <__vector_24+0x584>
	_delay_us(15);
	PORTA &= ~(1<<PORTA7);
    102e:	17 98       	cbi	0x02, 7	; 2
		adc_start();
		} else {
		select_sensor(0);
		start_ul_sensor();
	}
	sei();
    1030:	78 94       	sei
}
    1032:	2d 96       	adiw	r28, 0x0d	; 13
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	7f 91       	pop	r23
    1050:	6f 91       	pop	r22
    1052:	5f 91       	pop	r21
    1054:	4f 91       	pop	r20
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	7f 90       	pop	r7
    1070:	6f 90       	pop	r6
    1072:	5f 90       	pop	r5
    1074:	4f 90       	pop	r4
    1076:	3f 90       	pop	r3
    1078:	2f 90       	pop	r2
    107a:	0f 90       	pop	r0
    107c:	0b be       	out	0x3b, r0	; 59
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__vector_4>:

ISR(PCINT0_vect)
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	8f 93       	push	r24
	cli();
    1094:	f8 94       	cli
	if(PINA & (1<<PINA6))
    1096:	06 9b       	sbis	0x00, 6	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <__vector_4+0x16>
	{
		TCNT0 = 0;
    109a:	16 bc       	out	0x26, r1	; 38
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <__vector_4+0x22>
	}
	else
	{
		uint8_t UL = TCNT0;
    109e:	86 b5       	in	r24, 0x26	; 38
		gSensorBuffer[7] = UL;
    10a0:	80 93 1e 12 	sts	0x121E, r24
		sensorDataFlag = true;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 1f 12 	sts	0x121F, r24
	}
	sei();
    10aa:	78 94       	sei
}
    10ac:	8f 91       	pop	r24
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <set_twi_reciever_enable>:
	{
		sweep_flag_ = false;
		return true;
	}
	return false;
}
    10b8:	85 e4       	ldi	r24, 0x45	; 69
    10ba:	80 93 bc 00 	sts	0x00BC, r24
    10be:	08 95       	ret

000010c0 <clear_int>:
    10c0:	81 ec       	ldi	r24, 0xC1	; 193
    10c2:	80 93 bc 00 	sts	0x00BC, r24
    10c6:	08 95       	ret

000010c8 <start_bus>:
    10c8:	84 ea       	ldi	r24, 0xA4	; 164
    10ca:	80 93 bc 00 	sts	0x00BC, r24
    10ce:	08 95       	ret

000010d0 <stop_bus>:
    10d0:	85 ed       	ldi	r24, 0xD5	; 213
    10d2:	80 93 bc 00 	sts	0x00BC, r24
    10d6:	08 95       	ret

000010d8 <Error>:
    10d8:	80 91 b9 00 	lds	r24, 0x00B9
    10dc:	88 7f       	andi	r24, 0xF8	; 248
    10de:	88 33       	cpi	r24, 0x38	; 56
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <Error+0xc>
    10e2:	f6 cf       	rjmp	.-20     	; 0x10d0 <stop_bus>
    10e4:	ed cf       	rjmp	.-38     	; 0x10c0 <clear_int>

000010e6 <get_data>:
    10e6:	80 91 bb 00 	lds	r24, 0x00BB
    10ea:	08 95       	ret

000010ec <wait_for_bus>:
    10ec:	ec eb       	ldi	r30, 0xBC	; 188
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	88 23       	and	r24, r24
    10f4:	ec f7       	brge	.-6      	; 0x10f0 <wait_for_bus+0x4>
    10f6:	08 95       	ret

000010f8 <send_data_and_wait>:
    10f8:	80 93 bb 00 	sts	0x00BB, r24
    10fc:	84 e8       	ldi	r24, 0x84	; 132
    10fe:	80 93 bc 00 	sts	0x00BC, r24
    1102:	f4 cf       	rjmp	.-24     	; 0x10ec <wait_for_bus>

00001104 <stop_twi>:
    1104:	10 92 39 13 	sts	0x1339, r1
    1108:	10 92 38 13 	sts	0x1338, r1
    110c:	10 92 44 13 	sts	0x1344, r1
    1110:	10 92 43 13 	sts	0x1343, r1
    1114:	10 92 3d 13 	sts	0x133D, r1
    1118:	10 92 3c 13 	sts	0x133C, r1
    111c:	10 92 40 13 	sts	0x1340, r1
    1120:	10 92 3f 13 	sts	0x133F, r1
    1124:	08 95       	ret

00001126 <reset_TWI>:
    1126:	ec eb       	ldi	r30, 0xBC	; 188
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 6c       	ori	r24, 0xC0	; 192
    112e:	80 83       	st	Z, r24
    1130:	08 95       	ret

00001132 <get_sensor_from_bus>:
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	c0 91 43 13 	lds	r28, 0x1343
    113a:	d0 91 44 13 	lds	r29, 0x1344
    113e:	c7 30       	cpi	r28, 0x07	; 7
    1140:	d1 05       	cpc	r29, r1
    1142:	91 f4       	brne	.+36     	; 0x1168 <get_sensor_from_bus+0x36>
    1144:	ea e2       	ldi	r30, 0x2A	; 42
    1146:	f2 e1       	ldi	r31, 0x12	; 18
    1148:	a5 e4       	ldi	r26, 0x45	; 69
    114a:	b3 e1       	ldi	r27, 0x13	; 19
    114c:	81 e3       	ldi	r24, 0x31	; 49
    114e:	92 e1       	ldi	r25, 0x12	; 18
    1150:	21 91       	ld	r18, Z+
    1152:	2d 93       	st	X+, r18
    1154:	e8 17       	cp	r30, r24
    1156:	f9 07       	cpc	r31, r25
    1158:	d9 f7       	brne	.-10     	; 0x1150 <get_sensor_from_bus+0x1e>
    115a:	c5 df       	rcall	.-118    	; 0x10e6 <get_data>
    115c:	80 93 3e 13 	sts	0x133E, r24
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 25 12 	sts	0x1225, r24
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <get_sensor_from_bus+0x50>
    1168:	be df       	rcall	.-132    	; 0x10e6 <get_data>
    116a:	c6 5d       	subi	r28, 0xD6	; 214
    116c:	dd 4e       	sbci	r29, 0xED	; 237
    116e:	88 83       	st	Y, r24
    1170:	80 91 43 13 	lds	r24, 0x1343
    1174:	90 91 44 13 	lds	r25, 0x1344
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	90 93 44 13 	sts	0x1344, r25
    117e:	80 93 43 13 	sts	0x1343, r24
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <get_control_settings_from_bus>:
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	c0 91 3f 13 	lds	r28, 0x133F
    1190:	d0 91 40 13 	lds	r29, 0x1340
    1194:	a8 df       	rcall	.-176    	; 0x10e6 <get_data>
    1196:	cb 5c       	subi	r28, 0xCB	; 203
    1198:	dc 4e       	sbci	r29, 0xEC	; 236
    119a:	88 83       	st	Y, r24
    119c:	10 92 40 13 	sts	0x1340, r1
    11a0:	10 92 3f 13 	sts	0x133F, r1
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <get_autonom_settings_from_bus>:
    11aa:	9d df       	rcall	.-198    	; 0x10e6 <get_data>
    11ac:	80 93 33 13 	sts	0x1333, r24
    11b0:	08 95       	ret

000011b2 <get_char_from_bus>:
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	c0 91 3c 13 	lds	r28, 0x133C
    11ba:	d0 91 3d 13 	lds	r29, 0x133D
    11be:	93 df       	rcall	.-218    	; 0x10e6 <get_data>
    11c0:	cc 5c       	subi	r28, 0xCC	; 204
    11c2:	dd 4e       	sbci	r29, 0xED	; 237
    11c4:	88 83       	st	Y, r24
    11c6:	80 91 3c 13 	lds	r24, 0x133C
    11ca:	90 91 3d 13 	lds	r25, 0x133D
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	90 93 3d 13 	sts	0x133D, r25
    11d4:	80 93 3c 13 	sts	0x133C, r24
    11d8:	90 93 27 12 	sts	0x1227, r25
    11dc:	80 93 26 12 	sts	0x1226, r24
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <TWI_init>:
    11e6:	80 93 41 13 	sts	0x1341, r24
    11ea:	80 34       	cpi	r24, 0x40	; 64
    11ec:	79 f0       	breq	.+30     	; 0x120c <TWI_init+0x26>
    11ee:	80 38       	cpi	r24, 0x80	; 128
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <TWI_init+0x12>
    11f2:	80 32       	cpi	r24, 0x20	; 32
    11f4:	d1 f4       	brne	.+52     	; 0x122a <TWI_init+0x44>
    11f6:	12 c0       	rjmp	.+36     	; 0x121c <TWI_init+0x36>
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	88 b9       	out	0x08, r24	; 8
    11fc:	5d df       	rcall	.-326    	; 0x10b8 <set_twi_reciever_enable>
    11fe:	8f e3       	ldi	r24, 0x3F	; 63
    1200:	80 93 b8 00 	sts	0x00B8, r24
    1204:	81 e8       	ldi	r24, 0x81	; 129
    1206:	80 93 ba 00 	sts	0x00BA, r24
    120a:	08 95       	ret
    120c:	8f e3       	ldi	r24, 0x3F	; 63
    120e:	80 93 b8 00 	sts	0x00B8, r24
    1212:	52 df       	rcall	.-348    	; 0x10b8 <set_twi_reciever_enable>
    1214:	80 e4       	ldi	r24, 0x40	; 64
    1216:	80 93 ba 00 	sts	0x00BA, r24
    121a:	08 95       	ret
    121c:	8f e3       	ldi	r24, 0x3F	; 63
    121e:	80 93 b8 00 	sts	0x00B8, r24
    1222:	4a df       	rcall	.-364    	; 0x10b8 <set_twi_reciever_enable>
    1224:	81 e2       	ldi	r24, 0x21	; 33
    1226:	80 93 ba 00 	sts	0x00BA, r24
    122a:	08 95       	ret

0000122c <TWI_send_sensors>:
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	d8 2f       	mov	r29, r24
    1238:	c9 2f       	mov	r28, r25
    123a:	f6 2e       	mov	r15, r22
    123c:	45 df       	rcall	.-374    	; 0x10c8 <start_bus>
    123e:	56 df       	rcall	.-340    	; 0x10ec <wait_for_bus>
    1240:	20 91 b9 00 	lds	r18, 0x00B9
    1244:	28 7f       	andi	r18, 0xF8	; 248
    1246:	28 30       	cpi	r18, 0x08	; 8
    1248:	19 f0       	breq	.+6      	; 0x1250 <TWI_send_sensors+0x24>
    124a:	46 df       	rcall	.-372    	; 0x10d8 <Error>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	1a c0       	rjmp	.+52     	; 0x1284 <TWI_send_sensors+0x58>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	52 df       	rcall	.-348    	; 0x10f8 <send_data_and_wait>
    1254:	80 91 b9 00 	lds	r24, 0x00B9
    1258:	88 7f       	andi	r24, 0xF8	; 248
    125a:	88 31       	cpi	r24, 0x18	; 24
    125c:	19 f0       	breq	.+6      	; 0x1264 <TWI_send_sensors+0x38>
    125e:	3c df       	rcall	.-392    	; 0x10d8 <Error>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	10 c0       	rjmp	.+32     	; 0x1284 <TWI_send_sensors+0x58>
    1264:	0d 2f       	mov	r16, r29
    1266:	1c 2f       	mov	r17, r28
    1268:	c0 e0       	ldi	r28, 0x00	; 0
    126a:	d0 e0       	ldi	r29, 0x00	; 0
    126c:	f8 01       	movw	r30, r16
    126e:	81 91       	ld	r24, Z+
    1270:	8f 01       	movw	r16, r30
    1272:	42 df       	rcall	.-380    	; 0x10f8 <send_data_and_wait>
    1274:	21 96       	adiw	r28, 0x01	; 1
    1276:	c7 30       	cpi	r28, 0x07	; 7
    1278:	d1 05       	cpc	r29, r1
    127a:	c1 f7       	brne	.-16     	; 0x126c <TWI_send_sensors+0x40>
    127c:	8f 2d       	mov	r24, r15
    127e:	3c df       	rcall	.-392    	; 0x10f8 <send_data_and_wait>
    1280:	27 df       	rcall	.-434    	; 0x10d0 <stop_bus>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	08 95       	ret

00001290 <decode_message_TwiFIFO>:

//------------------------------------------------------------------------------FIFO

uint8_t decode_message_TwiFIFO()
{
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	// TODO: send to relevant party... the display for now
	
	display_text_fixed_length(msg, length);
	
	return 0;
}
    12ac:	ad b6       	in	r10, 0x3d	; 61
    12ae:	be b6       	in	r11, 0x3e	; 62
{
	
	uint8_t *len = 0;
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 91 00 01 	lds	r24, 0x0100
    12b8:	90 91 01 01 	lds	r25, 0x0101
    12bc:	44 d8       	rcall	.-3960   	; 0x346 <FifoRead>
    12be:	81 11       	cpse	r24, r1
    12c0:	43 c0       	rjmp	.+134    	; 0x1348 <decode_message_TwiFIFO+0xb8>
	{
		//No new messages
		return 1; // error
	}
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
    12c2:	c0 90 00 00 	lds	r12, 0x0000
    12c6:	d1 2c       	mov	r13, r1
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];
    12c8:	96 01       	movw	r18, r12
    12ca:	21 50       	subi	r18, 0x01	; 1
    12cc:	31 09       	sbc	r19, r1
	
	int length = *len; // I don't know why I can't use *len directly... but it took me 4h to figure out that you can't do it....
	
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	c1 14       	cp	r12, r1
    12d4:	d1 04       	cpc	r13, r1
    12d6:	11 f0       	breq	.+4      	; 0x12dc <decode_message_TwiFIFO+0x4c>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
	char msg[length-1+ifzero];
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	2d b7       	in	r18, 0x3d	; 61
    12e2:	3e b7       	in	r19, 0x3e	; 62
    12e4:	28 1b       	sub	r18, r24
    12e6:	39 0b       	sbc	r19, r25
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	3e bf       	out	0x3e, r19	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	2d bf       	out	0x3d, r18	; 61
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	82 2e       	mov	r8, r18
    12f8:	93 2e       	mov	r9, r19

	for(int i = 0; i < length; ++i)
    12fa:	1c 14       	cp	r1, r12
    12fc:	1d 04       	cpc	r1, r13
    12fe:	ec f4       	brge	.+58     	; 0x133a <decode_message_TwiFIFO+0xaa>
    1300:	e2 2e       	mov	r14, r18
    1302:	f3 2e       	mov	r15, r19
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(FifoRead(gTwiFIFO, character))
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	80 91 00 01 	lds	r24, 0x0100
    1310:	90 91 01 01 	lds	r25, 0x0101
    1314:	18 d8       	rcall	.-4048   	; 0x346 <FifoRead>
    1316:	88 23       	and	r24, r24
    1318:	31 f0       	breq	.+12     	; 0x1326 <decode_message_TwiFIFO+0x96>
		{
			display_text("FIFO ERROR 2!");
    131a:	8e e0       	ldi	r24, 0x0E	; 14
    131c:	91 e1       	ldi	r25, 0x11	; 17
    131e:	0e 94 56 01 	call	0x2ac	; 0x2ac <display_text>
			return 1; // error
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	12 c0       	rjmp	.+36     	; 0x134a <decode_message_TwiFIFO+0xba>
		}

		msg[i] = *character;
    1326:	20 91 00 00 	lds	r18, 0x0000
    132a:	f7 01       	movw	r30, r14
    132c:	21 93       	st	Z+, r18
    132e:	7f 01       	movw	r14, r30
	//NOTE: there has to be a better way of doing this...
	int ifzero = 0;
	if(length == 0) ifzero = 1;
	char msg[length-1+ifzero];

	for(int i = 0; i < length; ++i)
    1330:	0f 5f       	subi	r16, 0xFF	; 255
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	0c 15       	cp	r16, r12
    1336:	1d 05       	cpc	r17, r13
    1338:	3c f3       	brlt	.-50     	; 0x1308 <decode_message_TwiFIFO+0x78>
	}
	
	
	// TODO: send to relevant party... the display for now
	
	display_text_fixed_length(msg, length);
    133a:	b6 01       	movw	r22, r12
    133c:	88 2d       	mov	r24, r8
    133e:	99 2d       	mov	r25, r9
    1340:	0e 94 40 01 	call	0x280	; 0x280 <display_text_fixed_length>
	
	return 0;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	01 c0       	rjmp	.+2      	; 0x134a <decode_message_TwiFIFO+0xba>
	uint8_t *character = 0;
	
	if(FifoRead(gTwiFIFO, len))
	{
		//No new messages
		return 1; // error
    1348:	81 e0       	ldi	r24, 0x01	; 1
	// TODO: send to relevant party... the display for now
	
	display_text_fixed_length(msg, length);
	
	return 0;
}
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	be be       	out	0x3e, r11	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	ad be       	out	0x3d, r10	; 61
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	08 95       	ret

0000136e <write_to_TwiFIFO>:

uint8_t write_to_TwiFIFO(char msg[])
{
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	e8 2e       	mov	r14, r24
    137c:	f9 2e       	mov	r15, r25
	if(FifoWrite(gTwiFIFO, (unsigned char)strlen(msg)))
    137e:	e8 2f       	mov	r30, r24
    1380:	f9 2f       	mov	r31, r25
    1382:	df 01       	movw	r26, r30
    1384:	0d 90       	ld	r0, X+
    1386:	00 20       	and	r0, r0
    1388:	e9 f7       	brne	.-6      	; 0x1384 <write_to_TwiFIFO+0x16>
    138a:	11 97       	sbiw	r26, 0x01	; 1
    138c:	bd 01       	movw	r22, r26
    138e:	6e 1b       	sub	r22, r30
    1390:	7f 0b       	sbc	r23, r31
    1392:	80 91 00 01 	lds	r24, 0x0100
    1396:	90 91 01 01 	lds	r25, 0x0101
    139a:	0e 94 83 01 	call	0x306	; 0x306 <FifoWrite>
    139e:	81 11       	cpse	r24, r1
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <write_to_TwiFIFO+0x3e>
    13a2:	0e 2d       	mov	r16, r14
    13a4:	1f 2d       	mov	r17, r15
    13a6:	c0 e0       	ldi	r28, 0x00	; 0
    13a8:	d0 e0       	ldi	r29, 0x00	; 0
    13aa:	18 c0       	rjmp	.+48     	; 0x13dc <write_to_TwiFIFO+0x6e>
	{
		display_text("FIFO ERROR 3");
    13ac:	8c e1       	ldi	r24, 0x1C	; 28
    13ae:	91 e1       	ldi	r25, 0x11	; 17
    13b0:	0e 94 56 01 	call	0x2ac	; 0x2ac <display_text>
		return 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	1f c0       	rjmp	.+62     	; 0x13f6 <write_to_TwiFIFO+0x88>
	}
	
	for(int i = 0; i < strlen(msg); ++i)
	{
		if(FifoWrite(gTwiFIFO, msg[i]))
    13b8:	f8 01       	movw	r30, r16
    13ba:	61 91       	ld	r22, Z+
    13bc:	8f 01       	movw	r16, r30
    13be:	80 91 00 01 	lds	r24, 0x0100
    13c2:	90 91 01 01 	lds	r25, 0x0101
    13c6:	0e 94 83 01 	call	0x306	; 0x306 <FifoWrite>
    13ca:	88 23       	and	r24, r24
    13cc:	31 f0       	breq	.+12     	; 0x13da <write_to_TwiFIFO+0x6c>
		{
			display_text("FIFO ERROR 4");
    13ce:	89 e2       	ldi	r24, 0x29	; 41
    13d0:	91 e1       	ldi	r25, 0x11	; 17
    13d2:	0e 94 56 01 	call	0x2ac	; 0x2ac <display_text>
			return 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <write_to_TwiFIFO+0x88>
	{
		display_text("FIFO ERROR 3");
		return 1;
	}
	
	for(int i = 0; i < strlen(msg); ++i)
    13da:	21 96       	adiw	r28, 0x01	; 1
    13dc:	ee 2d       	mov	r30, r14
    13de:	ff 2d       	mov	r31, r15
    13e0:	df 01       	movw	r26, r30
    13e2:	0d 90       	ld	r0, X+
    13e4:	00 20       	and	r0, r0
    13e6:	e9 f7       	brne	.-6      	; 0x13e2 <write_to_TwiFIFO+0x74>
    13e8:	11 97       	sbiw	r26, 0x01	; 1
    13ea:	ae 1b       	sub	r26, r30
    13ec:	bf 0b       	sbc	r27, r31
    13ee:	ca 17       	cp	r28, r26
    13f0:	db 07       	cpc	r29, r27
    13f2:	10 f3       	brcs	.-60     	; 0x13b8 <write_to_TwiFIFO+0x4a>
			display_text("FIFO ERROR 4");
			return 1;
		}
	}
	
	return 0;
    13f4:	80 e0       	ldi	r24, 0x00	; 0
}
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	08 95       	ret

00001404 <__vector_26>:


//TWI Interrupt vector MUHAHAHAHA
// ----------------------------------------------------------------------------- Communications
ISR(TWI_vect)
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	0b b6       	in	r0, 0x3b	; 59
    1410:	0f 92       	push	r0
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
	switch(my_adress)
    142e:	80 91 41 13 	lds	r24, 0x1341
    1432:	85 30       	cpi	r24, 0x05	; 5
    1434:	09 f4       	brne	.+2      	; 0x1438 <__vector_26+0x34>
    1436:	30 c1       	rjmp	.+608    	; 0x1698 <__vector_26+0x294>
    1438:	48 f4       	brcc	.+18     	; 0x144c <__vector_26+0x48>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	09 f4       	brne	.+2      	; 0x1440 <__vector_26+0x3c>
    143e:	28 c1       	rjmp	.+592    	; 0x1690 <__vector_26+0x28c>
    1440:	08 f4       	brcc	.+2      	; 0x1444 <__vector_26+0x40>
    1442:	1e c1       	rjmp	.+572    	; 0x1680 <__vector_26+0x27c>
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_26+0x46>
    1448:	2c c1       	rjmp	.+600    	; 0x16a2 <__vector_26+0x29e>
    144a:	1e c1       	rjmp	.+572    	; 0x1688 <__vector_26+0x284>
    144c:	80 34       	cpi	r24, 0x40	; 64
    144e:	09 f4       	brne	.+2      	; 0x1452 <__vector_26+0x4e>
    1450:	57 c0       	rjmp	.+174    	; 0x1500 <__vector_26+0xfc>
    1452:	80 38       	cpi	r24, 0x80	; 128
    1454:	21 f0       	breq	.+8      	; 0x145e <__vector_26+0x5a>
    1456:	80 32       	cpi	r24, 0x20	; 32
    1458:	09 f0       	breq	.+2      	; 0x145c <__vector_26+0x58>
    145a:	23 c1       	rjmp	.+582    	; 0x16a2 <__vector_26+0x29e>
    145c:	99 c0       	rjmp	.+306    	; 0x1590 <__vector_26+0x18c>
	{
		case(C_ADRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    145e:	80 91 b9 00 	lds	r24, 0x00B9
    1462:	88 7f       	andi	r24, 0xF8	; 248
    1464:	80 36       	cpi	r24, 0x60	; 96
    1466:	29 f0       	breq	.+10     	; 0x1472 <__vector_26+0x6e>
    1468:	80 91 b9 00 	lds	r24, 0x00B9
    146c:	88 7f       	andi	r24, 0xF8	; 248
    146e:	88 36       	cpi	r24, 0x68	; 104
    1470:	21 f4       	brne	.+8      	; 0x147a <__vector_26+0x76>
			{
				instruction = true;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 93 34 13 	sts	0x1334, r24
    1478:	41 c0       	rjmp	.+130    	; 0x14fc <__vector_26+0xf8>
				
			}
			else if(CONTROL == DATA_SLAW)
    147a:	80 91 b9 00 	lds	r24, 0x00B9
    147e:	88 7f       	andi	r24, 0xF8	; 248
    1480:	80 38       	cpi	r24, 0x80	; 128
    1482:	f1 f4       	brne	.+60     	; 0x14c0 <__vector_26+0xbc>
			{
				if(instruction)
    1484:	80 91 34 13 	lds	r24, 0x1334
    1488:	88 23       	and	r24, r24
    148a:	41 f0       	breq	.+16     	; 0x149c <__vector_26+0x98>
				{
					current_instruction = get_data();
    148c:	2c de       	rcall	.-936    	; 0x10e6 <get_data>
    148e:	80 93 28 12 	sts	0x1228, r24
    1492:	10 92 29 12 	sts	0x1229, r1
					instruction = false;
    1496:	10 92 34 13 	sts	0x1334, r1
    149a:	30 c0       	rjmp	.+96     	; 0x14fc <__vector_26+0xf8>
				}
				else
				{
					switch(current_instruction)
    149c:	80 91 28 12 	lds	r24, 0x1228
    14a0:	90 91 29 12 	lds	r25, 0x1229
    14a4:	85 30       	cpi	r24, 0x05	; 5
    14a6:	91 05       	cpc	r25, r1
    14a8:	39 f0       	breq	.+14     	; 0x14b8 <__vector_26+0xb4>
    14aa:	89 31       	cpi	r24, 0x19	; 25
    14ac:	91 05       	cpc	r25, r1
    14ae:	31 f0       	breq	.+12     	; 0x14bc <__vector_26+0xb8>
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	21 f5       	brne	.+72     	; 0x14fc <__vector_26+0xf8>
					{
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    14b4:	69 de       	rcall	.-814    	; 0x1188 <get_control_settings_from_bus>
							break;
    14b6:	22 c0       	rjmp	.+68     	; 0x14fc <__vector_26+0xf8>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    14b8:	78 de       	rcall	.-784    	; 0x11aa <get_autonom_settings_from_bus>
							break;
    14ba:	20 c0       	rjmp	.+64     	; 0x14fc <__vector_26+0xf8>
						}
						case(I_STRING):
						{
							get_char_from_bus();
    14bc:	7a de       	rcall	.-780    	; 0x11b2 <get_char_from_bus>
							break;
    14be:	1e c0       	rjmp	.+60     	; 0x14fc <__vector_26+0xf8>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    14c0:	80 91 b9 00 	lds	r24, 0x00B9
    14c4:	88 7f       	andi	r24, 0xF8	; 248
    14c6:	80 39       	cpi	r24, 0x90	; 144
    14c8:	11 f4       	brne	.+4      	; 0x14ce <__vector_26+0xca>
			{
				get_sensor_from_bus();
    14ca:	33 de       	rcall	.-922    	; 0x1132 <get_sensor_from_bus>
    14cc:	17 c0       	rjmp	.+46     	; 0x14fc <__vector_26+0xf8>
			}
			else if (CONTROL == STOP)
    14ce:	80 91 b9 00 	lds	r24, 0x00B9
    14d2:	88 7f       	andi	r24, 0xF8	; 248
    14d4:	80 3a       	cpi	r24, 0xA0	; 160
    14d6:	91 f4       	brne	.+36     	; 0x14fc <__vector_26+0xf8>
			{
				stop_twi();
    14d8:	15 de       	rcall	.-982    	; 0x1104 <stop_twi>
				switch(current_instruction)
    14da:	80 91 28 12 	lds	r24, 0x1228
    14de:	90 91 29 12 	lds	r25, 0x1229
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	19 f0       	breq	.+6      	; 0x14ee <__vector_26+0xea>
    14e8:	05 97       	sbiw	r24, 0x05	; 5
    14ea:	41 f4       	brne	.+16     	; 0x14fc <__vector_26+0xf8>
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <__vector_26+0xf2>
				{
					case(I_SETTINGS):
					{
						control_settings_flag_ = true;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	80 93 23 12 	sts	0x1223, r24
						break;
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <__vector_26+0xf8>
					}
					case(I_AUTONOM):
					{
						autonom_settings_flag_ = true;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 22 12 	sts	0x1222, r24
						//Add message to buffer
						break;
					}
				}
			}
			reset_TWI();
    14fc:	14 de       	rcall	.-984    	; 0x1126 <reset_TWI>
			break;
    14fe:	d1 c0       	rjmp	.+418    	; 0x16a2 <__vector_26+0x29e>
		}
		// ----------------------------------------------------------------------------- Sensors
		case(S_ADRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1500:	80 91 b9 00 	lds	r24, 0x00B9
    1504:	88 7f       	andi	r24, 0xF8	; 248
    1506:	80 36       	cpi	r24, 0x60	; 96
    1508:	29 f0       	breq	.+10     	; 0x1514 <__vector_26+0x110>
    150a:	80 91 b9 00 	lds	r24, 0x00B9
    150e:	88 7f       	andi	r24, 0xF8	; 248
    1510:	88 36       	cpi	r24, 0x68	; 104
    1512:	21 f4       	brne	.+8      	; 0x151c <__vector_26+0x118>
			{
				instruction = true;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	80 93 34 13 	sts	0x1334, r24
    151a:	38 c0       	rjmp	.+112    	; 0x158c <__vector_26+0x188>
			}
			else if(CONTROL == DATA_SLAW)
    151c:	80 91 b9 00 	lds	r24, 0x00B9
    1520:	88 7f       	andi	r24, 0xF8	; 248
    1522:	80 38       	cpi	r24, 0x80	; 128
    1524:	e1 f4       	brne	.+56     	; 0x155e <__vector_26+0x15a>
			{
				if(instruction)
    1526:	80 91 34 13 	lds	r24, 0x1334
    152a:	88 23       	and	r24, r24
    152c:	41 f0       	breq	.+16     	; 0x153e <__vector_26+0x13a>
				{
					current_instruction = get_data();
    152e:	db dd       	rcall	.-1098   	; 0x10e6 <get_data>
    1530:	80 93 28 12 	sts	0x1228, r24
    1534:	10 92 29 12 	sts	0x1229, r1
					instruction = false;
    1538:	10 92 34 13 	sts	0x1334, r1
    153c:	27 c0       	rjmp	.+78     	; 0x158c <__vector_26+0x188>
				}
				else
				{
					switch(current_instruction)
    153e:	80 91 28 12 	lds	r24, 0x1228
    1542:	90 91 29 12 	lds	r25, 0x1229
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	19 f0       	breq	.+6      	; 0x1552 <__vector_26+0x14e>
    154c:	49 97       	sbiw	r24, 0x19	; 25
    154e:	f1 f4       	brne	.+60     	; 0x158c <__vector_26+0x188>
    1550:	04 c0       	rjmp	.+8      	; 0x155a <__vector_26+0x156>
	}
}

void get_sweep_from_bus()
{
	sweep = get_data();
    1552:	c9 dd       	rcall	.-1134   	; 0x10e6 <get_data>
    1554:	80 93 42 13 	sts	0x1342, r24
    1558:	19 c0       	rjmp	.+50     	; 0x158c <__vector_26+0x188>
							get_sweep_from_bus();
							break;
						}
						case(I_STRING):
						{
							get_char_from_bus();
    155a:	2b de       	rcall	.-938    	; 0x11b2 <get_char_from_bus>
							break;
    155c:	17 c0       	rjmp	.+46     	; 0x158c <__vector_26+0x188>
						}
					}
				}
			}
			else if (CONTROL == STOP)
    155e:	80 91 b9 00 	lds	r24, 0x00B9
    1562:	88 7f       	andi	r24, 0xF8	; 248
    1564:	80 3a       	cpi	r24, 0xA0	; 160
    1566:	91 f4       	brne	.+36     	; 0x158c <__vector_26+0x188>
			{
				stop_twi();
    1568:	cd dd       	rcall	.-1126   	; 0x1104 <stop_twi>
				switch(current_instruction)
    156a:	80 91 28 12 	lds	r24, 0x1228
    156e:	90 91 29 12 	lds	r25, 0x1229
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	91 05       	cpc	r25, r1
    1576:	19 f0       	breq	.+6      	; 0x157e <__vector_26+0x17a>
    1578:	49 97       	sbiw	r24, 0x19	; 25
    157a:	41 f4       	brne	.+16     	; 0x158c <__vector_26+0x188>
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <__vector_26+0x182>
				{
					case(I_SWEEP):
					{
						sweep_flag_ = true;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 20 12 	sts	0x1220, r24
						break;
    1584:	03 c0       	rjmp	.+6      	; 0x158c <__vector_26+0x188>
					}
					case(I_STRING):
					{
						write_to_TwiFIFO(message);
    1586:	84 e3       	ldi	r24, 0x34	; 52
    1588:	92 e1       	ldi	r25, 0x12	; 18
    158a:	f1 de       	rcall	.-542    	; 0x136e <write_to_TwiFIFO>
						break;
					}
				}
			}
			reset_TWI();
    158c:	cc dd       	rcall	.-1128   	; 0x1126 <reset_TWI>
			break;
    158e:	89 c0       	rjmp	.+274    	; 0x16a2 <__vector_26+0x29e>
		}
		// ----------------------------------------------------------------------------- Steer
		case(ST_ADRESS):
		{
			if(CONTROL == SLAW || CONTROL == ARBIT_SLAW)
    1590:	80 91 b9 00 	lds	r24, 0x00B9
    1594:	88 7f       	andi	r24, 0xF8	; 248
    1596:	80 36       	cpi	r24, 0x60	; 96
    1598:	29 f0       	breq	.+10     	; 0x15a4 <__vector_26+0x1a0>
    159a:	80 91 b9 00 	lds	r24, 0x00B9
    159e:	88 7f       	andi	r24, 0xF8	; 248
    15a0:	88 36       	cpi	r24, 0x68	; 104
    15a2:	21 f4       	brne	.+8      	; 0x15ac <__vector_26+0x1a8>
			{
				instruction = true;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 34 13 	sts	0x1334, r24
    15aa:	7a c0       	rjmp	.+244    	; 0x16a0 <__vector_26+0x29c>
			}
			else if(CONTROL == DATA_SLAW)
    15ac:	80 91 b9 00 	lds	r24, 0x00B9
    15b0:	88 7f       	andi	r24, 0xF8	; 248
    15b2:	80 38       	cpi	r24, 0x80	; 128
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <__vector_26+0x1b4>
    15b6:	57 c0       	rjmp	.+174    	; 0x1666 <__vector_26+0x262>
			{
				if(instruction)
    15b8:	80 91 34 13 	lds	r24, 0x1334
    15bc:	88 23       	and	r24, r24
    15be:	41 f0       	breq	.+16     	; 0x15d0 <__vector_26+0x1cc>
				{
					current_instruction = get_data();
    15c0:	92 dd       	rcall	.-1244   	; 0x10e6 <get_data>
    15c2:	80 93 28 12 	sts	0x1228, r24
    15c6:	10 92 29 12 	sts	0x1229, r1
					instruction = false;
    15ca:	10 92 34 13 	sts	0x1334, r1
    15ce:	68 c0       	rjmp	.+208    	; 0x16a0 <__vector_26+0x29c>
				}
				else
				{
					switch(current_instruction)
    15d0:	80 91 28 12 	lds	r24, 0x1228
    15d4:	90 91 29 12 	lds	r25, 0x1229
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <__vector_26+0x1dc>
    15de:	3f c0       	rjmp	.+126    	; 0x165e <__vector_26+0x25a>
    15e0:	1c f4       	brge	.+6      	; 0x15e8 <__vector_26+0x1e4>
    15e2:	89 2b       	or	r24, r25
    15e4:	41 f0       	breq	.+16     	; 0x15f6 <__vector_26+0x1f2>
    15e6:	5c c0       	rjmp	.+184    	; 0x16a0 <__vector_26+0x29c>
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	91 05       	cpc	r25, r1
    15ec:	b1 f0       	breq	.+44     	; 0x161a <__vector_26+0x216>
    15ee:	05 97       	sbiw	r24, 0x05	; 5
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__vector_26+0x1f0>
    15f2:	56 c0       	rjmp	.+172    	; 0x16a0 <__vector_26+0x29c>
    15f4:	36 c0       	rjmp	.+108    	; 0x1662 <__vector_26+0x25e>
	message_length = message_counter;
}

void get_command_from_bus()
{
	command[current_command] = get_data();
    15f6:	c0 91 38 13 	lds	r28, 0x1338
    15fa:	d0 91 39 13 	lds	r29, 0x1339
    15fe:	73 dd       	rcall	.-1306   	; 0x10e6 <get_data>
    1600:	cf 5c       	subi	r28, 0xCF	; 207
    1602:	dd 4e       	sbci	r29, 0xED	; 237
    1604:	88 83       	st	Y, r24
	current_command += 1;
    1606:	80 91 38 13 	lds	r24, 0x1338
    160a:	90 91 39 13 	lds	r25, 0x1339
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	90 93 39 13 	sts	0x1339, r25
    1614:	80 93 38 13 	sts	0x1338, r24
    1618:	43 c0       	rjmp	.+134    	; 0x16a0 <__vector_26+0x29c>
}

void get_elevation_from_bus()
{
	elevation += get_data();
    161a:	65 dd       	rcall	.-1334   	; 0x10e6 <get_data>
    161c:	20 91 3a 13 	lds	r18, 0x133A
    1620:	30 91 3b 13 	lds	r19, 0x133B
    1624:	a9 01       	movw	r20, r18
    1626:	48 0f       	add	r20, r24
    1628:	51 1d       	adc	r21, r1
    162a:	ca 01       	movw	r24, r20
	if(elevation < 1)
    162c:	18 16       	cp	r1, r24
    162e:	19 06       	cpc	r1, r25
    1630:	3c f0       	brlt	.+14     	; 0x1640 <__vector_26+0x23c>
		elevation = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	90 93 3b 13 	sts	0x133B, r25
    163a:	80 93 3a 13 	sts	0x133A, r24
    163e:	30 c0       	rjmp	.+96     	; 0x16a0 <__vector_26+0x29c>
	else if(elevation > 7) // 7 nivåer?!
    1640:	48 30       	cpi	r20, 0x08	; 8
    1642:	51 05       	cpc	r21, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <__vector_26+0x24c>
	current_command += 1;
}

void get_elevation_from_bus()
{
	elevation += get_data();
    1646:	50 93 3b 13 	sts	0x133B, r21
    164a:	40 93 3a 13 	sts	0x133A, r20
    164e:	28 c0       	rjmp	.+80     	; 0x16a0 <__vector_26+0x29c>
	if(elevation < 1)
		elevation = 1;
	else if(elevation > 7) // 7 nivåer?!
		elevation = 7;
    1650:	87 e0       	ldi	r24, 0x07	; 7
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	90 93 3b 13 	sts	0x133B, r25
    1658:	80 93 3a 13 	sts	0x133A, r24
    165c:	21 c0       	rjmp	.+66     	; 0x16a0 <__vector_26+0x29c>
							get_elevation_from_bus();
							break;
						}
						case(I_SETTINGS):
						{
							get_control_settings_from_bus();
    165e:	94 dd       	rcall	.-1240   	; 0x1188 <get_control_settings_from_bus>
							break;
    1660:	1f c0       	rjmp	.+62     	; 0x16a0 <__vector_26+0x29c>
						}
						case(I_AUTONOM):
						{
							get_autonom_settings_from_bus();
    1662:	a3 dd       	rcall	.-1210   	; 0x11aa <get_autonom_settings_from_bus>
							break;
    1664:	1d c0       	rjmp	.+58     	; 0x16a0 <__vector_26+0x29c>
						}
					}
				}
			}
			else if (CONTROL == DATA_GENERAL)
    1666:	80 91 b9 00 	lds	r24, 0x00B9
    166a:	88 7f       	andi	r24, 0xF8	; 248
    166c:	80 39       	cpi	r24, 0x90	; 144
    166e:	11 f4       	brne	.+4      	; 0x1674 <__vector_26+0x270>
			{
				get_sensor_from_bus();
    1670:	60 dd       	rcall	.-1344   	; 0x1132 <get_sensor_from_bus>
    1672:	16 c0       	rjmp	.+44     	; 0x16a0 <__vector_26+0x29c>
			}
			else if (CONTROL == STOP)
    1674:	80 91 b9 00 	lds	r24, 0x00B9
    1678:	88 7f       	andi	r24, 0xF8	; 248
    167a:	80 3a       	cpi	r24, 0xA0	; 160
    167c:	89 f4       	brne	.+34     	; 0x16a0 <__vector_26+0x29c>
			{
				stop_twi();
    167e:	42 dd       	rcall	.-1404   	; 0x1104 <stop_twi>
				case(I_COMMAND):
				{
					command_flag_ = true;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 93 24 12 	sts	0x1224, r24
					break;
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <__vector_26+0x29e>
				}
				case(I_ELEVATION):
				{
					elevation_flag_ = true;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 21 12 	sts	0x1221, r24
					break;
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <__vector_26+0x29e>
				}
				case(I_SETTINGS):
				{
					control_settings_flag_ = true;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	80 93 23 12 	sts	0x1223, r24
					break;
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <__vector_26+0x29e>
				}
				case(I_AUTONOM):
				{
					autonom_settings_flag_ = true;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 22 12 	sts	0x1222, r24
					break;
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <__vector_26+0x29e>
				}
			}
			reset_TWI();
    16a0:	42 dd       	rcall	.-1404   	; 0x1126 <reset_TWI>
			break;
		}
	}
    16a2:	ff 91       	pop	r31
    16a4:	ef 91       	pop	r30
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	bf 91       	pop	r27
    16ac:	af 91       	pop	r26
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	7f 91       	pop	r23
    16b4:	6f 91       	pop	r22
    16b6:	5f 91       	pop	r21
    16b8:	4f 91       	pop	r20
    16ba:	3f 91       	pop	r19
    16bc:	2f 91       	pop	r18
    16be:	0f 90       	pop	r0
    16c0:	0b be       	out	0x3b, r0	; 59
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__subsf3>:
    16cc:	50 58       	subi	r21, 0x80	; 128

000016ce <__addsf3>:
    16ce:	bb 27       	eor	r27, r27
    16d0:	aa 27       	eor	r26, r26
    16d2:	0e d0       	rcall	.+28     	; 0x16f0 <__addsf3x>
    16d4:	75 c1       	rjmp	.+746    	; 0x19c0 <__fp_round>
    16d6:	66 d1       	rcall	.+716    	; 0x19a4 <__fp_pscA>
    16d8:	30 f0       	brcs	.+12     	; 0x16e6 <__addsf3+0x18>
    16da:	6b d1       	rcall	.+726    	; 0x19b2 <__fp_pscB>
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <__addsf3+0x18>
    16de:	31 f4       	brne	.+12     	; 0x16ec <__addsf3+0x1e>
    16e0:	9f 3f       	cpi	r25, 0xFF	; 255
    16e2:	11 f4       	brne	.+4      	; 0x16e8 <__addsf3+0x1a>
    16e4:	1e f4       	brtc	.+6      	; 0x16ec <__addsf3+0x1e>
    16e6:	5b c1       	rjmp	.+694    	; 0x199e <__fp_nan>
    16e8:	0e f4       	brtc	.+2      	; 0x16ec <__addsf3+0x1e>
    16ea:	e0 95       	com	r30
    16ec:	e7 fb       	bst	r30, 7
    16ee:	51 c1       	rjmp	.+674    	; 0x1992 <__fp_inf>

000016f0 <__addsf3x>:
    16f0:	e9 2f       	mov	r30, r25
    16f2:	77 d1       	rcall	.+750    	; 0x19e2 <__fp_split3>
    16f4:	80 f3       	brcs	.-32     	; 0x16d6 <__addsf3+0x8>
    16f6:	ba 17       	cp	r27, r26
    16f8:	62 07       	cpc	r22, r18
    16fa:	73 07       	cpc	r23, r19
    16fc:	84 07       	cpc	r24, r20
    16fe:	95 07       	cpc	r25, r21
    1700:	18 f0       	brcs	.+6      	; 0x1708 <__addsf3x+0x18>
    1702:	71 f4       	brne	.+28     	; 0x1720 <__addsf3x+0x30>
    1704:	9e f5       	brtc	.+102    	; 0x176c <__addsf3x+0x7c>
    1706:	8f c1       	rjmp	.+798    	; 0x1a26 <__fp_zero>
    1708:	0e f4       	brtc	.+2      	; 0x170c <__addsf3x+0x1c>
    170a:	e0 95       	com	r30
    170c:	0b 2e       	mov	r0, r27
    170e:	ba 2f       	mov	r27, r26
    1710:	a0 2d       	mov	r26, r0
    1712:	0b 01       	movw	r0, r22
    1714:	b9 01       	movw	r22, r18
    1716:	90 01       	movw	r18, r0
    1718:	0c 01       	movw	r0, r24
    171a:	ca 01       	movw	r24, r20
    171c:	a0 01       	movw	r20, r0
    171e:	11 24       	eor	r1, r1
    1720:	ff 27       	eor	r31, r31
    1722:	59 1b       	sub	r21, r25
    1724:	99 f0       	breq	.+38     	; 0x174c <__addsf3x+0x5c>
    1726:	59 3f       	cpi	r21, 0xF9	; 249
    1728:	50 f4       	brcc	.+20     	; 0x173e <__addsf3x+0x4e>
    172a:	50 3e       	cpi	r21, 0xE0	; 224
    172c:	68 f1       	brcs	.+90     	; 0x1788 <__addsf3x+0x98>
    172e:	1a 16       	cp	r1, r26
    1730:	f0 40       	sbci	r31, 0x00	; 0
    1732:	a2 2f       	mov	r26, r18
    1734:	23 2f       	mov	r18, r19
    1736:	34 2f       	mov	r19, r20
    1738:	44 27       	eor	r20, r20
    173a:	58 5f       	subi	r21, 0xF8	; 248
    173c:	f3 cf       	rjmp	.-26     	; 0x1724 <__addsf3x+0x34>
    173e:	46 95       	lsr	r20
    1740:	37 95       	ror	r19
    1742:	27 95       	ror	r18
    1744:	a7 95       	ror	r26
    1746:	f0 40       	sbci	r31, 0x00	; 0
    1748:	53 95       	inc	r21
    174a:	c9 f7       	brne	.-14     	; 0x173e <__addsf3x+0x4e>
    174c:	7e f4       	brtc	.+30     	; 0x176c <__addsf3x+0x7c>
    174e:	1f 16       	cp	r1, r31
    1750:	ba 0b       	sbc	r27, r26
    1752:	62 0b       	sbc	r22, r18
    1754:	73 0b       	sbc	r23, r19
    1756:	84 0b       	sbc	r24, r20
    1758:	ba f0       	brmi	.+46     	; 0x1788 <__addsf3x+0x98>
    175a:	91 50       	subi	r25, 0x01	; 1
    175c:	a1 f0       	breq	.+40     	; 0x1786 <__addsf3x+0x96>
    175e:	ff 0f       	add	r31, r31
    1760:	bb 1f       	adc	r27, r27
    1762:	66 1f       	adc	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	c2 f7       	brpl	.-16     	; 0x175a <__addsf3x+0x6a>
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <__addsf3x+0x98>
    176c:	ba 0f       	add	r27, r26
    176e:	62 1f       	adc	r22, r18
    1770:	73 1f       	adc	r23, r19
    1772:	84 1f       	adc	r24, r20
    1774:	48 f4       	brcc	.+18     	; 0x1788 <__addsf3x+0x98>
    1776:	87 95       	ror	r24
    1778:	77 95       	ror	r23
    177a:	67 95       	ror	r22
    177c:	b7 95       	ror	r27
    177e:	f7 95       	ror	r31
    1780:	9e 3f       	cpi	r25, 0xFE	; 254
    1782:	08 f0       	brcs	.+2      	; 0x1786 <__addsf3x+0x96>
    1784:	b3 cf       	rjmp	.-154    	; 0x16ec <__addsf3+0x1e>
    1786:	93 95       	inc	r25
    1788:	88 0f       	add	r24, r24
    178a:	08 f0       	brcs	.+2      	; 0x178e <__addsf3x+0x9e>
    178c:	99 27       	eor	r25, r25
    178e:	ee 0f       	add	r30, r30
    1790:	97 95       	ror	r25
    1792:	87 95       	ror	r24
    1794:	08 95       	ret

00001796 <__cmpsf2>:
    1796:	d9 d0       	rcall	.+434    	; 0x194a <__fp_cmp>
    1798:	08 f4       	brcc	.+2      	; 0x179c <__cmpsf2+0x6>
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	08 95       	ret

0000179e <__divsf3>:
    179e:	0c d0       	rcall	.+24     	; 0x17b8 <__divsf3x>
    17a0:	0f c1       	rjmp	.+542    	; 0x19c0 <__fp_round>
    17a2:	07 d1       	rcall	.+526    	; 0x19b2 <__fp_pscB>
    17a4:	40 f0       	brcs	.+16     	; 0x17b6 <__divsf3+0x18>
    17a6:	fe d0       	rcall	.+508    	; 0x19a4 <__fp_pscA>
    17a8:	30 f0       	brcs	.+12     	; 0x17b6 <__divsf3+0x18>
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <__divsf3+0x16>
    17ac:	5f 3f       	cpi	r21, 0xFF	; 255
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <__divsf3+0x18>
    17b0:	f0 c0       	rjmp	.+480    	; 0x1992 <__fp_inf>
    17b2:	51 11       	cpse	r21, r1
    17b4:	39 c1       	rjmp	.+626    	; 0x1a28 <__fp_szero>
    17b6:	f3 c0       	rjmp	.+486    	; 0x199e <__fp_nan>

000017b8 <__divsf3x>:
    17b8:	14 d1       	rcall	.+552    	; 0x19e2 <__fp_split3>
    17ba:	98 f3       	brcs	.-26     	; 0x17a2 <__divsf3+0x4>

000017bc <__divsf3_pse>:
    17bc:	99 23       	and	r25, r25
    17be:	c9 f3       	breq	.-14     	; 0x17b2 <__divsf3+0x14>
    17c0:	55 23       	and	r21, r21
    17c2:	b1 f3       	breq	.-20     	; 0x17b0 <__divsf3+0x12>
    17c4:	95 1b       	sub	r25, r21
    17c6:	55 0b       	sbc	r21, r21
    17c8:	bb 27       	eor	r27, r27
    17ca:	aa 27       	eor	r26, r26
    17cc:	62 17       	cp	r22, r18
    17ce:	73 07       	cpc	r23, r19
    17d0:	84 07       	cpc	r24, r20
    17d2:	38 f0       	brcs	.+14     	; 0x17e2 <__divsf3_pse+0x26>
    17d4:	9f 5f       	subi	r25, 0xFF	; 255
    17d6:	5f 4f       	sbci	r21, 0xFF	; 255
    17d8:	22 0f       	add	r18, r18
    17da:	33 1f       	adc	r19, r19
    17dc:	44 1f       	adc	r20, r20
    17de:	aa 1f       	adc	r26, r26
    17e0:	a9 f3       	breq	.-22     	; 0x17cc <__divsf3_pse+0x10>
    17e2:	33 d0       	rcall	.+102    	; 0x184a <__divsf3_pse+0x8e>
    17e4:	0e 2e       	mov	r0, r30
    17e6:	3a f0       	brmi	.+14     	; 0x17f6 <__divsf3_pse+0x3a>
    17e8:	e0 e8       	ldi	r30, 0x80	; 128
    17ea:	30 d0       	rcall	.+96     	; 0x184c <__divsf3_pse+0x90>
    17ec:	91 50       	subi	r25, 0x01	; 1
    17ee:	50 40       	sbci	r21, 0x00	; 0
    17f0:	e6 95       	lsr	r30
    17f2:	00 1c       	adc	r0, r0
    17f4:	ca f7       	brpl	.-14     	; 0x17e8 <__divsf3_pse+0x2c>
    17f6:	29 d0       	rcall	.+82     	; 0x184a <__divsf3_pse+0x8e>
    17f8:	fe 2f       	mov	r31, r30
    17fa:	27 d0       	rcall	.+78     	; 0x184a <__divsf3_pse+0x8e>
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	bb 1f       	adc	r27, r27
    1804:	26 17       	cp	r18, r22
    1806:	37 07       	cpc	r19, r23
    1808:	48 07       	cpc	r20, r24
    180a:	ab 07       	cpc	r26, r27
    180c:	b0 e8       	ldi	r27, 0x80	; 128
    180e:	09 f0       	breq	.+2      	; 0x1812 <__divsf3_pse+0x56>
    1810:	bb 0b       	sbc	r27, r27
    1812:	80 2d       	mov	r24, r0
    1814:	bf 01       	movw	r22, r30
    1816:	ff 27       	eor	r31, r31
    1818:	93 58       	subi	r25, 0x83	; 131
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	2a f0       	brmi	.+10     	; 0x1828 <__divsf3_pse+0x6c>
    181e:	9e 3f       	cpi	r25, 0xFE	; 254
    1820:	51 05       	cpc	r21, r1
    1822:	68 f0       	brcs	.+26     	; 0x183e <__divsf3_pse+0x82>
    1824:	b6 c0       	rjmp	.+364    	; 0x1992 <__fp_inf>
    1826:	00 c1       	rjmp	.+512    	; 0x1a28 <__fp_szero>
    1828:	5f 3f       	cpi	r21, 0xFF	; 255
    182a:	ec f3       	brlt	.-6      	; 0x1826 <__divsf3_pse+0x6a>
    182c:	98 3e       	cpi	r25, 0xE8	; 232
    182e:	dc f3       	brlt	.-10     	; 0x1826 <__divsf3_pse+0x6a>
    1830:	86 95       	lsr	r24
    1832:	77 95       	ror	r23
    1834:	67 95       	ror	r22
    1836:	b7 95       	ror	r27
    1838:	f7 95       	ror	r31
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	c9 f7       	brne	.-14     	; 0x1830 <__divsf3_pse+0x74>
    183e:	88 0f       	add	r24, r24
    1840:	91 1d       	adc	r25, r1
    1842:	96 95       	lsr	r25
    1844:	87 95       	ror	r24
    1846:	97 f9       	bld	r25, 7
    1848:	08 95       	ret
    184a:	e1 e0       	ldi	r30, 0x01	; 1
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	bb 1f       	adc	r27, r27
    1854:	62 17       	cp	r22, r18
    1856:	73 07       	cpc	r23, r19
    1858:	84 07       	cpc	r24, r20
    185a:	ba 07       	cpc	r27, r26
    185c:	20 f0       	brcs	.+8      	; 0x1866 <__divsf3_pse+0xaa>
    185e:	62 1b       	sub	r22, r18
    1860:	73 0b       	sbc	r23, r19
    1862:	84 0b       	sbc	r24, r20
    1864:	ba 0b       	sbc	r27, r26
    1866:	ee 1f       	adc	r30, r30
    1868:	88 f7       	brcc	.-30     	; 0x184c <__divsf3_pse+0x90>
    186a:	e0 95       	com	r30
    186c:	08 95       	ret

0000186e <__fixsfsi>:
    186e:	04 d0       	rcall	.+8      	; 0x1878 <__fixunssfsi>
    1870:	68 94       	set
    1872:	b1 11       	cpse	r27, r1
    1874:	d9 c0       	rjmp	.+434    	; 0x1a28 <__fp_szero>
    1876:	08 95       	ret

00001878 <__fixunssfsi>:
    1878:	bc d0       	rcall	.+376    	; 0x19f2 <__fp_splitA>
    187a:	88 f0       	brcs	.+34     	; 0x189e <__fixunssfsi+0x26>
    187c:	9f 57       	subi	r25, 0x7F	; 127
    187e:	90 f0       	brcs	.+36     	; 0x18a4 <__fixunssfsi+0x2c>
    1880:	b9 2f       	mov	r27, r25
    1882:	99 27       	eor	r25, r25
    1884:	b7 51       	subi	r27, 0x17	; 23
    1886:	a0 f0       	brcs	.+40     	; 0x18b0 <__fixunssfsi+0x38>
    1888:	d1 f0       	breq	.+52     	; 0x18be <__fixunssfsi+0x46>
    188a:	66 0f       	add	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	88 1f       	adc	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	1a f0       	brmi	.+6      	; 0x189a <__fixunssfsi+0x22>
    1894:	ba 95       	dec	r27
    1896:	c9 f7       	brne	.-14     	; 0x188a <__fixunssfsi+0x12>
    1898:	12 c0       	rjmp	.+36     	; 0x18be <__fixunssfsi+0x46>
    189a:	b1 30       	cpi	r27, 0x01	; 1
    189c:	81 f0       	breq	.+32     	; 0x18be <__fixunssfsi+0x46>
    189e:	c3 d0       	rcall	.+390    	; 0x1a26 <__fp_zero>
    18a0:	b1 e0       	ldi	r27, 0x01	; 1
    18a2:	08 95       	ret
    18a4:	c0 c0       	rjmp	.+384    	; 0x1a26 <__fp_zero>
    18a6:	67 2f       	mov	r22, r23
    18a8:	78 2f       	mov	r23, r24
    18aa:	88 27       	eor	r24, r24
    18ac:	b8 5f       	subi	r27, 0xF8	; 248
    18ae:	39 f0       	breq	.+14     	; 0x18be <__fixunssfsi+0x46>
    18b0:	b9 3f       	cpi	r27, 0xF9	; 249
    18b2:	cc f3       	brlt	.-14     	; 0x18a6 <__fixunssfsi+0x2e>
    18b4:	86 95       	lsr	r24
    18b6:	77 95       	ror	r23
    18b8:	67 95       	ror	r22
    18ba:	b3 95       	inc	r27
    18bc:	d9 f7       	brne	.-10     	; 0x18b4 <__fixunssfsi+0x3c>
    18be:	3e f4       	brtc	.+14     	; 0x18ce <__fixunssfsi+0x56>
    18c0:	90 95       	com	r25
    18c2:	80 95       	com	r24
    18c4:	70 95       	com	r23
    18c6:	61 95       	neg	r22
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	8f 4f       	sbci	r24, 0xFF	; 255
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	08 95       	ret

000018d0 <__floatunsisf>:
    18d0:	e8 94       	clt
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <__floatsisf+0x12>

000018d4 <__floatsisf>:
    18d4:	97 fb       	bst	r25, 7
    18d6:	3e f4       	brtc	.+14     	; 0x18e6 <__floatsisf+0x12>
    18d8:	90 95       	com	r25
    18da:	80 95       	com	r24
    18dc:	70 95       	com	r23
    18de:	61 95       	neg	r22
    18e0:	7f 4f       	sbci	r23, 0xFF	; 255
    18e2:	8f 4f       	sbci	r24, 0xFF	; 255
    18e4:	9f 4f       	sbci	r25, 0xFF	; 255
    18e6:	99 23       	and	r25, r25
    18e8:	a9 f0       	breq	.+42     	; 0x1914 <__floatsisf+0x40>
    18ea:	f9 2f       	mov	r31, r25
    18ec:	96 e9       	ldi	r25, 0x96	; 150
    18ee:	bb 27       	eor	r27, r27
    18f0:	93 95       	inc	r25
    18f2:	f6 95       	lsr	r31
    18f4:	87 95       	ror	r24
    18f6:	77 95       	ror	r23
    18f8:	67 95       	ror	r22
    18fa:	b7 95       	ror	r27
    18fc:	f1 11       	cpse	r31, r1
    18fe:	f8 cf       	rjmp	.-16     	; 0x18f0 <__floatsisf+0x1c>
    1900:	fa f4       	brpl	.+62     	; 0x1940 <__floatsisf+0x6c>
    1902:	bb 0f       	add	r27, r27
    1904:	11 f4       	brne	.+4      	; 0x190a <__floatsisf+0x36>
    1906:	60 ff       	sbrs	r22, 0
    1908:	1b c0       	rjmp	.+54     	; 0x1940 <__floatsisf+0x6c>
    190a:	6f 5f       	subi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	8f 4f       	sbci	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	16 c0       	rjmp	.+44     	; 0x1940 <__floatsisf+0x6c>
    1914:	88 23       	and	r24, r24
    1916:	11 f0       	breq	.+4      	; 0x191c <__floatsisf+0x48>
    1918:	96 e9       	ldi	r25, 0x96	; 150
    191a:	11 c0       	rjmp	.+34     	; 0x193e <__floatsisf+0x6a>
    191c:	77 23       	and	r23, r23
    191e:	21 f0       	breq	.+8      	; 0x1928 <__floatsisf+0x54>
    1920:	9e e8       	ldi	r25, 0x8E	; 142
    1922:	87 2f       	mov	r24, r23
    1924:	76 2f       	mov	r23, r22
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <__floatsisf+0x5e>
    1928:	66 23       	and	r22, r22
    192a:	71 f0       	breq	.+28     	; 0x1948 <__floatsisf+0x74>
    192c:	96 e8       	ldi	r25, 0x86	; 134
    192e:	86 2f       	mov	r24, r22
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	2a f0       	brmi	.+10     	; 0x1940 <__floatsisf+0x6c>
    1936:	9a 95       	dec	r25
    1938:	66 0f       	add	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	88 1f       	adc	r24, r24
    193e:	da f7       	brpl	.-10     	; 0x1936 <__floatsisf+0x62>
    1940:	88 0f       	add	r24, r24
    1942:	96 95       	lsr	r25
    1944:	87 95       	ror	r24
    1946:	97 f9       	bld	r25, 7
    1948:	08 95       	ret

0000194a <__fp_cmp>:
    194a:	99 0f       	add	r25, r25
    194c:	00 08       	sbc	r0, r0
    194e:	55 0f       	add	r21, r21
    1950:	aa 0b       	sbc	r26, r26
    1952:	e0 e8       	ldi	r30, 0x80	; 128
    1954:	fe ef       	ldi	r31, 0xFE	; 254
    1956:	16 16       	cp	r1, r22
    1958:	17 06       	cpc	r1, r23
    195a:	e8 07       	cpc	r30, r24
    195c:	f9 07       	cpc	r31, r25
    195e:	c0 f0       	brcs	.+48     	; 0x1990 <__fp_cmp+0x46>
    1960:	12 16       	cp	r1, r18
    1962:	13 06       	cpc	r1, r19
    1964:	e4 07       	cpc	r30, r20
    1966:	f5 07       	cpc	r31, r21
    1968:	98 f0       	brcs	.+38     	; 0x1990 <__fp_cmp+0x46>
    196a:	62 1b       	sub	r22, r18
    196c:	73 0b       	sbc	r23, r19
    196e:	84 0b       	sbc	r24, r20
    1970:	95 0b       	sbc	r25, r21
    1972:	39 f4       	brne	.+14     	; 0x1982 <__fp_cmp+0x38>
    1974:	0a 26       	eor	r0, r26
    1976:	61 f0       	breq	.+24     	; 0x1990 <__fp_cmp+0x46>
    1978:	23 2b       	or	r18, r19
    197a:	24 2b       	or	r18, r20
    197c:	25 2b       	or	r18, r21
    197e:	21 f4       	brne	.+8      	; 0x1988 <__fp_cmp+0x3e>
    1980:	08 95       	ret
    1982:	0a 26       	eor	r0, r26
    1984:	09 f4       	brne	.+2      	; 0x1988 <__fp_cmp+0x3e>
    1986:	a1 40       	sbci	r26, 0x01	; 1
    1988:	a6 95       	lsr	r26
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	81 1d       	adc	r24, r1
    198e:	81 1d       	adc	r24, r1
    1990:	08 95       	ret

00001992 <__fp_inf>:
    1992:	97 f9       	bld	r25, 7
    1994:	9f 67       	ori	r25, 0x7F	; 127
    1996:	80 e8       	ldi	r24, 0x80	; 128
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	08 95       	ret

0000199e <__fp_nan>:
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	80 ec       	ldi	r24, 0xC0	; 192
    19a2:	08 95       	ret

000019a4 <__fp_pscA>:
    19a4:	00 24       	eor	r0, r0
    19a6:	0a 94       	dec	r0
    19a8:	16 16       	cp	r1, r22
    19aa:	17 06       	cpc	r1, r23
    19ac:	18 06       	cpc	r1, r24
    19ae:	09 06       	cpc	r0, r25
    19b0:	08 95       	ret

000019b2 <__fp_pscB>:
    19b2:	00 24       	eor	r0, r0
    19b4:	0a 94       	dec	r0
    19b6:	12 16       	cp	r1, r18
    19b8:	13 06       	cpc	r1, r19
    19ba:	14 06       	cpc	r1, r20
    19bc:	05 06       	cpc	r0, r21
    19be:	08 95       	ret

000019c0 <__fp_round>:
    19c0:	09 2e       	mov	r0, r25
    19c2:	03 94       	inc	r0
    19c4:	00 0c       	add	r0, r0
    19c6:	11 f4       	brne	.+4      	; 0x19cc <__fp_round+0xc>
    19c8:	88 23       	and	r24, r24
    19ca:	52 f0       	brmi	.+20     	; 0x19e0 <__fp_round+0x20>
    19cc:	bb 0f       	add	r27, r27
    19ce:	40 f4       	brcc	.+16     	; 0x19e0 <__fp_round+0x20>
    19d0:	bf 2b       	or	r27, r31
    19d2:	11 f4       	brne	.+4      	; 0x19d8 <__fp_round+0x18>
    19d4:	60 ff       	sbrs	r22, 0
    19d6:	04 c0       	rjmp	.+8      	; 0x19e0 <__fp_round+0x20>
    19d8:	6f 5f       	subi	r22, 0xFF	; 255
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	08 95       	ret

000019e2 <__fp_split3>:
    19e2:	57 fd       	sbrc	r21, 7
    19e4:	90 58       	subi	r25, 0x80	; 128
    19e6:	44 0f       	add	r20, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	59 f0       	breq	.+22     	; 0x1a02 <__fp_splitA+0x10>
    19ec:	5f 3f       	cpi	r21, 0xFF	; 255
    19ee:	71 f0       	breq	.+28     	; 0x1a0c <__fp_splitA+0x1a>
    19f0:	47 95       	ror	r20

000019f2 <__fp_splitA>:
    19f2:	88 0f       	add	r24, r24
    19f4:	97 fb       	bst	r25, 7
    19f6:	99 1f       	adc	r25, r25
    19f8:	61 f0       	breq	.+24     	; 0x1a12 <__fp_splitA+0x20>
    19fa:	9f 3f       	cpi	r25, 0xFF	; 255
    19fc:	79 f0       	breq	.+30     	; 0x1a1c <__fp_splitA+0x2a>
    19fe:	87 95       	ror	r24
    1a00:	08 95       	ret
    1a02:	12 16       	cp	r1, r18
    1a04:	13 06       	cpc	r1, r19
    1a06:	14 06       	cpc	r1, r20
    1a08:	55 1f       	adc	r21, r21
    1a0a:	f2 cf       	rjmp	.-28     	; 0x19f0 <__fp_split3+0xe>
    1a0c:	46 95       	lsr	r20
    1a0e:	f1 df       	rcall	.-30     	; 0x19f2 <__fp_splitA>
    1a10:	08 c0       	rjmp	.+16     	; 0x1a22 <__fp_splitA+0x30>
    1a12:	16 16       	cp	r1, r22
    1a14:	17 06       	cpc	r1, r23
    1a16:	18 06       	cpc	r1, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	f1 cf       	rjmp	.-30     	; 0x19fe <__fp_splitA+0xc>
    1a1c:	86 95       	lsr	r24
    1a1e:	71 05       	cpc	r23, r1
    1a20:	61 05       	cpc	r22, r1
    1a22:	08 94       	sec
    1a24:	08 95       	ret

00001a26 <__fp_zero>:
    1a26:	e8 94       	clt

00001a28 <__fp_szero>:
    1a28:	bb 27       	eor	r27, r27
    1a2a:	66 27       	eor	r22, r22
    1a2c:	77 27       	eor	r23, r23
    1a2e:	cb 01       	movw	r24, r22
    1a30:	97 f9       	bld	r25, 7
    1a32:	08 95       	ret

00001a34 <__gesf2>:
    1a34:	8a df       	rcall	.-236    	; 0x194a <__fp_cmp>
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <__gesf2+0x6>
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	08 95       	ret

00001a3c <__mulsf3>:
    1a3c:	0b d0       	rcall	.+22     	; 0x1a54 <__mulsf3x>
    1a3e:	c0 cf       	rjmp	.-128    	; 0x19c0 <__fp_round>
    1a40:	b1 df       	rcall	.-158    	; 0x19a4 <__fp_pscA>
    1a42:	28 f0       	brcs	.+10     	; 0x1a4e <__mulsf3+0x12>
    1a44:	b6 df       	rcall	.-148    	; 0x19b2 <__fp_pscB>
    1a46:	18 f0       	brcs	.+6      	; 0x1a4e <__mulsf3+0x12>
    1a48:	95 23       	and	r25, r21
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <__mulsf3+0x12>
    1a4c:	a2 cf       	rjmp	.-188    	; 0x1992 <__fp_inf>
    1a4e:	a7 cf       	rjmp	.-178    	; 0x199e <__fp_nan>
    1a50:	11 24       	eor	r1, r1
    1a52:	ea cf       	rjmp	.-44     	; 0x1a28 <__fp_szero>

00001a54 <__mulsf3x>:
    1a54:	c6 df       	rcall	.-116    	; 0x19e2 <__fp_split3>
    1a56:	a0 f3       	brcs	.-24     	; 0x1a40 <__mulsf3+0x4>

00001a58 <__mulsf3_pse>:
    1a58:	95 9f       	mul	r25, r21
    1a5a:	d1 f3       	breq	.-12     	; 0x1a50 <__mulsf3+0x14>
    1a5c:	95 0f       	add	r25, r21
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	55 1f       	adc	r21, r21
    1a62:	62 9f       	mul	r22, r18
    1a64:	f0 01       	movw	r30, r0
    1a66:	72 9f       	mul	r23, r18
    1a68:	bb 27       	eor	r27, r27
    1a6a:	f0 0d       	add	r31, r0
    1a6c:	b1 1d       	adc	r27, r1
    1a6e:	63 9f       	mul	r22, r19
    1a70:	aa 27       	eor	r26, r26
    1a72:	f0 0d       	add	r31, r0
    1a74:	b1 1d       	adc	r27, r1
    1a76:	aa 1f       	adc	r26, r26
    1a78:	64 9f       	mul	r22, r20
    1a7a:	66 27       	eor	r22, r22
    1a7c:	b0 0d       	add	r27, r0
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	66 1f       	adc	r22, r22
    1a82:	82 9f       	mul	r24, r18
    1a84:	22 27       	eor	r18, r18
    1a86:	b0 0d       	add	r27, r0
    1a88:	a1 1d       	adc	r26, r1
    1a8a:	62 1f       	adc	r22, r18
    1a8c:	73 9f       	mul	r23, r19
    1a8e:	b0 0d       	add	r27, r0
    1a90:	a1 1d       	adc	r26, r1
    1a92:	62 1f       	adc	r22, r18
    1a94:	83 9f       	mul	r24, r19
    1a96:	a0 0d       	add	r26, r0
    1a98:	61 1d       	adc	r22, r1
    1a9a:	22 1f       	adc	r18, r18
    1a9c:	74 9f       	mul	r23, r20
    1a9e:	33 27       	eor	r19, r19
    1aa0:	a0 0d       	add	r26, r0
    1aa2:	61 1d       	adc	r22, r1
    1aa4:	23 1f       	adc	r18, r19
    1aa6:	84 9f       	mul	r24, r20
    1aa8:	60 0d       	add	r22, r0
    1aaa:	21 1d       	adc	r18, r1
    1aac:	82 2f       	mov	r24, r18
    1aae:	76 2f       	mov	r23, r22
    1ab0:	6a 2f       	mov	r22, r26
    1ab2:	11 24       	eor	r1, r1
    1ab4:	9f 57       	subi	r25, 0x7F	; 127
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	8a f0       	brmi	.+34     	; 0x1adc <__mulsf3_pse+0x84>
    1aba:	e1 f0       	breq	.+56     	; 0x1af4 <__mulsf3_pse+0x9c>
    1abc:	88 23       	and	r24, r24
    1abe:	4a f0       	brmi	.+18     	; 0x1ad2 <__mulsf3_pse+0x7a>
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	66 1f       	adc	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	91 50       	subi	r25, 0x01	; 1
    1ace:	50 40       	sbci	r21, 0x00	; 0
    1ad0:	a9 f7       	brne	.-22     	; 0x1abc <__mulsf3_pse+0x64>
    1ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	70 f0       	brcs	.+28     	; 0x1af4 <__mulsf3_pse+0x9c>
    1ad8:	5c cf       	rjmp	.-328    	; 0x1992 <__fp_inf>
    1ada:	a6 cf       	rjmp	.-180    	; 0x1a28 <__fp_szero>
    1adc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ade:	ec f3       	brlt	.-6      	; 0x1ada <__mulsf3_pse+0x82>
    1ae0:	98 3e       	cpi	r25, 0xE8	; 232
    1ae2:	dc f3       	brlt	.-10     	; 0x1ada <__mulsf3_pse+0x82>
    1ae4:	86 95       	lsr	r24
    1ae6:	77 95       	ror	r23
    1ae8:	67 95       	ror	r22
    1aea:	b7 95       	ror	r27
    1aec:	f7 95       	ror	r31
    1aee:	e7 95       	ror	r30
    1af0:	9f 5f       	subi	r25, 0xFF	; 255
    1af2:	c1 f7       	brne	.-16     	; 0x1ae4 <__mulsf3_pse+0x8c>
    1af4:	fe 2b       	or	r31, r30
    1af6:	88 0f       	add	r24, r24
    1af8:	91 1d       	adc	r25, r1
    1afa:	96 95       	lsr	r25
    1afc:	87 95       	ror	r24
    1afe:	97 f9       	bld	r25, 7
    1b00:	08 95       	ret

00001b02 <__divmodhi4>:
    1b02:	97 fb       	bst	r25, 7
    1b04:	07 2e       	mov	r0, r23
    1b06:	16 f4       	brtc	.+4      	; 0x1b0c <__divmodhi4+0xa>
    1b08:	00 94       	com	r0
    1b0a:	06 d0       	rcall	.+12     	; 0x1b18 <__divmodhi4_neg1>
    1b0c:	77 fd       	sbrc	r23, 7
    1b0e:	08 d0       	rcall	.+16     	; 0x1b20 <__divmodhi4_neg2>
    1b10:	0b d0       	rcall	.+22     	; 0x1b28 <__udivmodhi4>
    1b12:	07 fc       	sbrc	r0, 7
    1b14:	05 d0       	rcall	.+10     	; 0x1b20 <__divmodhi4_neg2>
    1b16:	3e f4       	brtc	.+14     	; 0x1b26 <__divmodhi4_exit>

00001b18 <__divmodhi4_neg1>:
    1b18:	90 95       	com	r25
    1b1a:	81 95       	neg	r24
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	08 95       	ret

00001b20 <__divmodhi4_neg2>:
    1b20:	70 95       	com	r23
    1b22:	61 95       	neg	r22
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255

00001b26 <__divmodhi4_exit>:
    1b26:	08 95       	ret

00001b28 <__udivmodhi4>:
    1b28:	aa 1b       	sub	r26, r26
    1b2a:	bb 1b       	sub	r27, r27
    1b2c:	51 e1       	ldi	r21, 0x11	; 17
    1b2e:	07 c0       	rjmp	.+14     	; 0x1b3e <__udivmodhi4_ep>

00001b30 <__udivmodhi4_loop>:
    1b30:	aa 1f       	adc	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	a6 17       	cp	r26, r22
    1b36:	b7 07       	cpc	r27, r23
    1b38:	10 f0       	brcs	.+4      	; 0x1b3e <__udivmodhi4_ep>
    1b3a:	a6 1b       	sub	r26, r22
    1b3c:	b7 0b       	sbc	r27, r23

00001b3e <__udivmodhi4_ep>:
    1b3e:	88 1f       	adc	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	5a 95       	dec	r21
    1b44:	a9 f7       	brne	.-22     	; 0x1b30 <__udivmodhi4_loop>
    1b46:	80 95       	com	r24
    1b48:	90 95       	com	r25
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	08 95       	ret

00001b50 <_exit>:
    1b50:	f8 94       	cli

00001b52 <__stop_program>:
    1b52:	ff cf       	rjmp	.-2      	; 0x1b52 <__stop_program>
